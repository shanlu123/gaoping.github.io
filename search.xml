<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/09/21/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>模块</title>
    <url>/2020/09/27/%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li><p>如果从python 解释器退出并再次进入，那么之前定义的函数和变量都会丢失，因此，如果想编写一个稍微长一些的程序，最好使用功能文本编辑器（如pycharm) 为解释器准备输入并将该文件作为输入运行，这被称为编写 脚本</p>
</li>
<li><p>为了将程序拆分为几个文件以方便维护，并且希望在不同程序中使用同一个函数而不是把和这个函数复制到每一个程序中去，可以使用 python提供的模块。</p>
</li>
<li><p>模块可以把定义放在一个文件中，并在脚本或解释器的交互式实例中使用它们， 模块中的定义可以导入到其他模块或者主模块（顶级和计算器模式下执行的脚本中可以访问的变量集合）中</p>
</li>
<li><p>在一个模块内部，模块名可以通过全局变量” _ name _”的值获得。</p>
</li>
<li><p>例如：</p>
<blockquote>
<p>a.py</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(a, b)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>然后在该目录中进入python解释器，导入该模块</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; imn<span class="keyword">port</span> a</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>在当前的符号表中，这并不会直接进入到定义在 a 函数内的名称，只是进入到该模块名中  a 中，可以用模块名访问 sum 和 cut 函数</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a.sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a.cut(<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a.__name_<span class="number">_</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>模块可以包含可执行的语句以及函数定义，这些语句用于初始化模块，它们仅在模块第一次 import  时才执行</p>
</li>
<li><p>每个模块都有它自己的私有符号表，该表用作模块中定义的所有函数的全局符号表。因此，模块的作者可以在模块内使用全局变量而不必担心与用户的全局变量发生冲突。</p>
</li>
<li><p>模块可以导入其他模块，习惯上把所有 import 语句放在模块或脚本的开头，但不要求。被导入的模块名存放在调入模块的全局符号表中</p>
</li>
<li><p>import 语句有一个变体，可以把名字从一个被调模块内直接导入到现模块的符号表里，</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from a import sum,cut</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sum(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; cut(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a.__name_<span class="number">_</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">NameError:</span> name <span class="string">&#x27;a&#x27;</span> is <span class="keyword">not</span> <span class="keyword">defined</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>这并不会把被调入模块名引入到局部变量里，即这么做 a 是未定义的</p>
</li>
<li><p>还有一个变体甚至可以导入模块内定义的所有名称</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from a  import *</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a.__name_<span class="number">_</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">NameError:</span> name <span class="string">&#x27;a&#x27;</span> is <span class="keyword">not</span> <span class="keyword">defined</span></span><br></pre></td></tr></table></figure>

<p>这会调入所有不是以下划线(_)开头的名称，在多数情况下，这个功能并不常用，因为会导致代码可读性很差。</p>
</li>
<li><p>如果模块名称之后带有 as ，在跟在 as 之后的名称将直接绑定到所导入的模块</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> a <span class="keyword">as</span> module_a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">module_a.sum(<span class="number">1</span>,<span class="number">3</span>)</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>这种方式也可以在用到 from 的时候使用</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">from</span> a <span class="keyword">import</span> sum <span class="keyword">as</span> function_sum</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">function_sum(<span class="number">3</span>,<span class="number">4</span>)</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure>
</li>
<li><p>以脚本的方式执行模块</p>
<blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">python</span> <span class="keyword">a</span>.<span class="keyword">py</span> <span class="symbol">&lt;arguments&gt;</span></span><br></pre></td></tr></table></figure>

<p>模块里的代码会被执行，就像导入了模块一样，但是__ name __ 被赋值为“ __ main __”</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; __name_<span class="number">_</span></span><br><span class="line"><span class="string">&#x27;__main__&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这经常用于为模块提供一个方便的用户接口，或用于测试（以脚本的方式运行模块从而执行一些测试套件）</p>
</blockquote>
</li>
<li><p>模块搜索路径</p>
<blockquote>
<p>当一个名为 spam 的模块被导入的时候，解释器首先寻找具有该名称的内置模块。</p>
<p>如果没找到，然后解释器从 sys.path 变量给出的目录列表中寻找名为 spam.py的文件，sys.path 初始有以下目录地址:</p>
<p>​        包含输入脚本的目录，或者未指定文件时的当前目录</p>
<p>​        PYTHONPATH—–一个包含目录名称的列表，它和 shell 变量 PAHT有一样的语法</p>
<p>​        取决于安装的默认的配置</p>
<p>在初始化后，Python程序可以更改 sys.path，包含正在运行脚本的文件目录被放在搜索路径的开头处，标准库路径之前。这意味着将加载此目录里的脚本，而不是标准库中的同名模块。</p>
</blockquote>
</li>
<li><p>“编译过的” python 文件</p>
<blockquote>
<p>为了加速模块载入，Python在 <em>pycache</em> 目录里缓存了每个模块的编译后版本，名称为 moudle.version.pyc，其中名称中的版本字段对编译文件的格式进行编码，一般使用Python版本号。</p>
<p>例如，在CPython3.3中，spam.py的编译版本将被缓存为 _ pycache _/spam.cpython-33.pyc</p>
<p>python在两种情况下不会检查缓存，一是从命令行直接载入的模块，它都是重新编译不存储编译结果；其次，如果没有源模块，它不会检查缓存。</p>
</blockquote>
</li>
</ul>
<h3 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h3><ul>
<li><p>python附带了一个标准模块库</p>
</li>
<li><p>一些模块内置于解释器中，它们提供对不属于语言核心但仍然内置的操作的访问，以提高效率或提供对系统调用等操作系统原语的访问</p>
</li>
<li><p>这些模块的集合是一个配置选项，也取决于底层平台，例如，winreg 模块只在 windows 操作系统上提供</p>
</li>
<li><p>特别注意 sys 模块，它被内嵌到每一个Python解释器中，变量 sys.psl 和 sys.ps2 定义用作主要和辅助提示的字符串</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import sys</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sys.ps1</span><br><span class="line"><span class="string">&#x27;&gt;&gt;&gt; &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sys.ps2</span><br><span class="line"><span class="string">&#x27;... &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sys.ps1=<span class="string">&#x27;C&gt;&#x27;</span></span><br><span class="line">C&gt;print(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">Hello</span><br><span class="line">C&gt;</span><br></pre></td></tr></table></figure>

<p>这两个变量只有在编译器是交互模式下才被定义</p>
</li>
<li><p>syp.path 变量是一个字符串列表，用于确定解释器的模块搜索路径，该变量被初始化为从环境变量 PYTHONPATH获取的默认路径，或者如果PYTHONPATH未设置，则从内置默认路径初始化。</p>
</li>
<li><p>可以使用标准列表操作对其进行修改</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;import sys</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;sys.paht.append(<span class="string">&#x27;/ufs/jack/lib/python&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir() 函数"></a>dir() 函数</h3><ul>
<li><p>内置dir() 函数用于查找模块定义的名称，它返回一个排序过的字符串列表</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import a</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dir(a)</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;cut&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有传入参数，dir() 列出你当前定义的名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>它列出所有类型的名称：变量，模块，函数，等等</p>
</li>
<li><p>不会列出内置函数和变量的名称，它们的定义是在标准模块 builtins 中</p>
</li>
</ul>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul>
<li>包是一种通过用“带点号的模块名”来构造Python模块命名空间的方法</li>
<li>例如，模块名A.B表示A包中名为B的子模块</li>
<li>从包中导入 *</li>
<li>子包参考</li>
<li>多个目录中的包</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据定义语言DDL</title>
    <url>/2020/09/19/DDL/</url>
    <content><![CDATA[<h3 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h3><ul>
<li>创建(CREATE)，修改(ALTER)，删除(DROP)</li>
</ul>
<p><strong>库的创建</strong></p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>  [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 库名;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建库Books</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> books ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>库的修改</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改库的字符集</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> books <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>库的删除</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> books;	</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>表的创建</strong></p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列的类型【(长度) 约束】,</span><br><span class="line">	列名 列的类型【(长度) 约束】,</span><br><span class="line">	列名 列的类型【(长度) 约束】,</span><br><span class="line">	...</span><br><span class="line">	列名 列的类型【(长度) 约束】</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建表 book</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="comment">#编号</span></span><br><span class="line">	book_Name <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="comment">#书名</span></span><br><span class="line">	book_price <span class="keyword">DOUBLE</span>,  <span class="comment">#价格</span></span><br><span class="line">	authorId  <span class="built_in">INT</span>,  <span class="comment">#作者编号</span></span><br><span class="line">	publishDate DATETIME  <span class="comment">#出版日期</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建表author</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">	author_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	author_nation <span class="built_in">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>表的修改</strong></p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span>|<span class="keyword">DROP</span>|<span class="keyword">MODIFY</span>|<span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> 列名 【列类型 约束】;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将publishDate修改为publish-date</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> publishDate publish_date DATETIME;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列的类型或约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将publish_date的类型从datetime变为timstamp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> publish_date <span class="built_in">TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#author表中添加author_age列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> author_age <span class="built_in">INT</span>; </span><br></pre></td></tr></table></figure>
</li>
<li><p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除author表中author_age列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">DROP</span> <span class="keyword">COLUMN</span>  author_age;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将author表名修改为book_author表名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">RENAME</span> <span class="keyword">TO</span> book_author;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>表的删除</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除book_author表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> book_author;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>表的复制</strong></p>
<ul>
<li><p>仅复制表的结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy1 <span class="keyword">LIKE</span> author;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制表的结构+数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy2 </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> author;</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅复制部分数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#仅复制author表中，国际为中国的作家id和作家姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy3</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,author_name</span><br><span class="line"><span class="keyword">FROM</span> author </span><br><span class="line"><span class="keyword">WHERE</span> author_nation=<span class="string">&#x27;中国&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅复制部分字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy4 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,author_name</span><br><span class="line"><span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据操作语言DML</title>
    <url>/2020/09/19/DML/</url>
    <content><![CDATA[<h3 id="数据操作语言"><a href="#数据操作语言" class="headerlink" title="数据操作语言"></a>数据操作语言</h3><ul>
<li>插入(insert)，修改(update)，删除(delete)</li>
</ul>
<h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a><strong>插入语句</strong></h3><ul>
<li><p>方式1插入</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名,...) <span class="keyword">VALUES</span>(值<span class="number">1</span>,...);</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入的值的类型与列的类型一致或兼容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,book_price,authorId,publish_date)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;红楼梦&#x27;</span>,<span class="number">56</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>不可以为Null 的列必须插入值，可为 Null 的列 有两种插入值的方式</p>
<ul>
<li><p>方式1，将不可为null的列的键对应的值设为Null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,book_price,authorId,publish_date)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;三国演义&#x27;</span>,<span class="literal">NULL</span>,<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;1978-9-8&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式2，插入值时不可为null的键值不写入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,authorId,publish_date)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;西游记&#x27;</span>,<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;1978-9-8&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>插入时列的顺序可以调换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将publish_date 和 authorId 顺序调换</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,publish_date,authorId)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;平凡的世界&#x27;</span>,<span class="string">&#x27;1979-9-7&#x27;</span>,<span class="string">&#x27;005&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>列的个数和值的个数必须一致</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#报错</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,publish_date,authorId)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;白鹿原&#x27;</span>,<span class="string">&#x27;1979-9-7&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;放风筝的人&#x27;</span>,<span class="number">59</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>方式2插入</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列名=值,列名=值,...</span><br></pre></td></tr></table></figure>
</li>
<li><p>两种方式插入的区别</p>
<ul>
<li><p>方式1插入支持多行插入，方式2不支持多行插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">&#x27;神雕侠侣&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;神雕侠侣&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;射雕英雄传&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式1支持子查询，方式2不支持子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_Name,book_price,authorId,publish_date)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,book_Name,book_price,authorId,publish_date</span><br><span class="line"><span class="keyword">FROM</span> book2 <span class="keyword">WHERE</span> <span class="keyword">id</span>&lt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a><strong>修改语句</strong></h3><ul>
<li><p>修改单表的记录</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列=新值,列=新值,...</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改book表中三国演义的书的价格为100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> book_price= <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> book_Name=<span class="string">&quot;三国演义&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改多表的记录</p>
<ul>
<li><p>sql 92语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">SET</span> 列=值,...</span><br><span class="line"><span class="keyword">WHERE</span> 连接条件</span><br><span class="line"><span class="keyword">AND</span> 筛选条件;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sql 99语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">INNER</span>|<span class="keyword">LEFT</span>|<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">SET</span> 列=值,...</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><ul>
<li><p>方式1删除：delete</p>
<ul>
<li><p>单表的删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 筛选条件</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除id为9的书</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">9</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多表的删除</p>
<ul>
<li><p>sql 92语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> 表<span class="number">1</span>的别名,表<span class="number">2</span>的别名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">WHERE</span> 连接条件</span><br><span class="line"><span class="keyword">AND</span> 筛选条件;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sql 99语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> 表<span class="number">1</span>的别名,表<span class="number">2</span>的别名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">INNER</span>|<span class="keyword">LEFT</span>|<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名 <span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>方式2删除：truncate</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除author表的信息</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> author;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>两种删除方式比较</p>
<ul>
<li>delete 可以添加where条件，truncate不可以加</li>
<li>truncate删除效率稍高</li>
<li>假如要删除的表中有自增长列，用delete删除后，再次插入数据，自增长列的值从断点开始，而用 truncate删除后，再次插入数据，自增长列的值从1开始</li>
<li>truncate 删除没有返回值，delete删除有返回值</li>
<li>truncate 删除不能回滚，delete 删除可以回滚</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql安装、服务的启动与登录</title>
    <url>/2020/09/16/Mysql%E5%AE%89%E8%A3%85%E3%80%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h3 id="Mysql-的安装与启动mysql服务"><a href="#Mysql-的安装与启动mysql服务" class="headerlink" title="Mysql 的安装与启动mysql服务"></a>Mysql 的安装与启动mysql服务</h3><p>这里我使用的是 phpStudy 集成环境中的 mysql，5.7版本，启动服务，只需要界面上点击启动即可。</p>
<img src="https://wx2.sinaimg.cn/mw690/007gSPK8gy1giuoto98cfj30rv0lr76a.jpg" alt="03.png" style="zoom:50%;" />

<p>此外，mysql 还可以通过配置服务启动等方式</p>
<h3 id="登录到-mysql-服务"><a href="#登录到-mysql-服务" class="headerlink" title="登录到 mysql 服务"></a>登录到 mysql 服务</h3><p>进入mysql 的安装目录下的 bin目录文件夹，输入命令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -h 主机名  -u  用户名  -p  </span><br></pre></td></tr></table></figure>

<p>然后提示输入数据库的密码即可。</p>
<img src="https://wx4.sinaimg.cn/mw690/007gSPK8gy1giuotrusxdj30o607xq3j.jpg" alt="04.png" style="zoom:80%;" />

<p>退出命令，exit</p>
<h3 id="mysql-配置文件"><a href="#mysql-配置文件" class="headerlink" title="mysql 配置文件"></a>mysql 配置文件</h3><p>mysql安装的根目录中 my.ini 文件即是 mysql 的配置文件</p>
<p>其中包含了 mysql 的客户端的配置 [mysql] 和 服务端的配置信息 [mysqld] ，可以看到 mysql  的安装目录以及数据库存放目录等等配置信息。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>TCL事务控制语言</title>
    <url>/2020/09/20/TCL/</url>
    <content><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行</li>
<li>事务由单独丹玉的一个或多个SQL语句组成，在这个单元中，每个SQL语句是相互依赖的。</li>
<li>而整个单独单元作为一个不可分割的整体，如果单元中某条SQL语句一旦执行失败或产生错误，整个单元将会回滚，所有受到影响的数据将返回到事务开始以前的状态；如果单元汇总的所以SQL语句均执行成功，则事务被顺利执行。</li>
<li>mysql 中的存储引擎<ul>
<li>在mysql中的数据用各种不同的技术存储在文件或内存中</li>
<li>通过 show engines，来查看mysql支持的存储引擎</li>
<li>在MySQL中用的最多的存储引擎有：innodb，myisam，memory等。其中 innodb 支持事务，myisam、memory等不支持事务。</li>
</ul>
</li>
</ul>
<h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性(ACID)"></a>事务的特性(ACID)</h3><ul>
<li>原子性：一个事务不可再分割，要么都执行要么都不执行</li>
<li>一致性：一个事务执行会使数据从一个一致性状态切换到另外一个一致性状态</li>
<li>隔离性：一个事务的执行不受其他事务的干扰</li>
<li>持久性：一个事务一旦提交，则会永久的改变数据库的数据</li>
</ul>
<h3 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h3><ul>
<li><p>隐式事务：事务没有明显的开启和结束的标记，比如 insert，update，delete 语句本身就是一个事务</p>
</li>
<li><p>显式事务：事务具有明显的开启和结束的标记，前提是必须先设置自动提交功能为禁用，即 SET autocommit = 0</p>
</li>
<li><p>事务创建步骤</p>
<ul>
<li><p>步骤1，开启事务（取消自动提交事务的功能）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSTCTION; <span class="comment"># 可写可不写，因为  设置自动提交时已经开始事务</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤2，编写事务的一组逻辑操作单元（多条sql 语句）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> jobs <span class="keyword">SET</span> min_salary = <span class="number">1000</span> <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> jobs <span class="keyword">SET</span> max_salary = <span class="number">5000</span> <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤3：结束事务</p>
<ul>
<li>COMMIT；提交事务，或 commit to 断点</li>
<li>ROLLBACK；回滚事务，或 rollback to 断点</li>
<li>SAVEPOINT 节点名；设置保存点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="事务的隔离性级别"><a href="#事务的隔离性级别" class="headerlink" title="事务的隔离性级别"></a>事务的隔离性级别</h3><ul>
<li>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题<ul>
<li>脏读：对于两个事务T1，T2，T1已经读取了被T2更新但还没提交的字段之后，若T2回滚，T1读取的内容就是临时且无效的。</li>
<li>不可重复读：对于两个事务T1，T2，T1读取了一个字段，然后T2更新了该字段之后，T1再次读取了同一个字段，值不同了</li>
<li>幻读：对于两个事务T1，T2，T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行之后，如果T1再次读取同一个表，就会多出几行。</li>
</ul>
</li>
<li>数据库事务的隔离性：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。</li>
<li>一个事务与其他事务隔离的程度称为隔离级别：数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</li>
<li>数据库提供四种事务隔离级别<ul>
<li>READ  UNCOMMITTED：读未提交，允许事务读取未被其他事务提交的变更，脏读，不可重复读，幻读的问题都会出现</li>
<li>READ  COMMITTED：读已提交，只允许事务读取已经被其他事务提交的变更，可以避免脏读，但不可重复读和幻读问题仍然可能出现</li>
<li>REPEATABLE  READ，确保事务可以多次从一个字段中读取相同的值，在个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读的问题仍然存在</li>
<li>SERIALIZABLE：串行化，确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务读该表执行插入，更新和删除操作，所有并发问题都可以避免，但性能十分低下。</li>
</ul>
</li>
</ul>
<blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">READ uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">READ committed</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">REPEATABLE read</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">SERIALIZABLE</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
</blockquote>
<ul>
<li><p>mysql 中默认的隔离性级别：REPEATABLE READ，mysql 支持4中隔离性级别</p>
</li>
<li><p>oracle 中默认的隔离型级别：READ COMMITTED，仅支持READ COMMITTED和SERIALIZABLE两种隔离级别。</p>
</li>
<li><p>设置隔离性级别</p>
<ul>
<li><p>每启动一个mysql程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量 @@tx_isolation，表示当前的事务隔离级别</p>
</li>
<li><p>查看当前的隔离级别</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@tx_isolation;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>设置当前 mysql 连接的隔离级别</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> 隔离级别;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>设置数据库系统的全局的隔离级别</p>
</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> 隔离级别;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="事务在delete和truncate处理上的区别"><a href="#事务在delete和truncate处理上的区别" class="headerlink" title="事务在delete和truncate处理上的区别"></a>事务在delete和truncate处理上的区别</h3><ul>
<li>delete 操作时，事务 ROLLBACK，可以恢复更新前的数据</li>
<li>truncate 操作时，事务 ROLLBACK，不可以恢复更新前的数据</li>
</ul>
<h3 id="断点-savepoint"><a href="#断点-savepoint" class="headerlink" title="断点 savepoint"></a>断点 savepoint</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> jobs <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span>  a; <span class="comment">#设置保存点</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> jobs <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;<span class="comment">#回滚到保存点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> jobs;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql常用命令</title>
    <url>/2020/09/16/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>查看当前所有的数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><strong>打开指定的数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 库名;</span><br></pre></td></tr></table></figure>

<p><img src="https://wx3.sinaimg.cn/mw690/007gSPK8gy1giup1pxszkj305w020mwz.jpg" alt="06.png"></p>
<p>表示切换数据库成功</p>
<p><strong>查看当前库中的所有表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p><strong>查看某个库中所有的表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables from 库名;</span><br></pre></td></tr></table></figure>

<p><strong>查看表结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure>

<p><strong>查看当前所在的库</strong></p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">select</span> <span class="function"><span class="title">database</span>()</span></span><br></pre></td></tr></table></figure>

<img src="https://wx3.sinaimg.cn/mw690/007gSPK8gy1giup1tsuyuj308x055dfr.jpg" style="zoom:80%;" />

<p><strong>创建表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">   列名 列类型,</span><br><span class="line">   列名 列类型，</span><br><span class="line">   。。。</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>查看 mysql 版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>

<img src="https://wx1.sinaimg.cn/mw690/007gSPK8gy1giup2cblhdj309x054t8n.jpg" alt="image-20200916233203526" style="zoom:80%;" />

<p><strong>SQL 语言分类</strong></p>
<ul>
<li>数据查询语言：DQL（Data Query Language）</li>
<li>数据操作语言：DML（insert，update，delete）</li>
<li>数据定义语言：DDL（create，drop，alter）</li>
<li>事务控制语言：TCL（commit，rollback）</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实例</title>
    <url>/2020/09/16/Vue%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件</title>
    <url>/2020/09/16/Vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><h4 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h4><h4 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h4><h4 id="通过Prop向子组件传递数据"><a href="#通过Prop向子组件传递数据" class="headerlink" title="通过Prop向子组件传递数据"></a>通过Prop向子组件传递数据</h4><h4 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h4><h4 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h4><p><em>使用事件抛出一个值</em></p>
<p><em>在组组件上使用 v-model</em></p>
<h4 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h4><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><h4 id="解析DOM模板的注意事项"><a href="#解析DOM模板的注意事项" class="headerlink" title="解析DOM模板的注意事项"></a>解析DOM模板的注意事项</h4><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h4 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h4><p>​    组件名大小写</p>
<h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><p>​    <em>在模块系统中局部注册</em></p>
<p>​    <em>基础组件的自动化全局注册</em></p>
<h4 id="动态组件-1"><a href="#动态组件-1" class="headerlink" title="动态组件"></a>动态组件</h4><h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>分组查询</title>
    <url>/2020/09/18/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  查询列表</span><br><span class="line"><span class="keyword">from</span> 	表</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组的字段</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段】</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>和分组函数一同查询的字段必须是group by 后出现的字段</li>
<li>筛选分类两类：<ul>
<li>分组前筛选：针对原始表，连接的关键字是where，group by 前</li>
<li>分组后筛选：针对 group by后的结果集，连接的关键字是having，group by后</li>
</ul>
</li>
<li>尽量使用分组前筛选</li>
<li>分组可以按单个字段也可以按多个字段</li>
<li>分组可以搭配排序使用</li>
</ul>
<h3 id="GROUP-BY-子句语法"><a href="#GROUP-BY-子句语法" class="headerlink" title="GROUP BY 子句语法"></a>GROUP BY 子句语法</h3><ul>
<li>可以使用GROUP BY 子句将表中的数据分成若干组</li>
<li>在SELECT 列表中所有未包含在分组函数中的列，都应该包含在 GROUP BY 子句中</li>
<li>GROUP BY 子句中可以包含多个列</li>
</ul>
<h3 id="简单分组查询"><a href="#简单分组查询" class="headerlink" title="简单分组查询"></a>简单分组查询</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的员工人数</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="keyword">COUNT</span>(*)员工人数 <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个工种的员工平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) 平均工资 ,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个位置的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 部门个数,location_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="分组前添加筛选条件"><a href="#分组前添加筛选条件" class="headerlink" title="分组前添加筛选条件"></a>分组前添加筛选条件</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询邮箱中包含a字符的 每个部门的最高工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)最高工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有奖金的每个领导手下员工的平均工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary)平均工资,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="分组后添加筛选条件"><a href="#分组后添加筛选条件" class="headerlink" title="分组后添加筛选条件"></a>分组后添加筛选条件</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询哪个部门的员工个数&gt;5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#先查询每个部门的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 员工人数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#再筛选刚才的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 员工人数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id 工种编号,<span class="keyword">MAX</span>(salary) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MAX</span>(salary)&gt;<span class="number">12000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#领导编号&gt;102的每个领导手下的最低工资大于5000的领导编号和最低工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> manager_id,<span class="keyword">MIN</span>(salary) 最低工资</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id &gt; <span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;<span class="number">5000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分组后添加筛选条件+添加排序</span></span><br><span class="line"><span class="comment">#每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id,<span class="keyword">MAX</span>(salary) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> 最高工资&gt;<span class="number">6000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 最高工资 ;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="按多个字段分组"><a href="#按多个字段分组" class="headerlink" title="按多个字段分组"></a>按多个字段分组</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个工种每个部门的最低工资,并按最低工资降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary) 最低工资,job_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id,job_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">MIN</span>(salary) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="非法使用分组函数"><a href="#非法使用分组函数" class="headerlink" title="非法使用分组函数"></a>非法使用分组函数</h3><ul>
<li>不能在 Where 子句中使用分组函数</li>
<li>可以在 Having 子句中使用分组函数</li>
</ul>
<h3 id="过滤分组：Having子句"><a href="#过滤分组：Having子句" class="headerlink" title="过滤分组：Having子句"></a>过滤分组：Having子句</h3><p>​    </p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2020/09/20/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>一组预先编译好的SQL语句语句的集合，理解成批处理语句</li>
<li>好处<ul>
<li>提高代码的重用性</li>
<li>简化操作</li>
<li>减少了编译次数，减少了和数据库服务器的连接次数</li>
</ul>
</li>
</ul>
<h3 id="函数与存储过程"><a href="#函数与存储过程" class="headerlink" title="函数与存储过程"></a>函数与存储过程</h3><ul>
<li>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入，批量更新</li>
<li>函数：有且仅有一个返回，适合做处理数据后返回一个结果</li>
</ul>
<h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> FUNCITON 函数名（参数列表） <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	函数体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>参数列表：包含 参数名 参数类型</p>
</li>
<li><p>函数体：肯定会有 return 语句，如果没有不会报错，若 return语句没有放在函数体的最后不报错，但不建议这样写。</p>
</li>
<li><p>函数体若仅有一句，可以省略 begin end</p>
</li>
<li><p>使用 delimiter 语句设置结束标记</p>
</li>
</ul>
<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ul>
<li><p>调用语法：SELECT  函数名(参数列表)</p>
</li>
<li><p>无参有返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回公司的员工个数</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1() <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;<span class="comment">#定义局部变量</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">num</span> <span class="comment">#赋值</span></span><br><span class="line">	<span class="keyword">FROM</span> employees;</span><br><span class="line">	RETURN num;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> f1()</span><br></pre></td></tr></table></figure>
</li>
<li><p>有参有返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据员工名，返回它的工资</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f2(empName <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> @sal=<span class="number">0</span>;<span class="comment">#定义用户变量 </span></span><br><span class="line">	<span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> @sal   <span class="comment">#赋值</span></span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> last_name = empName;</span><br><span class="line">	RETURN @sal;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> f2(<span class="string">&#x27;Kochhar&#x27;</span>) </span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建函数，实现传入两个float，返回二者之和</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun(num1 <span class="built_in">FLOAT</span>,num2 <span class="built_in">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="built_in">FLOAT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="keyword">SUM</span> <span class="built_in">FLOAT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">SET</span> <span class="keyword">SUM</span>=num1+num2;</span><br><span class="line">	RETURN SUM;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> fun(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><ul>
<li>一次只能删除一个函数，并且要求有该函数的 alter rontine 权限</li>
</ul>
<blockquote>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> f1;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>分页查询</title>
    <url>/2020/09/19/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol>
<li>应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求</li>
<li>语法：</li>
</ol>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">【<span class="keyword">join</span> <span class="keyword">TYPE</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段</span><br><span class="line"><span class="keyword">HAVING</span> 分组后的筛选</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序的字段】</span><br><span class="line"><span class="keyword">LIMIT</span> 【<span class="keyword">offset</span>,】<span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>​        offset ：显示条目的起始索引（起始索引从0开始）</li>
<li>​        size：显示的条目个数</li>
<li>​       limit 子句要放在查询语句的最后</li>
<li>​      公式：显示的页数 page，每页的条目数 size</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line"><span class="keyword">LIMIT</span> (page<span class="number">-1</span>)*<span class="keyword">size</span>,<span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询前五条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  employees <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  employees <span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询第11条——第25条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  employees <span class="keyword">LIMIT</span> <span class="number">10</span>,<span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#有奖金的员工信息，并且工资较高的前10名显示出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span> ;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客搭建</title>
    <url>/2020/09/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="这篇文章希望记录一下我搭建Hexo博客的过程"><a href="#这篇文章希望记录一下我搭建Hexo博客的过程" class="headerlink" title="这篇文章希望记录一下我搭建Hexo博客的过程"></a>这篇文章希望记录一下我搭建Hexo博客的过程</h2><h3 id="第一步，配置GitHub"><a href="#第一步，配置GitHub" class="headerlink" title="第一步，配置GitHub"></a>第一步，配置GitHub</h3><p>登录到 github ，新建一个库，库的名称建立用自己的用户名+github.io 命名，如 jack.github.io 作为库的名称，之后部署成功之后，就可以通过 <a href="https://jack.github.io/">https://jack.github.io</a> 访问你的博客站点啦。</p>
<h3 id="第二步，安装-node环境和git代码管理工具"><a href="#第二步，安装-node环境和git代码管理工具" class="headerlink" title="第二步，安装 node环境和git代码管理工具"></a>第二步，安装 node环境和git代码管理工具</h3><p>node.js 直接在官网下载即可：<a href="https://nodejs.org/en/%EF%BC%8Cgit">https://nodejs.org/en/，git</a> 也可以自己去官网下载，我是学前端的，学习vue和node的时候就已经安装好了，git 是我们日常开发工作中托管代码必不可少的工具，有关 git 的常用命令，可以参考廖雪峰老师i教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>
<h3 id="第三步，安装-hexo-cli"><a href="#第三步，安装-hexo-cli" class="headerlink" title="第三步，安装 hexo-cli"></a>第三步，安装 hexo-cli</h3><p>我们需要全局安装 hexo-cli 搭建我们的 hexo 博客，通过npm安装，直接在终端窗口中键入 npm install –g hexo-cli。</p>
<p>接着新建一个博客目录，如直接桌面上新建一个 MyHexoBolgs 文件夹，然后进入到这个空目录下，通过 hexo init，创建一个hexo项目，或者也可以直接通过 hexo init  MyHexoBlogs 来创建，这样就不用我们手动创建博客目录了。</p>
<p>安装的过程很慢，需要耐心等待下。（当时半天安装不下来，就一直按回车键，结果还报错了，后来重新安装，并在安装过程中去网上寻找解决方法，结果在去寻找其他方式提高下载速度的过程中，发现它已经安装好了，但是速度确实挺慢的）</p>
<h3 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h3><p>在 创建好 hexo 项目后，source 目录下已经有一个 Hello world 文件，所以直接执行 hexo g ，接着启动本地服务器 hexo s ，并根据它的提示在浏览器访问 localhost：4000 既可以看到这个 hexo 博客网站以及上面的一篇 hello world 文章了。</p>
<h3 id="第五步：github-远程仓库中添加-key"><a href="#第五步：github-远程仓库中添加-key" class="headerlink" title="第五步：github 远程仓库中添加 key"></a>第五步：github 远程仓库中添加 key</h3><p>在根目录下（博客根目录文件夹）大家终端窗口，键入 ssh-keygen -t rsa -C “Github的绑定的邮箱”，一路Enter，就在 .ssh 目录下创建了一个 id_rsa_pub ，用记事本或者其他文本编辑器打开该文件，然后复制文件中的内容，并添加的我们自己的 github 仓库中。</p>
<h3 id="第六步：配置博客部署信息并托管到githhub上"><a href="#第六步：配置博客部署信息并托管到githhub上" class="headerlink" title="第六步：配置博客部署信息并托管到githhub上"></a>第六步：配置博客部署信息并托管到githhub上</h3><p>打开根目录下的 .config.yml 文件，这是 hexo 博客的配置文件，这里需要配置的 deploy 信息：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deploy：</span><br><span class="line">	type：git</span><br><span class="line">	reop：github仓库的地址，如 https:<span class="regexp">//gi</span>thub.com<span class="regexp">/jack/</span>jack.github.io</span><br><span class="line">	branch：master</span><br></pre></td></tr></table></figure>

<p>然后在博客根目录中执行 hexo clean，hexo g ，hexo d，就可以将可以部署到github上了，浏览器直接访问 <a href="https://github用户名.github.io/">https://github用户名.github.io</a> 就可以访问到自己创建的hexo 博客项目了。</p>
<p>下面就是博客的配置和美化了</p>
]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>博客配置与美化</title>
    <url>/2020/09/14/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>首先，Hexo搭配Nexo 主题的博客的简约风格是我特别喜欢的，所以这里我选择的是 Next 主题，并且这也是最多人使用的，所以配置过程中遇到问题也可以方便的找到解决方式。</p>
<p>其次，配置过程主要依赖的是Next 官方文档<a href="http://theme-next.iissnan.com/getting-started.html%EF%BC%8C">http://theme-next.iissnan.com/getting-started.html，</a>  根据文档的教程一步一步来，就可以让自己的网站有个初步的雏形了。这里我配置的Next 主题是 Gemini，即打开 最后一个的注释，其他的都加上注释，可以参考一下。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta"># scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h5 id="美化1，文章页末美化"><a href="#美化1，文章页末美化" class="headerlink" title="美化1，文章页末美化"></a>美化1，文章页末美化</h5><p>文章页末默认是一个# 标签名，这里是希望将 # 改成其他图标，在  themes/next/layout_macro/post.njk 文件中，找到 tab.name处，修改为：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">url_for</span>(<span class="name">tag.path</span>) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><span class="template-variable">&#123;&#123; <span class="name">tag.name</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>也可替换为直接喜欢的其他图标，Next使用的是 FontAwesome 图标库，可在中文官网上找到合适的图标：<a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a></p>
<h5 id="美化2：添加结束标记"><a href="#美化2：添加结束标记" class="headerlink" title="美化2：添加结束标记"></a>美化2：添加结束标记</h5><p>在文末添加 “本文结束 感谢阅读” 的标记，在 themes/next/layout_macro 目录中，新建一个 post-end-tag.swig 文件，添加以下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color:#bfbfbf;font-size:16px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>-------- 本文结束 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-</span></span></span><span class="template-variable">&#123;&#123; config.post_end_tag.icon &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span> 感谢阅读 --------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在文章布局模板中添加以下代码：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">+ &#123;% <span class="keyword">if</span> config.post_end_tag.enabled and not is_index %&#125;</span><br><span class="line">+ &lt;div&gt;</span><br><span class="line">+  &#123;% include <span class="string">&#x27;post-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">+ &lt;/div&gt;</span><br><span class="line">+ &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在站点配置文件末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章结束标记</span></span><br><span class="line"><span class="attr">post_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 是否开启文末的本文结束标记</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">snowflake-o</span> <span class="comment"># 结束标记之间的图标</span></span><br></pre></td></tr></table></figure>

<h5 id="美化3：添加看板娘"><a href="#美化3：添加看板娘" class="headerlink" title="美化3：添加看板娘"></a>美化3：添加看板娘</h5><p>在站点根目录中安装依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<p>安装模型：</p>
<p>可以去 <a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">https://blog.csdn.net/wang_123_zy/article/details/87181892</a> 中预览模型资源，然后安装自己喜欢的模型，如安装 shizuku 模型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-shizuku</span><br></pre></td></tr></table></figure>

<p>接着在站点配置文件中添加配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看板娘</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">225</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">450</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<p>重启服务器，可以看到效果，如果希望看板娘在页面的右侧，只要将 position：left 改为 right 即可。</p>
<h5 id="美化4：个性化回到顶部"><a href="#美化4：个性化回到顶部" class="headerlink" title="美化4：个性化回到顶部"></a>美化4：个性化回到顶部</h5><p>首先选择一张合适的图片放在 themes/next/source/images 目录下，并命名为 scroll.png，然后在 themes/next/source/css/main.syl 文件末尾添加：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义回到顶部样式</span></span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>;  <span class="comment">//图片素材宽度</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">900px</span>;  <span class="comment">//图片素材高度</span></span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: unset;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;/images/scroll.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//隐藏箭头图标</span></span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? calc( <span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">200px</span> ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="http://yearito.cn/posts/hexo-theme-beautify.html%EF%BC%8C%E8%AF%A5%E6%96%87%E7%AB%A0%E4%B8%AD%E7%9A%84">http://yearito.cn/posts/hexo-theme-beautify.html，该文章中的</a> hexo 版本和我搭建的 hexo 版本不同，若是有不同的，新版本的可以参考下我的配置。</p>
<p>另外，发布博客的时候，遇到了新建博客文件时，tag和categories 设置不正确的情况，需要各位注意，最后我新建博客页面都是在 _post 目录下直接创建 markdown 文件，然后在每篇文章的最前面配置，title，tags，categories等，如本片博客的配置：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: &#x27;博客配置与美化&#x27;</span><br><span class="line"><span class="keyword">tags:</span> blog</span><br><span class="line">categories: about</span><br></pre></td></tr></table></figure>

<p>在_post 的同级目录下要创建站点配置中的菜单项文件夹，比如，我的菜单配置项是这样的：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || fa fa-home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || fa fa-user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || fa fa-tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || fa fa-th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || fa fa-archive</span><br><span class="line"><span class="symbol">  schedule:</span> <span class="meta-keyword">/schedule/</span> || fa fa-calendar</span><br><span class="line"><span class="symbol">  school:</span> <span class="meta-keyword">/school/</span> || fa fa-graduation-cap</span><br><span class="line"><span class="symbol">  tree_hole:</span> /tree_hole/ || fa fa-tree</span><br><span class="line"><span class="symbol">  photos:</span> <span class="meta-keyword">/photos/</span> || fa fa-camera</span><br><span class="line"><span class="symbol">  movies:</span> <span class="meta-keyword">/movies/</span> || fa fa-film</span><br><span class="line"><span class="symbol">  musics:</span> <span class="meta-keyword">/musics/</span> || fa fa-music</span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="symbol">menu_settings:</span></span><br><span class="line"><span class="symbol">  icons:</span> true</span><br><span class="line"><span class="symbol">  badges:</span> false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么 _post 同级目录下，就需要创建 hoem，about，tags等文件夹，直接通过在博客根目录中执行  ” hexo new page 文件夹名 “ 就可以创建目录，然后在每个目录下会自动生成 index.md  文件，在该文件中要配置 type 属性，如about 目录中的 index.md 文件中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">&#x27;2020-9-12&#x27;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;about&#x27;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span> <span class="comment"># 该分类不显示评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>最后，这个静态博客还有很多不完善的地方，比如，托管在 github 上速度太慢，于是我通过 gulp 做了静态资源的打包压缩，但访问依然还是很慢，日后我会将它部署到 gitee 上试试。hexo 搭建的博客还可以进行 CDN 的加速，但是新版本的CDN加速似乎和之前版本的配置不太一样，这里我配置过程中，遇到了一些问题，日后全部解决了再分享出来。</p>
<p>最后的最后，本站已经开启评论功能，欢迎大家多多指正。</p>
]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>基础查询</title>
    <url>/2020/09/17/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="基础查询语法"><a href="#基础查询语法" class="headerlink" title="基础查询语法"></a>基础查询语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表  <span class="keyword">from</span>  表名;</span><br></pre></td></tr></table></figure>

</blockquote>
<blockquote>
<p>查询列表可以是表中的字段、常量值、表达式、函数，查询的结果是一个虚拟的表格</p>
</blockquote>
<p><strong>查询表中的单个字段</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询表中多个字段</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name,last_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询表中所有字段</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询常量值</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p> <strong>查询表达式</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span>/<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询函数</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="起别名（重命名一个列）"><a href="#起别名（重命名一个列）" class="headerlink" title="起别名（重命名一个列）"></a>起别名（重命名一个列）</h3><p><strong>方式1，使用 as</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> 姓,first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>方式2，使用空格</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name 姓,first_name 名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<blockquote>
<p>注意，当所起的别名有 空格，# 等特殊符号时，需要用引号引起来，如;</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">AS</span> <span class="string">&quot;工 资&quot;</span> <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="去重，distinct-关键字"><a href="#去重，distinct-关键字" class="headerlink" title="去重，distinct 关键字"></a>去重，distinct 关键字</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="concat-连接"><a href="#concat-连接" class="headerlink" title="concat() 连接"></a>concat() 连接</h3><blockquote>
<p>如将 first_name 和 last_name 连接成一个字段，显示为姓名、</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   <span class="keyword">CONCAT</span>(first_name,last_name) <span class="keyword">AS</span> 姓名 </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>多表(连接)查询</title>
    <url>/2020/09/18/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2)/</url>
    <content><![CDATA[<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul>
<li>又称多表查询，当查询的字段来自于多个表时，就需要用到连接查询</li>
<li>分类：<ul>
<li>按年代分类：<ul>
<li>sql92 标准：仅支持内连接</li>
<li>sql99 标准：支持内连接 + 外连接 + 交叉连接</li>
</ul>
</li>
<li>按功能分类：<ul>
<li>内连接：等值连接、非等值连接、自连接</li>
<li>外连接：左外连接、右外连接、全外连接</li>
<li>交叉连接</li>
</ul>
</li>
</ul>
</li>
<li>笛卡尔乘积现象<ul>
<li>表1有m行，表2有n行，连接后结果为 m*n 行</li>
<li>原因：没有添加有效的连接条件</li>
<li>解决：可以在Where 子句中加入有效的连接条件</li>
</ul>
</li>
<li>sql92和sql99<ul>
<li>sql99 支持的更多</li>
<li>sql99 实现连接条件和筛选条件的分离，可读性较高</li>
</ul>
</li>
</ul>
<h3 id="等值连接（sql-92"><a href="#等值连接（sql-92" class="headerlink" title="等值连接（sql 92)"></a>等值连接（sql 92)</h3><ul>
<li>等值连接的结果为多个表的交集部分</li>
<li>n个表连接，至少需要 n-1 个连接条件</li>
<li>多表连接，对顺序没有要求</li>
<li>一般需要为每个表起别名</li>
<li>可以搭配排序，分组，筛选等子句使用</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和对应的部门名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.<span class="string">`department_id`</span>=departments.<span class="string">`department_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为表起别名，表的顺序可以调换</span></span><br><span class="line"><span class="comment">#注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> 员工表.last_name , 员工表.job_id, 职位表.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees 员工表,jobs 职位表</span><br><span class="line"><span class="keyword">WHERE</span> 员工表.<span class="string">`job_id`</span>=职位表.<span class="string">`job_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等值连接+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工名、部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,commission_pct 奖金</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> E.<span class="string">`commission_pct`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等值连接+分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个城市的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 部门个数,city 城市</span><br><span class="line"><span class="keyword">FROM</span> departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等值连接+排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个工种的工种名和员工的个数，并且按员工个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> job_title 工种名,<span class="keyword">COUNT</span>(*) 员工个数</span><br><span class="line"><span class="keyword">FROM</span> employees E,jobs J</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`job_id`</span>=J.<span class="string">`job_id`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#三表连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名、部门名和所在的城市</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,city 城市</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三表连接+筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,city 城市</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三表连接+排序</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,city 城市</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="等值连接-sql-99"><a href="#等值连接-sql-99" class="headerlink" title="等值连接(sql 99)"></a>等值连接(sql 99)</h3><ul>
<li>通过 join 关键字实现连接</li>
<li>通过 ON 子句创建连接<ul>
<li>自然连接中是以具有相同名字的列为连接条件的</li>
<li>可以使用ON 子句指定额外的连接条件</li>
</ul>
</li>
<li>分类：<ul>
<li>内连接：[inner] join on</li>
<li>左外连接：left [outer] join on</li>
<li>右外连接：right [outer] join on</li>
</ul>
</li>
<li>语法：</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，......</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line">[<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br><span class="line">[<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>] <span class="keyword">join</span> 表<span class="number">3</span></span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line">[<span class="keyword">where</span> 筛选条件]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> 分组字段]</span><br><span class="line">[<span class="keyword">having</span> 分组后的筛选条件]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式] </span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名、部门名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">JOIN</span>  employees E</span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`department_id`</span> = D.<span class="string">`department_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql99等值连接+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询名字中包含e的员工名和工种名（添加筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,job_title 工种名</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs J</span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`job_id`</span>=  J.<span class="string">`job_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`last_name`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql99等值连接+分组+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门个数&gt;3的城市名和部门个数，（添加分组+筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> city 城市名,<span class="keyword">COUNT</span>(*) 部门个数</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> locations L</span><br><span class="line"><span class="keyword">ON</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="非等值连接-sql-92"><a href="#非等值连接-sql-92" class="headerlink" title="非等值连接(sql 92)"></a>非等值连接(sql 92)</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工资和工资级别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary 工资,grade_level 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees E,job_grades G</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#非等值连接+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工的工资和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> salary 工资,grade_level 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees E,job_grades G</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> G.<span class="string">`lowest_sal`</span> <span class="keyword">AND</span> G.<span class="string">`highest_sal`</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#非等值连接+分组+筛选+排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询工资级别的个数&gt;20的个数，并且按工资级别降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">JOIN</span> job_grades G</span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`salary`</span> <span class="keyword">BETWEEN</span> G.<span class="string">`lowest_sal`</span> <span class="keyword">AND</span> G.<span class="string">`highest_sal`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">20</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="自连接-sql-92"><a href="#自连接-sql-92" class="headerlink" title="自连接(sql 92)"></a>自连接(sql 92)</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和上级的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> E.last_name 员工名,M.last_name 上级名称</span><br><span class="line"><span class="keyword">FROM</span> employees E,employees M</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`manager_id`</span>=M.<span class="string">`employee_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="自连接-sql-99"><a href="#自连接-sql-99" class="headerlink" title="自连接(sql 99)"></a>自连接(sql 99)</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和上级的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> E.last_name 员工名, M.last_name 上级名称</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">JOIN</span> employees M </span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`manager_id`</span>=M.<span class="string">`employee_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="外连接（仅sql99支持"><a href="#外连接（仅sql99支持" class="headerlink" title="外连接（仅sql99支持)"></a>外连接（仅sql99支持)</h3><ul>
<li><p>应用场景：用于查询一个表中有，另一个表中没有的记录</p>
</li>
<li><p>使用：</p>
<ul>
<li>外连接的查询结果是主表中的所有记录，如果从表中有和它匹配的，则显示匹配的值；如果从表中没有和它匹配的，则显示 null；</li>
<li>外连接的查询结果=内连接查询结果+主表中有而从表中没有的记录</li>
</ul>
</li>
<li><p>左外连接：left join 左边的是主表</p>
</li>
<li><p>右外连接：right join 右边的是主表</p>
</li>
<li><p>全外连接：内连接的结果+表1中有但表2中无+表2中有但表1中无</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询哪个部门没有员工</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> D.*,E.employee_id </span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> employees E</span><br><span class="line"><span class="keyword">ON</span> D.<span class="string">`department_id`</span> = E.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`employee_id`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> D.*,E.employee_id</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments D</span><br><span class="line"><span class="keyword">ON</span> D.<span class="string">`department_id`</span> = E.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> e.<span class="string">`employee_id`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全外连接（mysql 不支持)</span></span><br><span class="line"><span class="keyword">SELECT</span> G.*,B.*</span><br><span class="line"><span class="keyword">FROM</span> beauty G</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys B</span><br><span class="line"><span class="keyword">ON</span> G.<span class="string">`boyfriend_id`</span> = B.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#交叉连接</span></span><br><span class="line"><span class="keyword">SELECT</span> G.*,B.*</span><br><span class="line"><span class="keyword">FROM</span> beauty G</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> boys B;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>存储过程</title>
    <url>/2020/09/20/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul>
<li>一组预先编译好的SQL语句的集合，理解成批处理语句</li>
<li>提高代码的重用性</li>
<li>简化操作</li>
<li>减少了编译次数并且减少了和数据库服务器的连接次数</li>
<li>类型：<ul>
<li>无返回无参</li>
<li>仅仅带 in 类型，无返回有参</li>
<li>仅仅待 out 类型，有返回无参</li>
<li>既带 in 又带 out，有返回有参</li>
<li>带inout，有返回有参</li>
</ul>
</li>
</ul>
<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><ul>
<li><p>语法</p>
</li>
<li><pre><code class="sql">delimiter 新的结束标记
CREATE PROCEDURE 存储过程名(参数列表)
BEGIN
    存储过程体(一组合法的sql语句)
END
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">  </span><br><span class="line">-<span class="ruby"> 参数列表包含三部分</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  - 参数模式，参数名，参数类型</span></span><br><span class="line"><span class="ruby">  - 如，IN stu_name VARCHAR(<span class="number">20</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 参数模式</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  - <span class="keyword">in</span>：该参数只能作为输入，也就是该参数需要调用方传入值</span></span><br><span class="line"><span class="ruby">  - out：该参数只能作为输出，也就是该参数只能作为返回值</span></span><br><span class="line"><span class="ruby">  - inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以作为返回值</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 如果存储过程体仅一句，<span class="keyword">begin</span> <span class="keyword">end</span> 可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 存储过程体中的每条sql 语句的结尾要求必须加分号</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 存储过程的结尾可以使用 DELIMITER 重新设置</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  - 语法，DELIMITER 结束标记</span></span><br><span class="line"><span class="ruby">  - 如：DELIMITER $</span></span><br><span class="line"></span><br><span class="line"><span class="ruby"><span class="comment">### 调用存储过程</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 调用语法</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- <span class="string">``</span><span class="string">`sql</span></span></span><br><span class="line"><span class="ruby">  CALL 存储过程名(实参列表)</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="创建空参列表存储过程"><a href="#创建空参列表存储过程" class="headerlink" title="创建空参列表存储过程"></a>创建空参列表存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插入到jobs表中3条记录</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> jobs(job_id,job_title,min_salary,max_salary) </span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="string">&#x27;AC_2&#x27;</span>,<span class="string">&#x27;Account2&#x27;</span>,<span class="number">1000</span>,<span class="number">4000</span>),</span><br><span class="line">   (<span class="string">&#x27;AC_3&#x27;</span>,<span class="string">&#x27;Account3&#x27;</span>,<span class="number">1000</span>,<span class="number">4000</span>),</span><br><span class="line">   (<span class="string">&#x27;AC_4&#x27;</span>,<span class="string">&#x27;Account4&#x27;</span>,<span class="number">2000</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p1</span></span><br><span class="line"><span class="keyword">CALL</span> p1();</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> jobs;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建带-in-模式的存储过程"><a href="#创建带-in-模式的存储过程" class="headerlink" title="创建带 in 模式的存储过程"></a>创建带 in 模式的存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建存储过程实现 根据employees表中job_id，查询jobs表中对应的job_title</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p2(<span class="keyword">IN</span> job_id <span class="built_in">VARCHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> J.*</span><br><span class="line">	<span class="keyword">FROM</span> jobs J</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> employees E <span class="keyword">ON</span> E.job_id = J.job_id</span><br><span class="line">	<span class="keyword">WHERE</span> J.job_id=job_id;	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p2</span></span><br><span class="line"><span class="keyword">CALL</span> p2(<span class="string">&#x27;AD_PRES&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建存储过程实现，用户是否登录成功</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p3(<span class="keyword">IN</span> username <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">IN</span> <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> login_result <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;<span class="comment">#声明并初始化</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> login_result <span class="comment">#赋值</span></span><br><span class="line">	<span class="keyword">FROM</span> <span class="keyword">admin</span></span><br><span class="line">	<span class="keyword">WHERE</span> admin.username = username</span><br><span class="line">	<span class="keyword">AND</span> admin.password = <span class="keyword">PASSWORD</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">IF</span>(login_result&gt;<span class="number">0</span>,<span class="string">&#x27;成功&#x27;</span>,<span class="string">&#x27;失败&#x27;</span>);<span class="comment">#使用</span></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p3</span></span><br><span class="line"><span class="keyword">CALL</span> p3(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>); <span class="comment">#失败</span></span><br><span class="line"><span class="keyword">CALL</span> p3(<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>); <span class="comment">#成功</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建带-out-模式的存储过程"><a href="#创建带-out-模式的存储过程" class="headerlink" title="创建带 out 模式的存储过程"></a>创建带 out 模式的存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据输入的employess表的job_id，返回jobs表中对应的job_title</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p4(<span class="keyword">IN</span> job_id <span class="built_in">VARCHAR</span>(<span class="number">10</span>),<span class="keyword">OUT</span> job_title <span class="built_in">VARCHAR</span>(<span class="number">35</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> J.job_title <span class="keyword">INTO</span> job_title</span><br><span class="line">	<span class="keyword">FROM</span> jobs J</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	employees E <span class="keyword">ON</span> E.job_id = J.job_id</span><br><span class="line">	<span class="keyword">WHERE</span> J.job_id=job_id ;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用p4</span></span><br><span class="line"><span class="keyword">CALL</span> p4(<span class="string">&#x27;AD_PRES&#x27;</span>,@job_title);</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印job_title</span></span><br><span class="line"><span class="keyword">SELECT</span> @job_title;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据输入的employess表的job_id，返回jobs表中对应的job_title和min_salary</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p5(<span class="keyword">IN</span> job_id <span class="built_in">VARCHAR</span>(<span class="number">10</span>),<span class="keyword">OUT</span> job_title <span class="built_in">VARCHAR</span>(<span class="number">35</span>),<span class="keyword">OUT</span> min_salary <span class="built_in">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> J.job_title,J.min_salary <span class="keyword">INTO</span> job_title,min_salary</span><br><span class="line">	<span class="keyword">FROM</span> jobs J</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	employees E <span class="keyword">ON</span> E.job_id = J.job_id</span><br><span class="line">	<span class="keyword">WHERE</span> J.job_id=job_id ;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p5</span></span><br><span class="line"><span class="keyword">CALL</span> p5(<span class="string">&#x27;AD_PRES&#x27;</span>,@job_title,@min_salary);</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印job_title，min_salary</span></span><br><span class="line"><span class="keyword">SELECT</span> @job_title,@min_salary;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建带-inout-模式的存储过程"><a href="#创建带-inout-模式的存储过程" class="headerlink" title="创建带 inout 模式的存储过程"></a>创建带 inout 模式的存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传入a和b两个值，最终a和b都翻倍并返回</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p6(INOUT a <span class="built_in">INT</span> ,INOUT b <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> a=a*<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">SET</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p6</span></span><br><span class="line"><span class="keyword">SET</span> @m=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">SET</span> @n=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">CALL</span> p6(@m,@n);</span><br><span class="line"></span><br><span class="line">打印返回结果</span><br><span class="line"><span class="keyword">SELECT</span> @m,@n</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul>
<li><p>一次只能删除一个存储过程，并且要求有该存储过程的 alter rontine 权限</p>
</li>
<li><p>语法</p>
</li>
<li><pre><code class="sql">drop procedure 存储过程名
<figure class="highlight cal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">p1</span>;</span></span><br><span class="line">  DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">p2</span>,<span class="title">p3</span>;</span> #一次只能删除一个存储过程</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="查询存储过程的信息"><a href="#查询存储过程的信息" class="headerlink" title="查询存储过程的信息"></a>查询存储过程的信息</h3><ul>
<li><p>语法：SHOW CREATE PROCEDURE 存储过程名</p>
</li>
<li><p>如，查看存储过程p2</p>
</li>
<li><pre><code>SHOW CREATE PROCEDURE  p2;</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学概述</title>
    <url>/2020/09/26/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="密码学主要解决的问题"><a href="#密码学主要解决的问题" class="headerlink" title="密码学主要解决的问题"></a>密码学主要解决的问题</h3><ul>
<li>信息的机密性、完整性、不可否认性和可用性</li>
<li>机密性：对传送的信息进行加密就可以实现机密性，保证信息不泄露给未经授权的人。</li>
<li>完整性：防止信息被未经授权的人篡改，保证信息不被篡改</li>
<li>不可否认性：保证信息行为人不能否认其信息行为</li>
<li>可用性：保证信息及信息系统确实为授权使用者所用</li>
</ul>
<h3 id="密码学起源与发展"><a href="#密码学起源与发展" class="headerlink" title="密码学起源与发展"></a>密码学起源与发展</h3><ol>
<li>古典密码学<ol>
<li>典型的古典密码算法包括凯撒（Caeser) 密码和维基利亚（Vigenere）密码</li>
<li>主要特点：数据的安全基于算法的保密</li>
</ol>
</li>
<li>近代密码学<ol>
<li>主要特点：数据的安全基于密钥而不是算法的保密</li>
</ol>
</li>
<li>现代密码学<ol>
<li>RSA公钥密码算法</li>
<li>椭圆曲线等其他公钥算法</li>
</ol>
</li>
</ol>
<h3 id="密码学概念"><a href="#密码学概念" class="headerlink" title="密码学概念"></a>密码学概念</h3><ul>
<li>密码学：研究信息系统安全保密的科学，包含两个分支：密码编码学和密码分析学</li>
<li>密码编码学：主要研究密码方案的设计，即寻找对信息进行编码的方法从而隐藏信息的一门学问。主要目的是寻求保证信息的保密性或认证性的方法</li>
<li>密码分析学：主要是从攻击者的角度来看问题，研究如何破解被隐藏信息的一门学问。主要目的是研究加密的破译或信息的伪造。</li>
</ul>
<h3 id="密码系统构成"><a href="#密码系统构成" class="headerlink" title="密码系统构成"></a>密码系统构成</h3><ul>
<li>明文(plaintext)：希望得到保密的原始信息</li>
<li>密文(ciphertext)：明文经过密码交换后的消息</li>
<li>加密(encryption)：由明文变换为密文的过程</li>
<li>解密(decryption)：从密文恢复出明文的过程</li>
<li>加密算法(encryption algorithm)：对明文进行加密时采用的一组规则</li>
<li>解密算法：对密文进行解密时采用的一组规则</li>
<li>密钥(key)：密码系统的关键，控制加密和解密算法操作的信息。加解密算法通常都是在一组密钥的控制下进行的，分别称为加密密钥和解密密钥。</li>
</ul>
<h3 id="密码系统数学模型"><a href="#密码系统数学模型" class="headerlink" title="密码系统数学模型"></a>密码系统数学模型</h3><ul>
<li>以五元组(M，C，K，E，D) 表示密码系统，M是明文信息空间，C是密文信息空间，K是密钥信息空间，E是加密算法，D是解密算法</li>
<li>E：M x K -&gt; C，表示E是M与K到C的一个映射</li>
<li>D：C x K -&gt; M，表示D是C与K到M的一个映射</li>
<li>发送消息的一方使用密钥K1加密明文M，通过加密算法得到密文C，即C=Ek1（M）</li>
<li>接收消息的一方使用功能密钥 K2解密密文C，通过解密算法得到明文M，即M=Dk2(C)</li>
<li>K1与K2可能相等，可能不等</li>
</ul>
<h3 id="凯撒密码体制"><a href="#凯撒密码体制" class="headerlink" title="凯撒密码体制"></a>凯撒密码体制</h3><ul>
<li><p><img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926111012355.png" alt="image-20200926111012355"></p>
</li>
<li><p>加密算法：（M+K）mod 26</p>
</li>
<li><p>解密算法：（C-K ） mod 26</p>
</li>
<li><p>密钥：K=5</p>
</li>
<li><p>例如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">明文：hello (<span class="number">7</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">14</span>)</span><br><span class="line">密文：(<span class="number">12</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="number">19</span>) -&gt; mjqqt</span><br><span class="line">解密出明文：(<span class="number">7</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">14</span>) -&gt; hello</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="保密系统"><a href="#保密系统" class="headerlink" title="保密系统"></a>保密系统</h3><p>保密系统应当满足的要求：</p>
<ul>
<li>系统及时达不到理论上不可破的，也应当是实际上不可破的。从解惑的密文或已知明文-密文对，要确定密钥或任何明文，在计算上不可行。</li>
<li>系统的保密性不依赖于对加密体制或算法的保密，而依赖于密钥。</li>
<li>加密和解密算法使用密钥空间中的所有元素</li>
<li>系统便于实现和使用</li>
</ul>
<h3 id="认证与认证系统"><a href="#认证与认证系统" class="headerlink" title="认证与认证系统"></a>认证与认证系统</h3><p><strong>认证系统：</strong></p>
<ul>
<li>防止消息被篡改，删除，重放和伪造</li>
<li>发送的消息能够被验证</li>
<li>接受者或第三者能够识别和确认消息的真伪</li>
</ul>
<p><strong>保密性</strong>：截获者在不知密钥条件下不能解读密文内容</p>
<p><strong>认证性：</strong>任何不知道密钥的人不能构造一个密文，意定的接收者解密成一个可理解的消息（合法的消息）</p>
<h3 id="密钥体制分类"><a href="#密钥体制分类" class="headerlink" title="密钥体制分类"></a>密钥体制分类</h3><ol>
<li><strong>按密钥特点划分</strong><ol>
<li>对称密码体制<ol>
<li>单钥密码体制，私钥密码体制，传统密码体制</li>
<li>加密密钥和解密密钥相同或彼此之间容易互相确定</li>
<li>不仅可用于数据加密，还可用于消息认证</li>
<li>根据加密方式可以将对称密码体制分为：流密码、分组密码</li>
</ol>
</li>
<li>非对称密码体制<ol>
<li>双钥密码体制，公钥密码体制</li>
<li>加密密钥和解密密钥不同，并且从一个难以推出另一个</li>
<li>加密密钥对外公开，所有人都可知，公钥</li>
<li>解密密钥，私钥，只有特定用户方才有</li>
</ol>
</li>
</ol>
</li>
<li><strong>按保密程度来分</strong><ol>
<li>实际上保密的密码体制<ol>
<li>理论上可破解，计算上不可行</li>
<li>当前广泛使用的各类密码方案，除一次一密外，其余都是实际上保密的密码体制</li>
</ol>
</li>
<li>绝对保密的密码体制<ol>
<li>理论上和实际上都不可破解</li>
<li>一次一密密码体制是绝对保密的</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="流密码和分组密码（对称密码体制）"><a href="#流密码和分组密码（对称密码体制）" class="headerlink" title="流密码和分组密码（对称密码体制）"></a>流密码和分组密码（对称密码体制）</h3><p><strong>流密码</strong></p>
<ul>
<li>将明文一次加密一个比特或多个比特形成密码字符串</li>
<li>典型的流密码有一次一密，其密钥长度与明文长度相等</li>
</ul>
<p><strong>分组密码</strong></p>
<ul>
<li>将明文分组，每组具有固定长度，然后将一个分组作为整体通过加密算法产生对应密文</li>
<li>各组之间是否有关联关系根据具体的加密模式决定</li>
<li>典型的分组密码：DES，AES等。</li>
</ul>
<h3 id="流密码和分组密码主要区别："><a href="#流密码和分组密码主要区别：" class="headerlink" title="流密码和分组密码主要区别："></a>流密码和分组密码主要区别：</h3><ul>
<li>流密码的加密变换是时变的</li>
<li>分组密码的加密变换是固定不变的。</li>
</ul>
<p><strong>公钥密码系统模型</strong></p>
<p><strong>加密模型</strong></p>
<img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926114849663.png" alt="image-20200926114849663" style="zoom: 67%;" />



<p><strong>认证模型</strong></p>
<img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926114859071.png" alt="image-20200926114859071" style="zoom:67%;" />

<p><strong>主要特点</strong></p>
<ul>
<li>加密和解密能力公开</li>
<li>可以实现多个用户加密的消息只能由一个用户解读——–用于公共网络中实现保密通信</li>
<li>只能由一个用户加密消息而使多个用户可以解读——用于认证系统中对消息进行数字签名</li>
<li>无需事先分配密钥</li>
</ul>
<h3 id="对称密码体制与非对称密码体制优缺点"><a href="#对称密码体制与非对称密码体制优缺点" class="headerlink" title="对称密码体制与非对称密码体制优缺点"></a>对称密码体制与非对称密码体制优缺点</h3><p><strong>对称密码体制</strong></p>
<ul>
<li>优点：加密速度快、效率高、广泛用于大信息量的加密</li>
<li>缺点：密钥传输与交换面临威胁，密钥容易被截获；若和大量用户通信，难以安全管理大量密钥，大范围应用存在问题</li>
</ul>
<p><strong>非对称密码体制</strong></p>
<ul>
<li>优点：很好解决对称加密中由于密钥数量过多难以管理和费用高等问题，不用担心传输中私钥泄漏，保密性能高</li>
<li>缺点：加密算法复杂，加密速度慢</li>
</ul>
<h3 id="密码系统攻击"><a href="#密码系统攻击" class="headerlink" title="密码系统攻击"></a>密码系统攻击</h3><p><strong>被动攻击</strong></p>
<ul>
<li>通过窃取密文试图了解明文或者密钥的内容</li>
</ul>
<p><strong>主动攻击</strong></p>
<ul>
<li>篡改和伪造密文，以达到修改或者伪造明文的目的</li>
</ul>
<p><strong>攻击类型</strong></p>
<ol>
<li>唯密文攻击<ol>
<li>有一个或多个用同一密钥加密的密文</li>
<li>通过对这些截获的密文进行分析得出明文或密钥</li>
</ol>
</li>
<li>已知明文攻击<ol>
<li>待解密文+一些明文+用同一密钥加密这些明文的对应密文</li>
</ol>
</li>
<li>选择明文攻击<ol>
<li>可得到所需要的任何明文对应密文，这些密文与待解密文是用同意密钥</li>
</ol>
</li>
<li>选择密文攻击<ol>
<li>可得到所需任何密文的对应明文，解密这些密文所使用的密钥与解密待解密文的密钥一样。</li>
</ol>
</li>
<li>强度按序递增，唯密文工作最弱，选择密文攻击最强</li>
</ol>
<h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a><strong>古典密码</strong></h3><ul>
<li>属于对称密码体制，加密和解密使用同一密钥</li>
<li>基于对明文信息的“置换”或“替代”完成</li>
<li>栅栏密码（置换密码体制）</li>
</ul>
<blockquote>
<p><strong>加密：</strong></p>
<ol>
<li>将明文的元素按照两行的方式书写，从上到下，从左到右</li>
<li>按从上到写的顺序依次读取每一行元素所得到的的组合就是密文</li>
</ol>
<p><strong>解密：</strong></p>
<ol>
<li>将接受的密文按从左到右顺序写为两行，如果密文个数为偶数n，每一行写n/2个元素，如果密文个数为奇数，第一行排 (n+1) /2 个元素，第二行排 (n-1)/2 个元素；</li>
<li>按加密算法规则，从上到下，从左到右读取各元素，得到明文</li>
</ol>
<p><strong>例如：</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">明文：economic business</span><br><span class="line">加密：e o o <span class="selector-tag">i</span> <span class="selector-tag">b</span> s n s</span><br><span class="line">	 c n m c u <span class="selector-tag">i</span> e s</span><br><span class="line">密文: eonibsnscnmcuies</span><br><span class="line">解密：e o o <span class="selector-tag">i</span> <span class="selector-tag">b</span> s n s</span><br><span class="line">	 c n m c u <span class="selector-tag">i</span> e s</span><br><span class="line">解密出明文：economicbusiness</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>置换法破译：通过字母的使用频率破译</li>
<li>替代法<ul>
<li>凯撒加密：把每个英文字母向后推移K位，即将明文中的每个元素用各自后面对应的第K个字符代替</li>
<li>替代方式<ul>
<li>单字母替换，如凯撒密码</li>
<li>多字母替换，也称密码本式替换，将一个或一组字符分别用多个字符一起替换，如将 efe 替换为 awt</li>
<li>插入式替换，将明文信息插入到其他信息中，如把明文中各元素插入到一段文章中</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>常见函数(单行函数)</title>
    <url>/2020/09/18/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0(%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0)/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>常见函数：类似于方法，将一组逻辑语句封装在方法体中，对外暴露方法名</p>
</li>
<li><p>调用：select   函数名(实参列表)  [ from  表 ]</p>
</li>
<li><p>分类：</p>
<p>​    单行函数：concat，length，if null 等</p>
<p>​    分组函数：做统计使用，又称为统计函数、聚合函数、组函数</p>
</li>
</ul>
<h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><ol>
<li><p><strong>字符函数</strong></p>
<ol>
<li><p>length 获取参数值的字节个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27;张三john&#x27;</span>);</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span> <span class="comment">#查看字符集</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>concat 拼接字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(last_name,<span class="string">&#x27;_&#x27;</span>,first_name) 姓名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>upper，lower</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">&#x27;JOHN&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>substt，substring</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#截取从指定索引处后面所有字符 注意：索引从1开始</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="number">2</span>)  out_put;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#截取从指定索引处指定字符长度的字符 左右闭合</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>) out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>instr  返回子串第一次出现的索引，如果找不到返回0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="string">&#x27;T&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="string">&#x27;X&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>trim</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;    张三    &#x27;</span>) <span class="keyword">AS</span> out_put; <span class="comment"># 去掉左右两边空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaaaaaaa张aa三aaaaaaa&#x27;</span>)  <span class="keyword">AS</span> out_put; <span class="comment"># 去掉左右两边的a字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>lpad，用指定的字符实现左填充指定长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="string">&#x27;hello，张三&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;*&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>rpad，用指定的字符实现右填充指定长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;hello，张三&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>replace，替换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">&#x27;hello，张三&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>数学函数</strong></p>
<ol>
<li><p>round，四舍五入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">-1.55</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">1.567</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>ceil，向上取整，返回 &gt;= 该参数的最小整数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">-1.02</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>floor，向下取整，返回 &lt;= 该参数的最大整数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">-9.99</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>truncate，截断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.69999</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>mod 取余</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mod(a,b) = a-a/b *b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">10</span>,<span class="number">-3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span>%<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>日期函数</strong></p>
<ol>
<li><p>now，返回当前系统日期+时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>curdate，返回当前系统日期，不包含时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>curtime，返回当前系统时间，不包含日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定的部分，年，月，日，小时，分钟，秒</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>()) 年;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="string">&#x27;1998-1-1&#x27;</span>) 年;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>()) 月;</span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="keyword">NOW</span>()) 月;</span><br></pre></td></tr></table></figure>
</li>
<li><p>str_to_date，将字符通过指定的格式转换成日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;1998-3-2&#x27;</span>,<span class="string">&#x27;%Y-%c-%d&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询入职日期为1992--4-3的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hiredate = <span class="string">&#x27;1992-4-3&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hiredate = <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;4-3 1992&#x27;</span>,<span class="string">&#x27;%c-%d %Y&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>date_format，将日期转换成字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">&#x27;%y年%m月%d日&#x27;</span>) <span class="keyword">AS</span> out_put</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有奖金的员工名和入职日期(xx月/xx日 xx年)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,<span class="keyword">DATE_FORMAT</span>(hiredate,<span class="string">&#x27;%m月/%d日 %y年&#x27;</span>) 入职日期</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>流程控制函数</strong></p>
<ol>
<li><p>if 函数，处理双分支</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">10</span>&lt;<span class="number">5</span>,<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;小&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct,<span class="keyword">IF</span>(commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>,<span class="string">&#x27;没奖金&#x27;</span>,<span class="string">&#x27;有奖金&#x27;</span>) 备注</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>case 语句，处理多分支</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1或语句1;</span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例1：查询员工的工资，要求（处理等值判断）</span></span><br><span class="line">部门号=30，显示的工资为1.1倍</span><br><span class="line">部门号=40，显示的工资为1.2倍</span><br><span class="line">部门号=50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示的工资为原工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary 原始工资,department_id,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary*<span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> salary*<span class="number">1.2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary*<span class="number">1.3</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 新工资</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例2：查询员工的工资的情况（处理条件判断）</span></span><br><span class="line">如果工资&gt;20000,显示A级别</span><br><span class="line">如果工资&gt;15000,显示B级别</span><br><span class="line">如果工资&gt;10000，显示C级别</span><br><span class="line">否则，显示D级别</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>其他函数</strong> </p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();  <span class="comment">#版本</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>(); <span class="comment">#当前库</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();     <span class="comment">#当前连接用户</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>常见函数(分组函数)</title>
    <url>/2020/09/18/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0(%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0)/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>分组函数：用作统计使用，又称为聚合函数、统计函数、组函数。分组函数作用于一组数据，并对一组数据返回一个值</li>
<li>分类：sum 求和，avg 求平均，max 求最大值，min 求最小值，count 求个数</li>
<li>使用：<ul>
<li>sum，avg 一般用于处理数值型，max，min，count 可以处理任何类型</li>
<li>除了 count(*)，其他分组函数都忽略 null 值，即 null 值不参与运算</li>
<li>可以和 distinct 搭配实现去重的运算</li>
<li>和分组函数一同查询的字段要求是 group by 后的字段</li>
</ul>
</li>
</ul>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) 和,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(salary),<span class="number">2</span>) 平均,<span class="keyword">MAX</span>(salary) 最高,<span class="keyword">MIN</span>(salary) 最低,<span class="keyword">COUNT</span>(salary) 个数</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="和-distinct-搭配"><a href="#和-distinct-搭配" class="headerlink" title="和 distinct 搭配"></a>和 distinct 搭配</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="keyword">DISTINCT</span> salary),<span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> salary),<span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="count-函数"><a href="#count-函数" class="headerlink" title="count 函数"></a>count 函数</h3><ul>
<li>count(*) 返回表中记录总数，适用于任意数据类型</li>
<li>count(expr)  返回 expr 不为空的记录总数</li>
<li>count() 的参数可以支持：字段，*，常量值（一般放1）</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(commission_pct) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="和分组函数一同查询的字段有限制"><a href="#和分组函数一同查询的字段有限制" class="headerlink" title="和分组函数一同查询的字段有限制"></a>和分组函数一同查询的字段有限制</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无法执行，Avg(salary) 只输出一行，而 empolyee_id 输出多行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),employee_id  <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>排序查询</title>
    <url>/2020/09/17/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="排序查询语法"><a href="#排序查询语法" class="headerlink" title="排序查询语法"></a>排序查询语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">【<span class="keyword">where</span>  筛选条件】</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<ul>
<li>asc表示升序，可以省略，desc 表示降序</li>
<li>order by 子句可以支持 单个字段，多个字段，别名，表达式，函数等。</li>
<li>order by 子句在查询语句的最后面（limit 子句除外)</li>
</ul>
</blockquote>
<p>按单个字段排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>添加筛选条件再排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询部门编号&gt;=90的员工信息，并按员工编号降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id&gt;=<span class="number">90</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> employee_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按表达式排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工信息 按年薪降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *,salary*<span class="number">12</span>*(<span class="number">1</span>+<span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary*<span class="number">12</span>*(<span class="number">1</span>+<span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按别名排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工信息 按年薪升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *,salary*<span class="number">12</span>*(<span class="number">1</span>+<span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按函数排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名，并且按名字的长度降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(last_name) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按多个字段排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工信息，要求先按工资降序，再按employee_id升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,employee_id <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数论</title>
    <url>/2020/09/26/%E6%95%B0%E8%AE%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="素数与非素数"><a href="#素数与非素数" class="headerlink" title="素数与非素数"></a>素数与非素数</h3><p><strong>因子</strong></p>
<ul>
<li>设a，b(b≠0)，是两个整数，如果存在另一个整数 m，使得 a=mb，则称b整除a，记为 b|a ，且称 b 是 a 的因子。</li>
<li>如：6=2x3，3|6（3整除6），3是6的因子</li>
</ul>
<p><strong>整数有以下性质：</strong></p>
<ul>
<li>a|1，那么 a=±1  （1的因子是正负1）</li>
<li>a|b 且 b|a，则 a=±b</li>
<li>对任一b（b≠0），b|0  （0的因子是所有非0整数）</li>
<li>b|g，b|h，则对任一整数m，n 有 b|(mg+nh)</li>
</ul>
<p><strong>素数</strong></p>
<ul>
<li>整数p，p&gt;1，p的因子只有±1，±p，p是素数</li>
</ul>
<p><strong>整数分解的唯一性：</strong></p>
<ul>
<li>任一整数a，a&gt;1，都能唯一分解为：<img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926131033205.png" alt="image-20200926131033205" style="zoom: 50%;" /></li>
<li>其中p1&gt;p2&gt;p3……，pt 是素数，</li>
<li>如：91=13x7，11011=13x 11^2 x7</li>
</ul>
<p><strong>互素数</strong></p>
<ul>
<li>c=gcd(a,b)，c&gt;0</li>
<li>c是a,b的最大公因子，a和b的任一公因子，也是c的因子</li>
<li>若 gcd(a,b) =1，则称 a和 b互素（a和b的最大公因子是1）</li>
</ul>
<h3 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h3><p><strong>模n同余</strong></p>
<ul>
<li>(a mod n) = (b mod n) ，则称两整数 a，b模n同余，记作 a≡b mod n</li>
<li>如 1≡11 mod 5，(1 mod 5) = (11 mod 5)，1和11模5同余</li>
<li>同余有以下性质<ul>
<li>若 n|(a-b)，则  a≡b mod n</li>
<li>(a mod n) = (b mod n) ，则 a≡b mod n</li>
<li>a≡b mod n，则 b≡a mod n</li>
<li>a≡b mod n，b≡c mod n，则 a≡c mod n</li>
</ul>
</li>
<li>模运算有以下性质<ul>
<li>[ (a mod n) + (b mod n) ] mod n = (a+b) mod n</li>
<li>[ (a mod n) - (b mod n) ] mod n =  (a-b) mod n</li>
<li>[ (a mod n) x (b mod n) ] mod n = (axb) mod n</li>
</ul>
</li>
<li>乘法逆元<ul>
<li>设a∈Zn，Zn={0,1,2,3,4，……，n-1}，gcd(a，n) =1，则 a在Zn中有乘法逆元</li>
<li>如：模8的乘法运算，1,3,5,7 有逆元</li>
</ul>
</li>
</ul>
<h3 id="费尔马定理"><a href="#费尔马定理" class="headerlink" title="费尔马定理"></a>费尔马定理</h3><ul>
<li>Fermat定理：若p是素数，a是正整数，且 gcd(a,p) = 1，则 a^(p-1) ≡ a mod p</li>
<li>如：7是素数，在Z7中，3是正整数，且 gcd(3,7) = 1，则 3^(7-1) mod 7 = 1</li>
</ul>
<h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><ul>
<li>欧拉函数：设n是一正整数，小于n且与n互素的正整数的个数称为 欧拉函数，记作 ψ(n)<ul>
<li>如： ψ(3)=2， ψ(7)=6,  ψ(8)=4</li>
<li>若 n是素数，显然有  ψ(n) = n-1</li>
<li>定理：若n 是两个素数 p和q 的乘积，则  ψ(n)= ψ(p) x  ψ(q) =(p-1) x (q-1)</li>
<li>如： ψ(21) =  ψ(3) x  ψ(7) = 2x6 = 12</li>
</ul>
</li>
<li>Euler定理：若 a 和 n互素，则 a ^  ψ(n) ≡ 1 mod n<ul>
<li>例如，3^ ψ(8) mod 8 =1</li>
</ul>
</li>
</ul>
<h3 id="素性检验"><a href="#素性检验" class="headerlink" title="素性检验"></a>素性检验</h3><ul>
<li>对给定的数检验其是否为素数</li>
<li>概率检验法</li>
<li>-2≡1 mod 3</li>
<li>2≡ -1 mod 3</li>
</ul>
<h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><p><strong>求最大公因子</strong></p>
<ul>
<li>对任意非负整数a 和正整数 b，有 gcd(a，b) = gcd(b，a mod b)</li>
<li>例如：gcd(18，12) = gcd(12,6) = gcd(6,0) = 6</li>
</ul>
<p><strong>求乘法逆元</strong></p>
<p><img src="C:\Users\高萍\Desktop\MyHexoBlogs\myblogs\source_posts\密码学\01.png" alt="https://wx2.sinaimg.cn/mw690/007gSPK8gy1gj41iuxudoj304i00u741.jpg"></p>
<ul>
<li>x是 a 关于 m的乘法逆元</li>
<li>仅当 gcd(a，m) =1 时，</li>
</ul>
<p><strong>扩展欧几里得定理</strong></p>
<h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><h3 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h3><p><strong>求模下的整数幂</strong></p>
<ul>
<li>a^m ≡ 1 mod n</li>
<li>如果 a与n互素，则至少有一整数m满足这一方程，称满足方程的最小正整数 m 为模n下 a的阶</li>
<li>如：a=7，n=19，7^1 ≡ 7 mod 19，7^2 ≡ 11 mod 19，7^3 ≡ 1 mod 19，即7在模19下的阶为3</li>
</ul>
<h3 id="平方剩余"><a href="#平方剩余" class="headerlink" title="平方剩余"></a>平方剩余</h3>]]></content>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>图形化界面客户端、Mysql语法规范</title>
    <url>/2020/09/16/%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%81Mysql%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="图形化界面："><a href="#图形化界面：" class="headerlink" title="图形化界面："></a>图形化界面：</h3><p>Sql yog </p>
<img src="https://wx1.sinaimg.cn/mw690/007gSPK8gy1giuo8yctidj30jb0fejw1.jpg" alt="01.png" style="zoom:50%;" />

<p>Navicat</p>
<img src="https://wx3.sinaimg.cn/mw690/007gSPK8gy1giuougxbyej30j30gm3yr.jpg" alt="02.png" style="zoom:50%;" />

<h3 id="MySql-语法规范"><a href="#MySql-语法规范" class="headerlink" title="MySql 语法规范"></a>MySql 语法规范</h3><ol>
<li>不区分大小写,但建议关键字大写，表名、列名小写 </li>
<li>每条命令最好用分号结尾 </li>
<li>各子句一般要分行写</li>
<li>每条命令根据需要，可以进行缩进 或换行 </li>
<li>注释 单行注释：<ol>
<li>#注释文字 </li>
<li>单行注释：– 注释文字 </li>
<li>多行注释：/* 注释文字 */</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>子查询</title>
    <url>/2020/09/19/%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>主查询：外部的查询语句，称为主查询或外查询</li>
<li>子查询：一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<ul>
<li>子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li>
<li>子查询放在小括号内</li>
<li>子查询可以放在from后面，select后面，where后面，having后面，但一般放在条件的右侧</li>
</ul>
</li>
</ul>
<h3 id="子查询分类："><a href="#子查询分类：" class="headerlink" title="子查询分类："></a>子查询分类：</h3><ul>
<li>按结果集的行列数不同：<ul>
<li>标量子查询：结果集只有一行一列，一般搭配单行操作符使用(&gt;  &lt;   &gt;=   &lt;=   =   &lt;&gt;)</li>
<li>列子查询：结果集只有一列多行，一般搭配多行操作符使用(in，any/some，all)</li>
<li>行子查询：结果集只有一行多列</li>
<li>表子查询：结果集一般为多行多列</li>
</ul>
</li>
<li>按子查询出现的位置分：<ul>
<li>select 后：仅仅支持标量子查询</li>
<li>from 后：支持表子查询</li>
<li>where或having 后：标量子查询+列子查询+行子查询</li>
<li>exitsts后（相关子查询）：表子查询</li>
</ul>
</li>
</ul>
<h3 id="where或having后的子查询"><a href="#where或having后的子查询" class="headerlink" title="where或having后的子查询"></a>where或having后的子查询</h3><ol>
<li><p>标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询谁的工资比 Abel 高?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询Abel的工资</span></span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name = <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询员工的信息，满足 salary&gt;①结果</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&gt;(</span><br><span class="line">      <span class="keyword">SELECT</span> salary</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> last_name = <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步：查询141号员工的job_id</span></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">141</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步：查询143号员工的salary</span></span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">143</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#③第三步：查询员工的姓名，job_id 和工资，要求job_id=①并且salary&gt;②</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id = (</span><br><span class="line">	<span class="keyword">SELECT</span> job_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> employee_id = <span class="number">141</span></span><br><span class="line">) <span class="keyword">AND</span> salary&gt;(</span><br><span class="line">	<span class="keyword">SELECT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> employee_id = <span class="number">143</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询最低工资大于50号部门最低工资的部门id和其最低工资</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步：查询50号部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步：查询每个部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#③第三步： 在②基础上筛选，满足min(salary)&gt;①</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;(</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="keyword">MIN</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> department_id = <span class="number">50</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>非法使用标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Subquery returns more than 1 row,子查询不只一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;(</span><br><span class="line">	<span class="keyword">SELECT</span>  salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> department_id =<span class="number">110</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">多行子查询使用单行比较符</span><br></pre></td></tr></table></figure>
</li>
<li><p>列子查询(多行子查询)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回location_id是1400或1700的部门中的所有员工姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询location_id是1400或1700的部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span>  department_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询员工姓名，要求部门号是①列表中的某一个</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工姓名,department_id 部门编号</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id  <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> departments</span><br><span class="line">	<span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询job_id为‘IT_PROG’部门任一工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id = <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询其他工种的员工号、姓名、job_id 以及salary，要求salary&lt;(①)的任意一个</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&lt;<span class="keyword">ANY</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id = <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> job_id&lt;&gt;<span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&lt;(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id = <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> job_id&lt;&gt;<span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>行子查询(结果集一行多列或多行多列)</p>
</li>
</ol>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工编号最小并且工资最高的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询最小的员工编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"><span class="comment">#③第三步，查询员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id=(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(employee_id)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">)<span class="keyword">AND</span> salary=(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (employee_id,salary)=(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(employee_id),<span class="keyword">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="select后的子查询（仅支持标量子查询"><a href="#select后的子查询（仅支持标量子查询" class="headerlink" title="select后的子查询（仅支持标量子查询 )"></a>select后的子查询（仅支持标量子查询 )</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的员工个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> D.department_id,(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line">	<span class="keyword">FROM</span> employees E</span><br><span class="line">	<span class="keyword">WHERE</span> E.department_id = D.<span class="string">`department_id`</span></span><br><span class="line"> ) 员工个数</span><br><span class="line"> <span class="keyword">FROM</span> departments D;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="from后的子查询（支持表子查询）"><a href="#from后的子查询（支持表子查询）" class="headerlink" title="from后的子查询（支持表子查询）"></a>from后的子查询（支持表子查询）</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的平均工资的工资等级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary)平均工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_sal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  ag_dep.*, G.<span class="string">`grade_level`</span>工资等级</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) 平均工资,department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) ag_dep</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades G</span><br><span class="line"><span class="keyword">ON</span> ag_dep.平均工资 <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="exists后面的子查询（相关子查询）"><a href="#exists后面的子查询（相关子查询）" class="headerlink" title="exists后面的子查询（相关子查询）"></a>exists后面的子查询（相关子查询）</h3><ol>
<li><p>语法：</p>
<p>EXISTS（完整的查询语句）</p>
</li>
<li><p>结果：</p>
<p>1或0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询是否存在工资等于24000的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary=<span class="number">24000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有员工的部门名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式1，in</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name 部门名</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">WHERE</span> D.<span class="string">`department_id`</span> <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2，exists</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name 部门名</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> *</span><br><span class="line">	<span class="keyword">FROM</span> employees E</span><br><span class="line">	<span class="keyword">WHERE</span> D.<span class="string">`department_id`</span>=E.<span class="string">`department_id`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>标识列</title>
    <url>/2020/09/20/%E6%A0%87%E8%AF%86%E5%88%97/</url>
    <content><![CDATA[<h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><ul>
<li>又称为自增长列，可以不用手动插入值，系统提供默认的序列值</li>
<li>标识列不一定和主键搭配，但要求是一个 key</li>
<li>一个表至多一个标识列</li>
<li>标识列的类型只能是数值型</li>
<li>标识列可以通过 set auto increment_increment = 3 设置步长</li>
<li>标识列可以通过手动插入值，设置起始值</li>
</ul>
<h3 id="创建表时设置标识列"><a href="#创建表时设置标识列" class="headerlink" title="创建表时设置标识列"></a>创建表时设置标识列</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置id列为自增长列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_identity(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">	stu_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_identity(<span class="keyword">id</span>,stu_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_identity(stu_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;lucy&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_identity;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看自增长列起始值和步长</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%auto_increment%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  设置自增长列步长</span></span><br><span class="line"><span class="keyword">SET</span> auto_increment_increment=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制结构</title>
    <url>/2020/09/20/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><ul>
<li>顺序结构，分支结构，循环结构</li>
</ul>
<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul>
<li><p>if函数</p>
<ul>
<li>语法：if(条件，值1，值2)</li>
<li>功能：实现双分支</li>
<li>应用在 begin end中或外面</li>
</ul>
</li>
<li><p>case结构</p>
<ul>
<li><p>作为表达式</p>
<ul>
<li><p>情况1：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 值<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 值<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 值n;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>情况2：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 值<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 值<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 值n;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>作为独立的语句（只能在 begin end 中)</p>
<ul>
<li><p>情况1：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 语句<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 语句n;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>情况2：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 语句<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 语句n;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fn(score <span class="built_in">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> ch <span class="built_in">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	CASE </span><br><span class="line">	WHEN score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">	WHEN score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">	WHEN score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">	ELSE <span class="keyword">SET</span> ch=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">	RETURN ch;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> fn(<span class="number">56</span>)	</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>if 结构</p>
</li>
<li><p>类似于多重IF</p>
</li>
<li><p>只能应用在 begin end 中</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">IF 条件<span class="number">1</span> THEN 语句<span class="number">1</span>；</span><br><span class="line">ELSEIF 条件<span class="number">2</span> THEN 语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">ELSE 语句n;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> foo(score <span class="built_in">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ch <span class="built_in">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	IF score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">	ELSEIF score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">	ELSEIF score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">	ELSE <span class="keyword">SET</span> ch=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">	RETURN ch;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> foo(<span class="number">87</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code class="sql">
# 创建存储过程，如果工资&lt;2000,则删除，如果5000&gt;工资&gt;2000,则涨工资1000，否则涨工资500

DELIMITER $;
CREATE PROCEDURE pro(IN sal DOUBLE)
BEGIN
    IF sal&lt;2000 THEN DELETE FROM employees WHERE employees.salary=sal;
    ELSEIF sal&gt;=2000 AND sal&lt;5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;
    ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;
    END IF;
END 

CALL pro(2100)
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">### 循环结构</span></span><br><span class="line"></span><br><span class="line">- 分类：<span class="keyword">while</span>，<span class="keyword">loop</span>，<span class="keyword">repeat</span></span><br><span class="line">- 循环控制：</span><br><span class="line">  - iterate 类似于 <span class="keyword">continue</span>，结束本次循环，继续下一次</span><br><span class="line">  - leave 类似于 <span class="keyword">break</span>，跳出当前所在的循环</span><br><span class="line"></span><br><span class="line"><span class="meta">### While循环</span></span><br><span class="line"></span><br><span class="line">- 先判断后执行</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  【标签:】 <span class="keyword">while</span> 循环条件 </span><br><span class="line">   <span class="keyword">DO</span></span><br><span class="line">  	循环体；</span><br><span class="line">   <span class="keyword">END</span> <span class="keyword">while</span> 【标签】</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入，根据次数插入到admin表中多条记录</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	WHILE i&lt;=insertCount DO</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username,<span class="string">`password`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;Rose&#x27;</span>,i),<span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">		<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">WHILE</span>;	</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20则停止</span></span><br><span class="line"><span class="comment"># leave 语句</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while2(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	a:WHILE i&lt;=insertCount DO</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username,<span class="string">`password`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;xiaohua&#x27;</span>,i),<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line">		IF i&gt;=20 THEN LEAVE a;</span><br><span class="line">		<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">		<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">WHILE</span> a;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while2(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入，根据次数插入到admin表中多条记录，只插入偶数次</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while3(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	a:WHILE i&lt;=insertCount DO</span><br><span class="line">		<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">		IF MOD(i,2)!=0 THEN ITERATE a;</span><br><span class="line">		<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username,<span class="string">`password`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;xiaohua&#x27;</span>,i),<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">WHILE</span> a;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while3(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="Loop循环"><a href="#Loop循环" class="headerlink" title="Loop循环"></a>Loop循环</h3><blockquote>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">【标签】<span class="keyword">loop</span></span><br><span class="line">	循环体</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">LOOP</span> 【标签】;</span><br></pre></td></tr></table></figure>

<p>可以用来模拟简单的死循环</p>
</blockquote>
<h3 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h3><ul>
<li>先执行后判断</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签：】repeat</span><br><span class="line">	循环体</span><br><span class="line"> UNTILL 结束循环的条件</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">REPEAT</span> 【标签】；</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制语句</title>
    <url>/2020/09/26/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> (x % <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;输入的是偶数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;输入的是奇数&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>可以有0个或多个 elif 部分，以及一个可选的 else 部分，关键字 ‘elif’ 是 ‘else if ‘ 的缩写。</li>
<li>一个if…elif..elif…序列可以看做其他语言中的 swtich 或 case语句</li>
</ul>
<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p>python中的for语句并不总是对算术递增的数值进行迭代，或是给予用户定义迭代步骤和暂停条件的能力，而是对任意序列进行迭代，条目的迭代顺序与它们在序列中出现的顺序一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><p>遍历一个数字序列时，可以使用内置函数 range() ，它会生成算术级数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span></span><br><span class="line"> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>range也可以以另一个数字开头，或者以指定的幅度增加，甚至是负数，叫做“步进”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item1 <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(item1)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"><span class="keyword">for</span> item2 <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    print(item2)  <span class="comment"># 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> item3 <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>):</span><br><span class="line">    print(item3)  <span class="comment"># 0 3 6 9</span></span><br><span class="line"><span class="keyword">for</span> item4 <span class="keyword">in</span> range(<span class="number">-1</span>, <span class="number">-10</span>, <span class="number">-3</span>):</span><br><span class="line">    print(item4)  <span class="comment"># -1 -4 -7</span></span><br></pre></td></tr></table></figure>

<p>range() 所返回的对象实际上并不是一个列表，此对象会在你迭代时基于所希望的序列返回连续的项，但它不真正生成列表，可以节省空间</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul>
<li>跳出最近的for或while循环</li>
</ul>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul>
<li>继续循环下一次迭代</li>
</ul>
<h3 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h3><ul>
<li>pass语句什么也不做，当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它</li>
</ul>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(<span class="string">&quot;2+3=&quot;</span>, sum(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>def 关键字引入一个函数定义，它必须后跟函数名称和带括号的形式参数列表</p>
<h3 id="函数定义的更多形式"><a href="#函数定义的更多形式" class="headerlink" title="函数定义的更多形式"></a>函数定义的更多形式</h3><p>参数默认值</p>
<blockquote>
<p>对一个或多个参数指定一个默认值</p>
</blockquote>
<blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def cut(<span class="attribute">a</span>=3, <span class="attribute">b</span>=4):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;3-4=&quot;</span>, cut())</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;1-4=&quot;</span>, cut(1))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;1-1=&quot;</span>, cut(1, 1))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>关键字参数</p>
<blockquote>
<p>可以使用形如 key=value 的关键字参数 来调用函数</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span>(<span class="params">a=<span class="number">3</span>, b=<span class="number">4</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;3/4=&quot;</span>, div())</span><br><span class="line">print(<span class="string">&quot;1/4=&quot;</span>, div(a=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">&quot;1/1=&quot;</span>, div(a=<span class="number">1</span>, b=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>特殊参数</p>
<ol>
<li>位置或关键字参数</li>
</ol>
<blockquote>
<p>如果函数定义中未使用 / 和 *，则参数可以按位置或关键字传递给函数</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对调用方式没有限制，参数可以按位置也可以按关键字传入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">arg</span>):</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1(<span class="number">10</span>)</span><br><span class="line">fun1(arg=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="2">
<li>仅限位置参数</li>
</ol>
<blockquote>
<p>仅限位置形参要放在 / 之前，在 / 之后的形参没有限制</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在函数定义中带有 /，限制仅使用位置形参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">arg, /</span>):</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun2(<span class="number">10</span>)</span><br><span class="line">fun2(arg=<span class="number">10</span>) </span><br><span class="line"><span class="comment"># TypeError: fun2() got some positional-only arguments passed as keyword arguments: &#x27;arg&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li>仅限关键字参数</li>
</ol>
<blockquote>
<p>要将形参标记为仅限关键字，即指明该形参必须以关键字的形式传入，应在参数列表的第一个 仅限关键字形参之前放置一个 *</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在函数定义中通过 * 指明仅允许关键字传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>(<span class="params">*, arg</span>):</span></span><br><span class="line">    print(arg)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">fun3(arg=<span class="number">10</span>)</span><br><span class="line">fun3(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># TypeError: fun3() takes 0 positional arguments but 1 was given</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="4">
<li>*name和**name关键字</li>
</ol>
<blockquote>
<p>当存在一个形式为name的最后一个形参时，它会接收一个字典，其中包含除了与已有形参相对应的关键字参数以外的所有关键字参数。</p>
<p>**name，接收一个包含除了已有形参列表外的位置参数的元素的形参</p>
<p>*name必须出现在**name之前</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">arg1, *arg2, **arg3</span>):</span></span><br><span class="line">    print(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg2:</span><br><span class="line">        print(<span class="string">&quot;arg2:&quot;</span>, item)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg3:</span><br><span class="line">        print(<span class="string">&quot;arg3:&quot;</span>, arg3[item])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, key1=<span class="number">100</span>, key2=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">打印结果：</span><br><span class="line">arg1: <span class="number">1</span></span><br><span class="line">arg2: aaa</span><br><span class="line">arg2: bbb</span><br><span class="line">arg3: <span class="number">100</span></span><br><span class="line">arg3: hello</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="5">
<li>在同一函数定义中使用三种调用方式</li>
</ol>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span>(<span class="params">pos_only, /, standard, *, kwd_only</span>):</span></span><br><span class="line">    print(pos_only, standard, kwd_only)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun4(<span class="number">10</span>, <span class="string">&#x27;abc&#x27;</span>, kwd_only=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="6">
<li>任意的参数列表</li>
</ol>
<blockquote>
<p>可以使用任意数量的参数调用函数，这些参数会被包含在一个元祖里</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat</span>(<span class="params">*args, sep=<span class="string">&quot;/&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> sep.join(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>))  <span class="comment"># earth/mars/venus</span></span><br><span class="line">print(concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>, sep=<span class="string">&quot;.&quot;</span>))  <span class="comment"># earth.mars.venus</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>解包参数列表</p>
<p>Lambda表达式</p>
<blockquote>
<p>可以用 lambda 关键字来创建一个小的匿名函数，这个函数返回两个参数的和：lambda a,b：a+b。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = foo(<span class="number">10</span>)</span><br><span class="line">print(f(<span class="number">1</span>))  <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>文档字符串</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    文档字符串第一行，对象目的的简要描述，以大写字母开头，句点结尾.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    文档字符串有更多行，第二行空白，后面几行是一个或多个段落，描述对象的调用约定，副作用等.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(fn.__doc__)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>函数标注</p>
<h3 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h3><ul>
<li>对于Python，PEP 8已经成为大多数醒目所遵循的风格指南</li>
<li>使用四个空格缩进，不使用制表符</li>
<li>换行，一行不超过79个字符</li>
<li>使用空行分隔函数和类，以及函数内的较大的代码块</li>
<li>如果可能，把注释放到单独一行</li>
<li>使用文档字符串</li>
<li>在运算符前后和逗号后使用空格，但不能直接在括号内使用</li>
<li>以一致的规则为类和函数命名</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于python</title>
    <url>/2020/09/26/%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ul>
<li>python提供了高效的高级数据结构，有高级的内置数据类型，比如灵活的数组和字典，能简单有效地面向对象编程</li>
<li>解释型语言</li>
<li>python缺点：<ul>
<li>运行速度慢，python是解释性语言，代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。C程序是运行前直接编译成CPU能执行的机器码，所以块。</li>
<li>代码不能加密，发布python程序实际上就是发布源代码。C语言不用发布源代码，只需要把编译后的机器码（xxx.exe文件) 发布出去，要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源代码发布出去。</li>
</ul>
</li>
<li>Python标准库：<a href="https://docs.python.org/zh-cn/3/library/index.html">https://docs.python.org/zh-cn/3/library/index.html</a></li>
<li>Python语法：<a href="https://docs.python.org/zh-cn/3/reference/index.html">https://docs.python.org/zh-cn/3/reference/index.html</a></li>
</ul>
<h3 id="python解释器"><a href="#python解释器" class="headerlink" title="python解释器"></a>python解释器</h3><ul>
<li><p>目前，python有两个版本，2.x版和3.x版，这两个版本不兼容。</p>
</li>
<li><p>python3安装：<a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></p>
</li>
<li><p>命令行选项：<a href="https://docs.python.org/zh-cn/3/using/cmdline.html#using-on-general">https://docs.python.org/zh-cn/3/using/cmdline.html#using-on-general</a></p>
</li>
</ul>
<h3 id="python作为计算器使用"><a href="#python作为计算器使用" class="headerlink" title="python作为计算器使用"></a>python作为计算器使用</h3><ul>
<li><p>解释器可以像计算器一样，在里面输入一个表达式，它会写出答案。</p>
</li>
<li><p>数字</p>
<ul>
<li><p>整数类型是 int，小数类型是 float</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">3</span>*(<span class="number">4</span>+<span class="number">5</span>)</span><br><span class="line"><span class="number">27</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">4</span>/<span class="number">5</span></span><br><span class="line"><span class="number">0.8</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">4</span>%<span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除法返回浮点数类型，若忽略整数部分，可以使用 // 运算符</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">10</span><span class="comment">//3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python中，可以使用 ** 运算符计算乘方</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">3</span>**<span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">3</span>**<span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>交互模式下，上一次打印出的表达式被赋值给变量 _，把python作为桌面计算器时，继续计算相对简单</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; tax=<span class="number">12.5</span>/<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; price=<span class="number">100.50</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; price*tax</span><br><span class="line"><span class="number">12.5625</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; price+<span class="number">_</span></span><br><span class="line"><span class="number">113.0625</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; round(<span class="number">_</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">113.06</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除了int 和 float，python也支持其他类型的数字，如 Decimal或Fraction，python也支持内置对复数的支持，使用后缀 j 或者 J 就可以表示虚数部分</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">1</span>+<span class="number">2</span>j+<span class="number">2</span>+<span class="number">4</span>j</span><br><span class="line">(<span class="number">3</span>+<span class="number">6</span>j)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>字符串</p>
<ul>
<li><p>除了数字，python也可以操作字符串。单引号或者双引号都可以，反斜杠\用来转义</p>
</li>
<li><p>字符串可以用 + 进行连接，也可以用 * 进行重复</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="number">3</span>*<span class="string">&#x27;ab&#x27;</span>+<span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="string">&#x27;ababab123&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串可以被“索引”，第一个字符索引是0，单个字符没有特殊的类型，只是一个长度为1的字符串</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; word=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; word[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;p&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>索引也可以用负数，这时从右边开始数，负数索引从-1开始</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; word[-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;n&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串还支持切片，索引可以得到单个字符，切片可以获取子字符串，左闭右开</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; word=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; word[<span class="number">0</span><span class="symbol">:</span><span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; word[<span class="symbol">:</span><span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; word[<span class="number">2</span><span class="symbol">:</span>]</span><br><span class="line"><span class="string">&#x27;thon&#x27;</span></span><br></pre></td></tr></table></figure>

<p>对于非负索引的切片，如果索引不越界，得到的切片长度就是起止索引之差，如 word[1:3] 的长度为2</p>
</li>
<li><p>python中的字符串不能被修改，不能向字符串中的某个索引位置赋值，否则会产生一个错误</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; word[<span class="number">0</span>]=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">TypeError:</span> <span class="string">&#x27;str&#x27;</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内建函数 len() 返回一个字符串的长度</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; str=<span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(str)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表</p>
<ul>
<li><p>可以通过方括号引起，逗号分隔的一组值（元素）得到</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="type">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="type">list</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>和字符串一样，列表也支持索引和切片</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; list[:<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt; list[<span class="number">-2</span>:]</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>列表同样支持拼接操作</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">list</span>+<span class="selector-attr">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[1, 2, 3, 4, 5, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>与 immutable 的字符串不同，列表是一个 mutable 类型，它自己的内容可以改变</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="type">list</span>[<span class="number">0</span>]=&#x27;hello&#x27;</span><br><span class="line">&gt;&gt;&gt; <span class="type">list</span></span><br><span class="line">[&#x27;hello&#x27;, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在列表末尾通过 append() 方法来添加新元素</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="type">list</span>.append(<span class="number">10</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="type">list</span></span><br><span class="line">[&#x27;hello&#x27;, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>内置函数 len() 也可以作用到列表上</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(list)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>联合查询</title>
    <url>/2020/09/19/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><ol>
<li><p>union：将多条查询语句的结果合并成一个结果</p>
</li>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">UNION</span><br><span class="line">查询语句2</span><br><span class="line">UNION</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时。</p>
</li>
<li><p>使用：</p>
<ol>
<li>要求多条查询语句的查询列数是一致的。</li>
<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>
<li>union 关键字默认去重，如果使用 union all 可以包含重复项</li>
</ol>
</li>
</ol>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询部门编号&gt;90或邮箱包含a的员工信息</span></span><br><span class="line"></span><br><span class="line">方式1，or</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id&gt;<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">方式2，union</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees  <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees  <span class="keyword">WHERE</span> department_id&gt;<span class="number">90</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询中国用户中男性的信息以及外国用户中男性的用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,cname <span class="keyword">FROM</span> t_ca <span class="keyword">WHERE</span> csex=<span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tname <span class="keyword">FROM</span> t_ua <span class="keyword">WHERE</span> tGender=<span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h3><ul>
<li>数值型：整数，小数（定点数，浮点数）</li>
<li>字符型：较短的文本(char，varchar)，较长的文本：text，blob(较长的二进制数据)</li>
<li>日期型</li>
</ul>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul>
<li><p>分类：tinyint（1字节)，smallint（2字节)，mediumint（3字节)，int/integer（4字节)，bigint（8字节)</p>
</li>
<li><p>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加 unsigned 关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">	t2 <span class="built_in">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#t1列只能插入正数，t2列可以插入正数或负数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果插入的数值超出了整型的范围，会报 out of range 异常</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#报out of range 异常</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span>(<span class="number">4</span>),</span><br><span class="line">	t2 <span class="built_in">INT</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_int <span class="keyword">VALUES</span>(<span class="number">2147483648</span>,<span class="number">4294967296</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不设置长度，会有默认的长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span>,</span><br><span class="line">	t2 <span class="built_in">INT</span> </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认长度是11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配 zerofill 使用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span>(<span class="number">3</span>) ZEROFILL,</span><br><span class="line">	t2 <span class="built_in">INT</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_int <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入值是001，2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><ul>
<li><p>分类：</p>
<ul>
<li><p>浮点型：float(M,D)，double(M，D)</p>
</li>
<li><p>定点型：dec(M,D)，decimal(M，D)</p>
</li>
<li><p>M：整数部位+小数部位，D：小数部位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_float(</span><br><span class="line">	f1 <span class="built_in">FLOAT</span>(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line">	f2 <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">3</span>),</span><br><span class="line">	f3 <span class="built_in">DECIMAL</span>(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#f1小数部分3位，整数部分1位</span></span><br><span class="line"><span class="comment">#f1 1.46，f2 12.400，f3 12.00</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">1.456</span>,<span class="number">12.4</span>,<span class="number">12</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">#f2小数部分3位，整数部分3位</span></span><br><span class="line"><span class="comment">#f2 out of range 异常</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">12.64</span>,<span class="number">123.456</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#f3小数部分2位，整数部分2位</span></span><br><span class="line"><span class="comment">#f1 12.60，f2 12.456，f3 12.56</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">12.6</span>,<span class="number">12.456</span>,<span class="number">12.56</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>M,D 可以省略，若是decimal，M默认是10，D默认是0；若是float或double，会根据插入值决定精度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_float(</span><br><span class="line">	f1 <span class="built_in">FLOAT</span>,</span><br><span class="line">	f2 <span class="keyword">DOUBLE</span>,</span><br><span class="line">	f3 <span class="built_in">DECIMAL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">123.4</span>,<span class="number">123.4</span>,<span class="number">123</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">12345.6</span>,<span class="number">123.456</span>,<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定点型的精度较高，若要求插入数值精度较高如货币运算等考虑使用定点型存储</p>
</li>
</ul>
</li>
</ul>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ul>
<li><p>用来保存mysql中较短的字符串：char，varchar</p>
</li>
<li><p>char 和 varchar</p>
<ul>
<li>char，CHAR(M)，M是最大的字符数，可以省略，默认为1；固定长度的字符；耗费空间；效率高</li>
<li>varchar，VARCHAR(M)，M是最大的字符数，不可以省略；可变长度的字符；节省空间；效率低</li>
</ul>
</li>
<li><p>binary 和 varbinary 用于保存较短的二进制字符串</p>
</li>
<li><p>enum 用于保存枚举，要求插入的值必须属于列表中指定的值之一。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_char(</span><br><span class="line">   c1 ENUM(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>); <span class="comment">#插入值是a</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;m&#x27;</span>); <span class="comment">#m无法插入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>set 用于保存集合，里面可以保存 0~64个成员。和Enum类型的区别是，SET类型一次可以选取多个成员，而Enum只能选一个。根据成员个数不同，存储所占的字节也不同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_char(</span><br><span class="line">	s1 <span class="keyword">SET</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;A,B&#x27;</span>); <span class="comment">#插入值是a,b</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a,c,d&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>较长的文本：text，blob(较大的二进制)</p>
</li>
</ul>
<h3 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h3><ul>
<li><p>分类：</p>
<ul>
<li><p>DATE：4个字节，只保存日期，1000-01-01 ~ 9999-12-31</p>
</li>
<li><p>TIME：3个字节，只保存时间，-838:59:59 ~ 838:59:59</p>
</li>
<li><p>YEAR：只保存年,1个字节，1901 ~ 2155</p>
</li>
<li><p>DATETIME和TIMESTAMP</p>
<ul>
<li>都是保存日期和时间</li>
<li>DATETIME ,8个字节，1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 ，不受时区影响</li>
<li>TIMESTAMP，4个字节，19700101080001（2038年的某个时刻），受时区影响，受mysql版本和sqlMode的影响大。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_date(</span><br><span class="line">	t1 DATETIME,</span><br><span class="line">	t2 <span class="built_in">TIMESTAMP</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_date <span class="keyword">VALUES</span>(<span class="keyword">NOW</span>(),<span class="keyword">NOW</span>());</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;time_zone&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">time_zone</span>=<span class="string">&#x27;+9:00&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_date; <span class="comment"># t2列提前了1h</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>约束</title>
    <url>/2020/09/20/%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><ul>
<li>约束：一种限制，用于限制表中的数据，为了保证表中的数据的一致性和完整性</li>
<li>分类：六大约束<ul>
<li>NOT NUL：非空约束，用于保证该字段的值不能为空，比如姓名，学号等</li>
<li>DEFAULT：默认值约束，用于保证该字段有默认值，比如性别</li>
<li>PEIMARY KEY：主键约束，用于保证该字段的值具有唯一性，并且非空，如学号，员工编号等<ul>
<li>非空+唯一，不允许重复，不允许出现空值</li>
<li>MySQL的主键名总是PRMARY，当创建主键约束时，系统默认会在所在的列和列组合上建立对应的唯一索引</li>
</ul>
</li>
<li>UNIQUE：唯一约束，用于保证该字段的值在整个表中是唯一的，可为空，比如座位号<ul>
<li>同一个表可以有多个唯一约束，多个列组合的约束</li>
<li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同</li>
<li>MySQL会给唯一约束的列上默认创建一个唯一索引</li>
</ul>
</li>
<li>CHECK：检查约束，mysql 中不支持，比如年龄，性别</li>
<li>FOREIGN KEY：外键约束，用于限制两个表的关系，在从表中添加外键约束，用于引用主表中某列的值；<ul>
<li>保证一个或两个表之间的参照完整性</li>
<li>构建于一个表的两个字段或是两个表的两个字段之间的参照关系</li>
<li>从表的外键值必须在主表中能找到或者为空</li>
<li>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据。</li>
<li>外键约束的参照列，在主表中引用的只能是主键或唯一键约束的列。</li>
<li>同一个表可以有多个外键约束。</li>
<li>FOREIGN KEY：在表级指定子表中的列</li>
<li>REFERENCES：标识在父表中的列</li>
<li>ON DELETE CASCADE：级联删除，当父表中的列被删除时，子表中相应的列也被删除</li>
<li>ON DELETE SET NULL：级联置空，子表中相应的列置空</li>
</ul>
</li>
</ul>
</li>
<li>添加约束时机：<ul>
<li>创建表时</li>
<li>修改表时</li>
</ul>
</li>
<li>添加约束分类<ul>
<li>列级约束：六大约束均支持，外键约束没有效果</li>
<li>表级约束：除非空约束和默认值约束外，其他约束均支持</li>
</ul>
</li>
<li>主键约束和唯一键约束<ul>
<li>主键：保证唯一性，不允许为空，一个表中至多一个主键，允许组合主键</li>
<li>唯一键，保证唯一性，允许为空，一个表中可以有多个唯一键，允许组合的唯一键。</li>
</ul>
</li>
<li>外键<ul>
<li>要求在从表中设置外键关系</li>
<li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，对名称没有要求</li>
<li>主表的关联类必须是一个key，一般是主键或唯一键</li>
<li>插入数据时，先插入主表，再插入从表</li>
<li>删除数据时，先删除从表，再删除主表</li>
</ul>
</li>
</ul>
<h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	字段名 字段类型 列级约束,</span><br><span class="line">	字段名 字段类型,</span><br><span class="line">	表级约束</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表级约束</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 在各个字段的最下面</span></span><br><span class="line">【constraint 约束名】约束类型(字段名)</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code class="sql">CREATE TABLE stuinfo(
    id INT,
    stuname VARCHAR(20),
    gender CHAR(1),
    seat INT,
    age INT,
    majorid INT,
    CONSTRAINT pk PRIMARY KEY(id),#主键
    CONSTRAINT uq UNIQUE(seat),#唯一键
    CONSTRAINT ck CHECK(gender =&#39;男&#39; OR gender  = &#39;女&#39;),#检查
    CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键
);
CREATE TABLE major(
    id INT PRIMARY KEY,#主键
    majorName VARCHAR(20)
);

SHOW INDEX FROM stuinfo;
SHOW INDEX FROM major;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 添加列级约束</span><br><span class="line"></span><br><span class="line">  - 语法：直接在字段名和类型后面追加约束类型即可。</span><br><span class="line"></span><br><span class="line">  - 只支持默认约束，非空约束，主键约束，唯一约束</span><br><span class="line"></span><br><span class="line">    ```sql</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">    	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,<span class="comment">#主键</span></span><br><span class="line">    	stuName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,<span class="comment">#非空，唯一</span></span><br><span class="line">    	gender <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender=<span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender =<span class="string">&#x27;女&#x27;</span>),<span class="comment">#检查</span></span><br><span class="line">    	seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>,<span class="comment">#唯一</span></span><br><span class="line">    	age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span>  <span class="number">18</span>,<span class="comment">#默认约束</span></span><br><span class="line">    	majorId <span class="built_in">INT</span> <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>)<span class="comment">#外键，stuinfo表的majorId是major表的外键</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> major(</span><br><span class="line">    	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,<span class="comment">#主键</span></span><br><span class="line">    	majorName <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#查看stuinfo中的所有索引，包括主键、外键、唯一</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> stuinfo;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#查看major中的所有索引</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> major;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h3><ul>
<li><p>添加列级约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span> 表名  <span class="keyword">modify</span>  <span class="keyword">column</span>  字段名  字段类型 新约束；</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表级约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span> 表名  <span class="keyword">add</span>  【<span class="keyword">constraint</span> 约束名】 约束类型(字段名) 【外键的引用】</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加非空约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">	stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	seat <span class="built_in">INT</span>,</span><br><span class="line">	age <span class="built_in">INT</span>,</span><br><span class="line">	majorId <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 stuname 添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加默认约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给age字段添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> COLUNN age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加主键约束</p>
<ul>
<li><p>列级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给id字段添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给id字段添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">DESC</span> stuinfo;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>添加唯一约束</p>
<ul>
<li><p>列级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给seat字段添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给seat字段添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(seat);</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>添加外键约束</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加fk_stuinfo_major 外键约束，关联stuinfo和major表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stuinfo_major FOREIFN <span class="keyword">KEY</span>(majorId) <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h3><ul>
<li><p>删除非空约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除stuname字段上的非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除默认约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除age字段上的默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> COLUNM age <span class="built_in">INT</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除主键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 stuinfo 表的主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除seat字段上的唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> IDNEX seat;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除外键 fk_stuinfo_major</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_stuinfo_major;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>条件查询</title>
    <url>/2020/09/17/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="条件查询语法"><a href="#条件查询语法" class="headerlink" title="条件查询语法"></a>条件查询语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	查询列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	筛选条件;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>按条件表达式筛选</strong></p>
<blockquote>
<p>简单条件运算符：&gt; &lt;  =  !=  &lt;&gt;  &gt;=   &lt;=</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资&gt;12000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&gt;<span class="number">12000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>按逻辑表达式筛选</strong></p>
<blockquote>
<p>逻辑运算符：and  or  not（not，两边都为false，结果为true，否则为false)</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资z在10000到20000之间的员工名、工资以及奖金</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   last_name,salary,commission_pct</span><br><span class="line"><span class="keyword">FROM</span>  employees</span><br><span class="line"><span class="keyword">WHERE</span>  salary&gt;=<span class="number">10000</span> <span class="keyword">AND</span> salary&lt;=<span class="number">20000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询部门编号不是在90到110之间，或者工资高于15000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">   <span class="keyword">NOT</span>(department_id&gt;=<span class="number">90</span> <span class="keyword">AND</span> department_id&lt;=<span class="number">110</span>) <span class="keyword">OR</span> salary&gt;<span class="number">15000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>模糊查询</strong></p>
<ol>
<li>like</li>
</ol>
<blockquote>
<p>一般和通配符搭配使用，通配符：%(代表0个或多个字符)， _(任意单个字符)</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名中包含字符a的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span>  last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__n_l%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名中第二个字符为_的员工名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_$_%&#x27;</span> ESCAPE <span class="string">&#x27;$&#x27;</span>; <span class="comment">#$是转义的作用，可替换为其他字符</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>2.between and</p>
<blockquote>
<p>包含临界值，两个临界值不能调换顺序</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工编号在100到120之间的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>3.in</p>
<blockquote>
<ul>
<li>包含某字段的值是否属于in列表中的某一项</li>
<li>in 列表中的值类型必须一致或兼容</li>
<li>in 列表中不支持通配符</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  job_id <span class="keyword">IN</span>( <span class="string">&#x27;IT_PROT&#x27;</span> ,<span class="string">&#x27;AD_VP&#x27;</span>,<span class="string">&#x27;AD_PRES&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>4.is null 和 安全等于 &lt;=&gt;</p>
<blockquote>
<ul>
<li>is null 或 is not null 用于判断 null 值，=或&lt;&gt;不能用于判断 null 值</li>
<li>安全等于&lt;=&gt;，即可以判断NULL值，又可以判断普通数值</li>
<li>推荐使用 is null</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询没有奖金的员工名和奖金率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询没有奖金的员工名和奖金率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct &lt;=&gt;<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资为12000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary &lt;=&gt; <span class="number">12000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询所有员工的奖金率，若为Null，置为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">     <span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>) <span class="keyword">AS</span> 奖金率,</span><br><span class="line">     commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>视图</title>
    <url>/2020/09/20/%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li>一种虚拟表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的</li>
<li>只保存了sql逻辑，不保存查询结果。</li>
<li>应用场景<ul>
<li>多个地方用到同样的查询结果</li>
<li>该查询结果使用的 sql 语句较复杂</li>
</ul>
</li>
<li>好处<ul>
<li>重用 sql 语句</li>
<li>简化复杂的 sql 操作，不必知道它的查询细节</li>
<li>保护数据，提高安全性</li>
</ul>
</li>
</ul>
<h3 id="视图和表"><a href="#视图和表" class="headerlink" title="视图和表"></a>视图和表</h3><blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建语法的关键字</th>
<th align="center">是否实际占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center">CREATE VIEW</td>
<td align="center">不占用，只是保存了sql逻辑</td>
<td align="center">可以进行增删改查，但一般只用做查询</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center">CREATE TABLE</td>
<td align="center">占用，保存数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><ul>
<li><p>语法：create view 视图名 as 查询语句；</p>
</li>
<li><pre><code class="sql"># 查询姓张的学生名和专业名

#普通查询语句
SELECT stuname,majorname
FROM stuinfo S
INNER JOIN major M ON S.`majorid`= M.`id`
WHERE S.`stuname` LIKE &#39;张%&#39;;

#创建查询视图
CREATE VIEW v1
AS
SELECT stuname,majorname
FROM stuinfo S
INNER JOIN major M ON S.`majorid`= M.`id`;

#使用视图查询
SELECT * FROM v1 WHERE stuname LIKE &#39;张%&#39;;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment"># 查询姓名中包含a字符的员工名、部门名和工种名</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#①第一步：创建视图</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v2</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> last_name,department_name,job_title</span><br><span class="line">  <span class="keyword">FROM</span> employees E</span><br><span class="line">  <span class="keyword">JOIN</span> departments D <span class="keyword">ON</span> E.department_id  = D.department_id</span><br><span class="line">  <span class="keyword">JOIN</span> jobs J <span class="keyword">ON</span> J.job_id  = E.job_id;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#②第二步：使用视图查询</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v2 <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><ul>
<li><p>方式1</p>
<ul>
<li><pre><code class="sql">CREATE OR REPLACE VIEW 视图名
AS
查询语句
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment">#修改v3视图信息</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v3</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),job_id</span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3 </span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>方式2</p>
<ul>
<li><pre><code class="sql">ALTER VIEW 视图名
AS 
查询语句;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment"># 修改v3视图信息</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> v3</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><ul>
<li><p>用户可以一次删除一个或多个视图，前提是必须有该视图的 drop 权限</p>
</li>
<li><p>语法：drop VIEW 视图名1，视图名2，……..；</p>
</li>
<li><pre><code class="sql"># 删除视图v2和v3
DROP VIEW v2,v3;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 查看视图</span></span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment"># 查看视图v3的信息</span></span><br><span class="line">  </span><br><span class="line">  DESC v3;</span><br><span class="line">  或</span><br><span class="line">  <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v3;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h3><ol>
<li><p>插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v1 <span class="keyword">VALUES</span>(<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;zf@qq.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="keyword">UPDATE</span> v1 <span class="keyword">SET</span> last_name = <span class="string">&#x27;张三&#x27;</span> <span class="keyword">WHERE</span> last_name=<span class="string">&#x27;张飞&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> v1 <span class="keyword">WHERE</span> last_name = <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具备以下特点的视图不允许更新</p>
<ol>
<li><p>包含 分组函数、distanct、group by，having，union或 union all 关键字的 sql 语句</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#包含分组函数的和group by的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) 最高工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> v1 <span class="keyword">SET</span> 最高工资=<span class="number">9000</span> <span class="keyword">WHERE</span> department_id=<span class="number">10</span>; </span><br><span class="line"><span class="comment">#The target table v2 of the UPDATE is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>常量视图不允许更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;john&#x27;</span> <span class="keyword">NAME</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> v2 <span class="keyword">SET</span> <span class="keyword">NAME</span>=<span class="string">&#x27;lucy&#x27;</span>; </span><br><span class="line"><span class="comment">#The target table v2 of the UPDATE is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>select 中包含子查询的视图不允许更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> employees) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3;</span><br><span class="line"><span class="keyword">UPDATE</span> v3 <span class="keyword">SET</span> 最高工资=<span class="number">100000</span>; </span><br><span class="line"><span class="comment">#Column &#x27;最高工资&#x27; is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>使用 join 连接的视图不允许更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v4</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">JOIN</span> departments D</span><br><span class="line"><span class="keyword">ON</span> E.department_id  = D.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v4 <span class="keyword">VALUES</span>(<span class="string">&#x27;陈真&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>);</span><br><span class="line"><span class="comment">#Can not insert into join view &#x27;myemployees.v4&#x27; without fields list</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>from 一个不能更新的视图的视图不能更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v5</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> v5 <span class="keyword">SET</span> 最高工资=<span class="number">10000</span> <span class="keyword">WHERE</span> department_id=<span class="number">60</span>;</span><br><span class="line"><span class="comment">#Column &#x27;最高工资&#x27; is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>where 子句的子查询引用了from 子句中的表的视图不能更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v6</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span>  manager_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v6;</span><br><span class="line"><span class="keyword">UPDATE</span> v6 <span class="keyword">SET</span> salary=<span class="number">10000</span> <span class="keyword">WHERE</span> last_name = <span class="string">&#x27;k_ing&#x27;</span>; </span><br><span class="line"><span class="comment">#The target table v6 of the UPDATE is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2020/09/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><p>列表对象方法</p>
<ul>
<li><p>list.append(x)：在列表的末尾添加一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruits.append(<span class="string">&#x27;grape&#x27;</span>) </span><br><span class="line">print(fruits) <span class="comment">#[&#x27;orange&#x27;, &#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>list.extend(iterable)：使用可迭代对象中的所有元素来扩展列表</p>
</li>
<li><p>list.inert(i，x)：在给定的位置插入一个元素，第一个参数是要插入的元素的索引</p>
</li>
<li><p>list.remove(x)：移除列表中第一个值为x的元素，如果没有这样的元素，则抛出ValueError异常</p>
</li>
<li><p>list.pop(【x】)：删除列表中给定位置的元素并返回它，如果没有给定位置，a.pop() 将会删除并返回列表混助攻的最后一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.pop())  <span class="comment"># banana</span></span><br><span class="line">print(fruits)  <span class="comment"># [&#x27;orange&#x27;, &#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;apple&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>list.clear()：移除列表中的所有元素</p>
</li>
<li><p>list.index(x【，start [,end] 】)：返回列表中第一个值为x的元素的从0开始的索引，如果没有这样的元素将会抛出ValueError异常，可选参数 start 和 end 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是start参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.index(<span class="string">&#x27;banana&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line">print(fruits.index(<span class="string">&#x27;banana&#x27;</span>, <span class="number">4</span>)) <span class="comment">#6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>list.count(x)：返回x在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.count(<span class="string">&#x27;apple&#x27;</span>))  <span class="comment">#2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>list.sort(key=None，reverse=False)：对列表转给你的元素进行排序</p>
<p>，参数可用于自定义排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits) <span class="comment"># [&#x27;apple&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;orange&#x27;, &#x27;pear&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>注意，并非所有的数据都可以排序或比较，如[None，’hello’，10] 就不可以排序，因为整数不能与字符串比较，而None不能与其他类型比较</p>
</li>
<li><p>list.reverse()：翻转列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits) <span class="comment">#[&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;kiwi&#x27;, &#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;apple&#x27;, &#x27;orange&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>list.copy()：返回列表中的一个浅拷贝</p>
</li>
<li><p>注意，像 insert，remove，sort等方法，只修改列表，没有返回值(返回默认值是None)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.sort()) <span class="comment"># None</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表作为栈使用</p>
<blockquote>
<p>列表方法使得列表作为堆栈非常容易，最后一个插入，最先取出(“先进后出”)，要添加一个元素到堆栈的顶端，使用append()，要从堆栈顶部取出一个元素，使用 pop()，不用指定索引。</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stack = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">stack.append(<span class="number">6</span>)</span><br><span class="line">stack.append(<span class="number">7</span>)</span><br><span class="line">print(stack)  <span class="comment"># [3, 4, 5, 6, 7]</span></span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">print(stack)  <span class="comment"># [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表作为队列使用</p>
<blockquote>
<p>列表也可用作队列，先添加的元素被最先取出（“先进先出”）。然而列表用作这个目的相当低效，因为在列表的末尾添加和弹出元素非常快，但是在列表的开头插入或弹出元素却很慢，因为所有的其他元素都必须移动一位。</p>
<p>若要实现一个队列，可使用 collection.deque ，它被设计成可以快速地从两端添加或弹出元素。</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue = deque([<span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Michael&quot;</span>])</span><br><span class="line">queue.append(<span class="string">&quot;Terry&quot;</span>)</span><br><span class="line">queue.append(<span class="string">&quot;Graham&quot;</span>)</span><br><span class="line">print(queue)  <span class="comment"># deque([&#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Terry&#x27;, &#x27;Graham&#x27;])</span></span><br><span class="line">print(queue.popleft())  <span class="comment"># Eric</span></span><br><span class="line">print(queue)  <span class="comment"># deque([&#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Terry&#x27;, &#x27;Graham&#x27;])</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表推导式</p>
<blockquote>
<p>列表推导式提供了一个更简单的方法创建列表，常见的用法是把某种操作应用于序列或可迭代对象的每个元素上，然后实验其结果来创建列表，或者通过满足某些特定条件元素来创建子序列</p>
<p>如，创建一个平方列表</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">squares</span> =<span class="meta"> []</span></span><br><span class="line"><span class="attribute">for</span> item in range(<span class="number">10</span>):</span><br><span class="line">    <span class="attribute">squares</span>.append(item ** <span class="number">2</span>)</span><br><span class="line"><span class="attribute">print</span>(squares) #[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure>

<p>这里创建(或被重写) 的 item 变量在for循环后仍然存在，我们可以计算平方列表的值而不会产生任何副作用。</p>
<p>等价于：squares = list(map (lambda x: x**2,  range(10)))</p>
<p>也等价于：squares=[x**2 for x in range(10)]</p>
</blockquote>
<blockquote>
<p>列表推导式的结构是由一对方括号所包含的以下内容：</p>
<p>一个表达式，后跟一个for子句，然后是0个或多个for或if子句。</p>
<p>其结果将是一个新列表，有表达式依据后面的 for 和 if 子句的内容进行求值计算得出。</p>
<p>如：使用列表推导式将两个列表中不相等的元素组合起来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v=[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">print(v) <span class="comment">#[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span></span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v=[]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">	<span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]:</span><br><span class="line">		<span class="keyword">if</span> x!=y</span><br><span class="line">			v.append((x,y))</span><br><span class="line">print(v)</span><br></pre></td></tr></table></figure>

<p>注意这这两种方式中，for 和 if 的顺序是相同的</p>
</blockquote>
<blockquote>
<p>如果表达式是一个元组，必须加上括号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vec = [<span class="number">-4</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">new_vec0 = [x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">print(new_vec0)  <span class="comment"># [-8, -4, 0, 4, 8]</span></span><br><span class="line">new_vec1 = [(x, x * <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">print(new_vec1)  <span class="comment"># [(-4, -8), (-2, -4), (0, 0), (2, 4), (4, 8)]</span></span><br><span class="line"></span><br><span class="line">new_vec2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &gt;= <span class="number">0</span>]</span><br><span class="line">print(new_vec2)  <span class="comment"># [0, 2, 4]</span></span><br><span class="line"></span><br><span class="line">new_vec3 = [abs(x) <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">print(new_vec3)  <span class="comment"># [4, 2, 0, 2, 4]</span></span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">&#x27;  banana&#x27;</span>, <span class="string">&#x27;loganberry   &#x27;</span>, <span class="string">&#x27;  possion fruit  &#x27;</span>]</span><br><span class="line">new_fruits = [item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> fruits]</span><br><span class="line">print(new_fruits)  <span class="comment"># [&#x27;banana&#x27;, &#x27;loganberry&#x27;, &#x27;possion fruit&#x27;]</span></span><br><span class="line"></span><br><span class="line">num = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">new_num = [i <span class="keyword">for</span> j <span class="keyword">in</span> num <span class="keyword">for</span> i <span class="keyword">in</span> j]</span><br><span class="line">print(new_num)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>列表推导式可以使用复杂的表达式和嵌套函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line">a = [str(round(pi, i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">print(a)  <span class="comment"># [&#x27;3.1&#x27;, &#x27;3.14&#x27;, &#x27;3.142&#x27;, &#x27;3.1416&#x27;, &#x27;3.14159&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>嵌套的列表推导式</p>
<blockquote>
<p>列表推导式中的初始表达式可以是任何表达式，包括另一个列表推导式</p>
<p>如下面这个 3x4 的矩阵，它由3个长度为4的列表组成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">juzhen=[</span><br><span class="line">	[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">	[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">	[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>下面的列表推导式将交换其行与列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_juzhen=[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> juzhen] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(new_juzhen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1,5,9],[2,6,10],[3,7,11],[4,8,]]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>嵌套的列表推导式是基于跟随其后的for进行求值的</p>
<p>上面的例子等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    arr1.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> juzhen])</span><br><span class="line">print(arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1,5,9],[2,6,10],[3,7,11],[4,8,]]</span></span><br></pre></td></tr></table></figure>

<p>也等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    arr2_row = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> juzhen:</span><br><span class="line">        arr2_row.append(row[i])</span><br><span class="line">    arr2.append(arr2_row)</span><br><span class="line">print(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1,5,9],[2,6,10],[3,7,11],[4,8,]]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>实际应用中，更多私用内置函数去组成复杂的流程语句，zip() 函数将会很好的处理这种情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr3=list(zip(*juzhen))</span><br><span class="line">print(arr3)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h3><ul>
<li><p>可以从列表按照给定的索引而不是值来移除一个元素，它不同于会返回一个值的pop() 方法。</p>
</li>
<li><p>del语句也可以用来从列表中移除切片或者清空整个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">66</span>, <span class="number">25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line">print(a)  <span class="comment"># [1, 66, 25, 333, 333, 1234, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">print(a)  <span class="comment"># [1, 66, 333, 1234, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line">print(a)  <span class="comment"># []</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>del 也可删除整个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> a</span><br><span class="line">print(a)  <span class="comment"># name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="元组和序列"><a href="#元组和序列" class="headerlink" title="元组和序列"></a>元组和序列</h3><ul>
<li><p>列表和字符串有很多共性，例如索引和切片等，它们是序列数据类型（list，tuple，range) 中的两种。</p>
</li>
<li><p>随着python语言的发展，其他的序列类型也会被加入其中，如其中一种标准序列类型：元组</p>
</li>
<li><p>一个元组由几个被逗号隔开的值组成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">print(t[<span class="number">0</span>])  <span class="comment"># 12345</span></span><br><span class="line">print(t)  <span class="comment"># (12345, 54321, &#x27;hello!&#x27;)</span></span><br><span class="line"></span><br><span class="line">u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(u)  <span class="comment"># ((12345, 54321, &#x27;hello!&#x27;), (1, 2, 3, 4, 5))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">print(v)  <span class="comment"># ([1, 2, 3], [3, 2, 1])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>元组在输出时总是被圆括号包围的，以便正确表示嵌套元组</p>
</li>
<li><p>输入时圆括号可有可无，不过经常必须有，如果这个元组是一个更大的表达式的一部分的话</p>
</li>
<li><p>给元祖中的一个单独的元素赋值是不允许的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">print(t)  <span class="comment"># &#x27;tuple&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>元组可能看起来和列表很像，但它们通常在不同的场景被使用，并有着不同的用途</p>
<ul>
<li>元组是 immutable，其序列通常包含不同种类元素，并且通过解包或者索引来访问，如果是namedtuples的话甚至可以通过属性访问</li>
<li>列表时 mutable，列表中的元素一般是同种类型的，通过迭代访问</li>
</ul>
</li>
<li><p>空元祖可以直接被一对空圆括号创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty = ()</span><br><span class="line">print(len(empty))  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>含有一个元素的元组可以通过在这个元组后添加一个逗号来构建，因为圆括号中只有一个值的话不够明确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">single = <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">print(single)  <span class="comment"># (&#x27;hello&#x27;,)</span></span><br><span class="line">print(len(single))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>语句 t=12345,54321,’hello!’ 是元组打包的一个例子，值 12345,54321,’hello!’ 被打包进元组，其逆操作也是允许的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x,y,z=t</span><br></pre></td></tr></table></figure>

<p>这被称为序列解包。解包操作的等号右侧可以是任何序列，序列解包的要求是等号左侧的变量数与右侧序列里所含的元素数相同。多重赋值也只是元组打包和序列解包的组合。</p>
</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li><p>集合是由不重复元素组成的无序的集。</p>
</li>
<li><p>基本用法包括成员检测和消除重复元素</p>
</li>
<li><p>集合对象也支持 联合，交集，差集，对称差分等数学运算</p>
</li>
<li><p>花括号或 set() 函数可以用来创建集合，注意，创建一个空集合只能用set() 而不能用 {}，因为后者是创建一个空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line">print(basket)  <span class="comment"># &#123;&#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;orange&#x27;, &#x27;apple&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">b1 = <span class="string">&#x27;orange&#x27;</span> <span class="keyword">in</span> basket</span><br><span class="line">print(b1)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">b2 = <span class="string">&#x27;cragrass&#x27;</span> <span class="keyword">in</span> basket</span><br><span class="line">print(b2)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a = set(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = set(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line">print(a)  <span class="comment"># &#123;&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line">print(a - b)  <span class="comment"># &#123;&#x27;b&#x27;, &#x27;r&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line">print(a | b)  <span class="comment"># &#123;&#x27;z&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;d&#x27;, &#x27;m&#x27;&#125;</span></span><br><span class="line">print(a &amp; b)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;</span></span><br><span class="line">print(a ^ b)  <span class="comment"># letters in a or b but not both, &#123;&#x27;r&#x27;, &#x27;z&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;l&#x27;, &#x27;m&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类似于列表推导式，集合也支持推导式形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line">print(a)  <span class="comment"># &#123;&#x27;d&#x27;, &#x27;r&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li><p>另一个非常有用的python内置数据类型是字典 (dict)，字典在其他语言中可能被叫做 联合内存 或 联合数组</p>
</li>
<li><p>与以连续整数为索引的序列不同，字典是以 关键字 为索引的</p>
</li>
<li><p>字典可以是任意不可变类型，通常是字符串或数字</p>
</li>
<li><p>如果一个元组只包含字符串、数字或元组，那么这个元组也可以用作关键字，但如果这个元组直接或间接的包含了可变对象，那么它就不能用作关键字</p>
</li>
<li><p>列表不能用作关键字，因为列表可以通过索引、切片或 append() 和 extend() 之类的方法来改变</p>
</li>
<li><p>可以将字典理解为一个键值对的集合，一个字典中键必须是唯一的。</p>
</li>
<li><p>一对花括号可以创建一个空字典：{}</p>
</li>
<li><p>在一对花括号中放置一些以逗号分隔的键值对，这也是初始化字典的一种方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>&#125;</span><br><span class="line">tel[<span class="string">&#x27;guido&#x27;</span>] = <span class="number">4137</span></span><br><span class="line">print(tel)  <span class="comment"># &#123;&#x27;jack&#x27;: 4098, &#x27;sape&#x27;: 4139, &#x27;guido&#x27;: 4137&#125;</span></span><br><span class="line">print(tel[<span class="string">&#x27;jack&#x27;</span>])  <span class="comment"># 4098</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典主要的操作是使用关键字存储和解析值，也可以用 del 来删除一个键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> tel[<span class="string">&#x27;sape&#x27;</span>]</span><br><span class="line">tel[<span class="string">&#x27;irv&#x27;</span>] = <span class="number">4127</span></span><br><span class="line">print(tel)  <span class="comment"># &#123;&#x27;jack&#x27;: 4098, &#x27;guido&#x27;: 4137, &#x27;irv&#x27;: 4127&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用了一个已经存在的关键字来存储值，那么之前与这个关键字关联的值就会被遗忘</p>
</li>
<li><p>用一个不存在的键来取值会报错</p>
</li>
<li><p>对一个字典执行 list(d) 将返回包含该字典中所有键的列表，按插入次序排列，如需其他排序，要使用 sorted(d)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_tel1 = list(tel)</span><br><span class="line">print(new_tel1)  <span class="comment"># [&#x27;jack&#x27;, &#x27;guido&#x27;, &#x27;irv&#x27;]</span></span><br><span class="line"></span><br><span class="line">new_tel2 = sorted(tel)</span><br><span class="line">print(new_tel2)  <span class="comment"># [&#x27;guido&#x27;, &#x27;irv&#x27;, &#x27;jack&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>检查字典中是否存在一个特定建，可以用 in关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b1 = <span class="string">&#x27;guido&#x27;</span> <span class="keyword">in</span> tel</span><br><span class="line">print(b1)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">b2 = <span class="string">&#x27;jack&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tel</span><br><span class="line">print(b2)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dict() 构造函数可以直接从键值对序列里创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1 = dict([(<span class="string">&#x27;sape&#x27;</span>, <span class="number">4139</span>), (<span class="string">&#x27;guido&#x27;</span>, <span class="number">4127</span>), (<span class="string">&#x27;jack&#x27;</span>, <span class="number">4098</span>)])</span><br><span class="line">print(d1)  <span class="comment"># &#123;&#x27;sape&#x27;: 4139, &#x27;guido&#x27;: 4127, &#x27;jack&#x27;: 4098&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典推导是可以从任意的键值表达式中创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d2 = &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">print(d2)  <span class="comment"># &#123;2: 4, 4: 16, 6: 36&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当关键字是简单字符串时，有时直接通过关键字参数来指定键值对更方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d3 = dict(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">print(d3)  <span class="comment"># &#123;&#x27;sape&#x27;: 4139, &#x27;guido&#x27;: 4127, &#x27;jack&#x27;: 4098&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="循环的技巧"><a href="#循环的技巧" class="headerlink" title="循环的技巧"></a>循环的技巧</h3><ol>
<li><p>在字典中循环时，用 item() 方法可将关键字和对应的值同时取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stuInfo = &#123;<span class="string">&#x27;姓名&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;性别&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> stuInfo.items():</span><br><span class="line">    print(k, v)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">姓名 张三</span></span><br><span class="line"><span class="string">年龄 15</span></span><br><span class="line"><span class="string">性别 男</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在序列中循环时，用 enumerate() 函数可以将索引位置和其对应的值同时取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> enumerate([<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>]):</span><br><span class="line">    print(k, v)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 姓名</span></span><br><span class="line"><span class="string">1 年龄</span></span><br><span class="line"><span class="string">2 性别</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同时在两个或多个序列中循环时，用zip() 函数将其内元素一一匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">questions = [<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>]</span><br><span class="line">answers = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> zip(questions, answers):</span><br><span class="line">    print(&#123;<span class="string">&#x27;&#123;0&#125;:&#123;1&#125;&#x27;</span>.format(k, v)&#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;姓名:张三&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;年龄:18&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;性别:男&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逆向循环一个序列，可以先正向定位㤡，然后调用 reversed() 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按某个指定顺序循环一个序列，可以用 sorted() 函数，它可以在不改动原序列的基础上返回一个新的拍好序的序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted(set(basket)):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">apple</span></span><br><span class="line"><span class="string">banana</span></span><br><span class="line"><span class="string">orange</span></span><br><span class="line"><span class="string">pear</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在循环时修改列表内容时，可以改为创建一个新列表，简单安全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">raw_data = [<span class="number">56.2</span>, float(<span class="string">&#x27;NaN&#x27;</span>), <span class="number">51.7</span>, <span class="number">55.3</span>, <span class="number">52.5</span>, float(<span class="string">&#x27;NaN&#x27;</span>), <span class="number">47.8</span>]</span><br><span class="line">filter_data = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> raw_data:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> math.isnan(item):</span><br><span class="line">        filter_data.append(item)</span><br><span class="line">print(filter_data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[56.2, 51.7, 55.3, 52.5, 47.8]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="深入条件控制"><a href="#深入条件控制" class="headerlink" title="深入条件控制"></a>深入条件控制</h3><ul>
<li><p>while 和 if 条件句中可以使用任意操作，不仅仅是比较操作</p>
</li>
<li><p>比较操作符 in 和 not in 检验一个值是否在或不在一个序列中。</p>
</li>
<li><p>操作符 is 和 is not 比较两个对象是不是同一个对象，这只对像列表这样的可变对象比较重要。</p>
</li>
<li><p>所有的比较操作符都有相同的优先级，且优先级比数字运算符低</p>
</li>
<li><p>比较操作可以传递，例如 a&lt;b ==c ，会校验 a小于b 并且 b等于c</p>
</li>
<li><p>比较操作可以通过布尔运算符 and 和 or 来组合</p>
</li>
<li><p>比较操作或任何布尔运算的结果都可以用 not 来取反</p>
</li>
<li><p>这些操作符的优先级低于比较操作符，其中，not优先级最高，or 优先级最低，因此 A and not B or C 等价于 (A and (not B)) or C</p>
</li>
<li><p>布尔运算符 and 和 or 也被称为短路运算符，它们的参数从左至于右解析，一旦可以确定结果解析就停止。当用作普通值而非布尔值时，短路操作符的返回值通常是最后一个变量</p>
</li>
<li><p>也可以把比较操作或者逻辑表达式的结果赋值给一个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1，str2，str3=<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Tron&#x27;</span>,<span class="string">&#x27;Ham&#x27;</span></span><br><span class="line">non_null = str1 <span class="keyword">or</span> str2 <span class="keyword">or</span> str3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tron</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="比较序列和其他类型"><a href="#比较序列和其他类型" class="headerlink" title="比较序列和其他类型"></a>比较序列和其他类型</h3><ul>
<li><p>序列对象通常可以与相同序列类型的其他对象比较，这种比较使用 字典式 顺序</p>
</li>
<li><p>首先比较开头的两个对应元素，如果不等则比较结果由此确定</p>
</li>
<li><p>如果相等则比较之后的两个元素，以此类推，直到有一个序列被耗尽</p>
</li>
<li><p>如果要比较的两元素本身又是相同类型的序列，则会递归执行字典式顺序比较</p>
</li>
<li><p>如果两序列中所有的对应元素都相等，则两序列也将被视为相等</p>
</li>
<li><p>如果一个序列是另一个序列的初始子序列，则较短的序列被视为较小</p>
</li>
<li><p>对于字符串来说，字典式顺序是使用 Unicode 码位序号 对单个字符排序</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span> &lt; <span class="string">&#x27;C&#x27;</span> &lt; <span class="string">&#x27;Pascal&#x27;</span> &lt; <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) &lt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>) </span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>) &lt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt; (<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>)) &lt; (<span class="number">1</span>,<span class="number">2</span>,(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;a&#x27;</span>),<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-27</title>
    <url>/2020/09/27/2020-09-27/</url>
    <content><![CDATA[<p>今天去驾校分教练了，不得不说，华坚驾校的规范化程度是真的高（形式真的多），本以为填个表就可以了，没想到又是开班典礼，又是宣誓，校长主任的讲话，好多流程，花了一上午的时间才终于分到了教练。</p>
<p>对了，还碰到了隔壁班一个同学，被分到了同一个教练，念到了名字，我才觉得好耳熟，哈哈哈光看脸完全不认识的。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-26</title>
    <url>/2020/09/26/2020-09-26/</url>
    <content><![CDATA[<p>今天上午把三级数据库考了，前前后后也准备了挺久的，题库刷了不少，毕竟我真的不想主动报名的考试是去捐款。选择题和填空题都是题库里的题，尤其是题库里的最后一套题，非常感谢自己前一天晚上刷了那套题，否则可能真得错几个。ER图有个地方错了，但是也活该，因为ER图有的复杂联系我真的没搞明白，错了活该，但应该不会扣太多分的。最后两道大题，有信心写对了一题，至于最后一道题，看考官信息吧，哈哈。</p>
<p>总之，出考场的心情和当时考完六级差不多，自己有信心是可以过的，希望结果不会失望。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-24</title>
    <url>/2020/09/24/2020-9=09-24/</url>
    <content><![CDATA[<p>下午软件工程又被老外 cue 了，唉，真的听不懂啊。</p>
<p>自从过了四六级，英语水平直线下降，再让我去考四级肯定过不了，一次性过了四六级看来也不是什么好事，听英语课超级不耐烦。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-23</title>
    <url>/2020/09/23/2020-09-23/</url>
    <content><![CDATA[<p>班主任第一次给我们上课了，数据库，坦白说，我还是更喜欢井老师上课，喜欢听他拓展，而且井老师直率，有啥说啥的性格很可。</p>
<p>下午密码学被告知下周要开始上实验课了，也不知道密码学的实验课咋上，还以为这门课就纯理论呢，感觉很不好，网络安全和密码学学得都挺糟糕的，好多东西不懂啊，希望这两门必修课别给我挂了。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
</search>
