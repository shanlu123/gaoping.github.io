<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/11/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/21/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>关于博客搭建</title>
    <url>/2020/09/15/Blog/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="这篇文章希望记录一下我搭建Hexo博客的过程"><a href="#这篇文章希望记录一下我搭建Hexo博客的过程" class="headerlink" title="这篇文章希望记录一下我搭建Hexo博客的过程"></a>这篇文章希望记录一下我搭建Hexo博客的过程</h2><h3 id="第一步，配置GitHub"><a href="#第一步，配置GitHub" class="headerlink" title="第一步，配置GitHub"></a>第一步，配置GitHub</h3><p>登录到 github ，新建一个库，库的名称建立用自己的用户名+github.io 命名，如 jack.github.io 作为库的名称，之后部署成功之后，就可以通过 <a href="https://jack.github.io/">https://jack.github.io</a> 访问你的博客站点啦。</p>
<h3 id="第二步，安装-node环境和git代码管理工具"><a href="#第二步，安装-node环境和git代码管理工具" class="headerlink" title="第二步，安装 node环境和git代码管理工具"></a>第二步，安装 node环境和git代码管理工具</h3><p>node.js 直接在官网下载即可：<a href="https://nodejs.org/en/%EF%BC%8Cgit">https://nodejs.org/en/，git</a> 也可以自己去官网下载，我是学前端的，学习vue和node的时候就已经安装好了，git 是我们日常开发工作中托管代码必不可少的工具，有关 git 的常用命令，可以参考廖雪峰老师i教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>
<h3 id="第三步，安装-hexo-cli"><a href="#第三步，安装-hexo-cli" class="headerlink" title="第三步，安装 hexo-cli"></a>第三步，安装 hexo-cli</h3><p>我们需要全局安装 hexo-cli 搭建我们的 hexo 博客，通过npm安装，直接在终端窗口中键入 npm install –g hexo-cli。</p>
<p>接着新建一个博客目录，如直接桌面上新建一个 MyHexoBolgs 文件夹，然后进入到这个空目录下，通过 hexo init，创建一个hexo项目，或者也可以直接通过 hexo init  MyHexoBlogs 来创建，这样就不用我们手动创建博客目录了。</p>
<p>安装的过程很慢，需要耐心等待下。（当时半天安装不下来，就一直按回车键，结果还报错了，后来重新安装，并在安装过程中去网上寻找解决方法，结果在去寻找其他方式提高下载速度的过程中，发现它已经安装好了，但是速度确实挺慢的）</p>
<h3 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h3><p>在 创建好 hexo 项目后，source 目录下已经有一个 Hello world 文件，所以直接执行 hexo g ，接着启动本地服务器 hexo s ，并根据它的提示在浏览器访问 localhost：4000 既可以看到这个 hexo 博客网站以及上面的一篇 hello world 文章了。</p>
<h3 id="第五步：github-远程仓库中添加-key"><a href="#第五步：github-远程仓库中添加-key" class="headerlink" title="第五步：github 远程仓库中添加 key"></a>第五步：github 远程仓库中添加 key</h3><p>在根目录下（博客根目录文件夹）大家终端窗口，键入 ssh-keygen -t rsa -C “Github的绑定的邮箱”，一路Enter，就在 .ssh 目录下创建了一个 id_rsa_pub ，用记事本或者其他文本编辑器打开该文件，然后复制文件中的内容，并添加的我们自己的 github 仓库中。</p>
<h3 id="第六步：配置博客部署信息并托管到githhub上"><a href="#第六步：配置博客部署信息并托管到githhub上" class="headerlink" title="第六步：配置博客部署信息并托管到githhub上"></a>第六步：配置博客部署信息并托管到githhub上</h3><p>打开根目录下的 .config.yml 文件，这是 hexo 博客的配置文件，这里需要配置的 deploy 信息：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deploy：</span><br><span class="line">	type：git</span><br><span class="line">	reop：github仓库的地址，如 https:<span class="regexp">//gi</span>thub.com<span class="regexp">/jack/</span>jack.github.io</span><br><span class="line">	branch：master</span><br></pre></td></tr></table></figure>

<p>然后在博客根目录中执行 hexo clean，hexo g ，hexo d，就可以将可以部署到github上了，浏览器直接访问 <a href="https://github用户名.github.io/">https://github用户名.github.io</a> 就可以访问到自己创建的hexo 博客项目了。</p>
<p>下面就是博客的配置和美化了</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>博客配置与美化</title>
    <url>/2020/09/14/Blog/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>首先，Hexo搭配Nexo 主题的博客的简约风格是我特别喜欢的，所以这里我选择的是 Next 主题，并且这也是最多人使用的，所以配置过程中遇到问题也可以方便的找到解决方式。</p>
<p>其次，配置过程主要依赖的是Next 官方文档<a href="http://theme-next.iissnan.com/getting-started.html%EF%BC%8C">http://theme-next.iissnan.com/getting-started.html，</a>  根据文档的教程一步一步来，就可以让自己的网站有个初步的雏形了。这里我配置的Next 主题是 Gemini，即打开 最后一个的注释，其他的都加上注释，可以参考一下。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta"># scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h5 id="美化1，文章页末美化"><a href="#美化1，文章页末美化" class="headerlink" title="美化1，文章页末美化"></a>美化1，文章页末美化</h5><p>文章页末默认是一个# 标签名，这里是希望将 # 改成其他图标，在  themes/next/layout_macro/post.njk 文件中，找到 tab.name处，修改为：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">url_for</span>(<span class="name">tag.path</span>) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><span class="template-variable">&#123;&#123; <span class="name">tag.name</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>也可替换为直接喜欢的其他图标，Next使用的是 FontAwesome 图标库，可在中文官网上找到合适的图标：<a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a></p>
<h5 id="美化2：添加结束标记"><a href="#美化2：添加结束标记" class="headerlink" title="美化2：添加结束标记"></a>美化2：添加结束标记</h5><p>在文末添加 “本文结束 感谢阅读” 的标记，在 themes/next/layout_macro 目录中，新建一个 post-end-tag.swig 文件，添加以下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color:#bfbfbf;font-size:16px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>-------- 本文结束 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-</span></span></span><span class="template-variable">&#123;&#123; config.post_end_tag.icon &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span> 感谢阅读 --------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在文章布局模板中添加以下代码：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">+ &#123;% <span class="keyword">if</span> config.post_end_tag.enabled and not is_index %&#125;</span><br><span class="line">+ &lt;div&gt;</span><br><span class="line">+  &#123;% include <span class="string">&#x27;post-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">+ &lt;/div&gt;</span><br><span class="line">+ &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在站点配置文件末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章结束标记</span></span><br><span class="line"><span class="attr">post_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 是否开启文末的本文结束标记</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">snowflake-o</span> <span class="comment"># 结束标记之间的图标</span></span><br></pre></td></tr></table></figure>

<h5 id="美化3：添加看板娘"><a href="#美化3：添加看板娘" class="headerlink" title="美化3：添加看板娘"></a>美化3：添加看板娘</h5><p>在站点根目录中安装依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<p>安装模型：</p>
<p>可以去 <a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">https://blog.csdn.net/wang_123_zy/article/details/87181892</a> 中预览模型资源，然后安装自己喜欢的模型，如安装 shizuku 模型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-shizuku</span><br></pre></td></tr></table></figure>

<p>接着在站点配置文件中添加配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看板娘</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">225</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">450</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<p>重启服务器，可以看到效果，如果希望看板娘在页面的右侧，只要将 position：left 改为 right 即可。</p>
<h5 id="美化4：个性化回到顶部"><a href="#美化4：个性化回到顶部" class="headerlink" title="美化4：个性化回到顶部"></a>美化4：个性化回到顶部</h5><p>首先选择一张合适的图片放在 themes/next/source/images 目录下，并命名为 scroll.png，然后在 themes/next/source/css/main.syl 文件末尾添加：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义回到顶部样式</span></span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>;  <span class="comment">//图片素材宽度</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">900px</span>;  <span class="comment">//图片素材高度</span></span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: unset;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;/images/scroll.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//隐藏箭头图标</span></span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? calc( <span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">200px</span> ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="http://yearito.cn/posts/hexo-theme-beautify.html%EF%BC%8C%E8%AF%A5%E6%96%87%E7%AB%A0%E4%B8%AD%E7%9A%84">http://yearito.cn/posts/hexo-theme-beautify.html，该文章中的</a> hexo 版本和我搭建的 hexo 版本不同，若是有不同的，新版本的可以参考下我的配置。</p>
<p>另外，发布博客的时候，遇到了新建博客文件时，tag和categories 设置不正确的情况，需要各位注意，最后我新建博客页面都是在 _post 目录下直接创建 markdown 文件，然后在每篇文章的最前面配置，title，tags，categories等，如本片博客的配置：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: &#x27;博客配置与美化&#x27;</span><br><span class="line"><span class="keyword">tags:</span> blog</span><br><span class="line">categories: about</span><br></pre></td></tr></table></figure>

<p>在_post 的同级目录下要创建站点配置中的菜单项文件夹，比如，我的菜单配置项是这样的：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || fa fa-home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || fa fa-user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || fa fa-tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || fa fa-th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || fa fa-archive</span><br><span class="line"><span class="symbol">  schedule:</span> <span class="meta-keyword">/schedule/</span> || fa fa-calendar</span><br><span class="line"><span class="symbol">  school:</span> <span class="meta-keyword">/school/</span> || fa fa-graduation-cap</span><br><span class="line"><span class="symbol">  tree_hole:</span> /tree_hole/ || fa fa-tree</span><br><span class="line"><span class="symbol">  photos:</span> <span class="meta-keyword">/photos/</span> || fa fa-camera</span><br><span class="line"><span class="symbol">  movies:</span> <span class="meta-keyword">/movies/</span> || fa fa-film</span><br><span class="line"><span class="symbol">  musics:</span> <span class="meta-keyword">/musics/</span> || fa fa-music</span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="symbol">menu_settings:</span></span><br><span class="line"><span class="symbol">  icons:</span> true</span><br><span class="line"><span class="symbol">  badges:</span> false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么 _post 同级目录下，就需要创建 hoem，about，tags等文件夹，直接通过在博客根目录中执行  ” hexo new page 文件夹名 “ 就可以创建目录，然后在每个目录下会自动生成 index.md  文件，在该文件中要配置 type 属性，如about 目录中的 index.md 文件中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">&#x27;2020-9-12&#x27;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;about&#x27;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span> <span class="comment"># 该分类不显示评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>最后，这个静态博客还有很多不完善的地方，比如，托管在 github 上速度太慢，于是我通过 gulp 做了静态资源的打包压缩，但访问依然还是很慢，日后我会将它部署到 gitee 上试试。hexo 搭建的博客还可以进行 CDN 的加速，但是新版本的CDN加速似乎和之前版本的配置不太一样，这里我配置过程中，遇到了一些问题，日后全部解决了再分享出来。</p>
<p>最后的最后，本站已经开启评论功能，欢迎大家多多指正。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>v-if 和 v-show 区别</title>
    <url>/2020/11/08/vue.js%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/v-if%20%E5%92%8C%20v-show/</url>
    <content><![CDATA[<p>博客园：<a href="https://www.cnblogs.com/shanlu0000/p/13455491.html">https://www.cnblogs.com/shanlu0000/p/13455491.html</a></p>
<h2 id="v-if-和-v-show-区别"><a href="#v-if-和-v-show-区别" class="headerlink" title="v-if 和 v-show 区别"></a>v-if 和 v-show 区别</h2><ol>
<li><p>作用原理：</p>
<ul>
<li>v-if指令完全根据表达式的值在DOM中生成或移除一个元素，v-if 表达式赋值为 false，对应的元素就会从DOM中移除，否则 对应元素的一个克隆将被重新插入DOM中。v-if 是真实的条件渲染，因为它会确保条件块再切换时合适的销毁与重建条件快内的事件监听器和子组件</li>
<li>v-show 指令是根据表达式的值来显示或者隐藏HTML元素，v-show 赋值为 false时，元素被隐藏（display：none）</li>
</ul>
</li>
<li><p>对 templat 标签的支持</p>
<ul>
<li>v-if 支持使用  template 元素作为包装元素，在template上使用 v-if，最终渲染结果不会包含它</li>
<li>v-show 不支持 tempalte 语法</li>
</ul>
</li>
<li><p>对 v-else 支持</p>
<ul>
<li><p>v-if 支持和 v-else 一起使用</p>
</li>
<li><p>v-show 用在组件上时，因为指令的优先级 v-else会出现问题，所以一般不将 v-else 和 v-show一起使用，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;custom-component v-show=<span class="string">&quot;condition&quot;</span>&gt;&lt;/custom-component&gt;</span><br><span class="line">&lt;p v-<span class="keyword">else</span>&gt; 这可能是一个组件&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法是：用另一个 v-show 替换 v-else</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;custom-component v-show=<span class="string">&quot;condition&quot;</span>&gt;&lt;/custom-component&gt;</span><br><span class="line">&lt;p v-show=<span class="string">&quot;!condition&quot;</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>v-if 是惰性的，初始渲染条件为假，则什么也不做，条件第一次为真时才开始局部编译（编译会被缓存起来）</p>
</li>
<li><p>v-show，元素始终被编译并保留，只是简单的基于CSS切换</p>
</li>
<li><p>代价上：</p>
<ul>
<li>v-if 有更高的切换消耗</li>
<li>v-show 有更高的初始渲染消耗</li>
</ul>
</li>
<li><p>恰当使用</p>
<ul>
<li>若需要频繁切换，使用 v-show 更好</li>
<li>如果在运行时条件不大可能改变，使用 v-if 更好</li>
</ul>
</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>读书笔记--《vue.js权威指南》</category>
      </categories>
      <tags>
        <tag>《vue.js权威指南》</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序构建npm并安装vant-weapp包</title>
    <url>/2020/10/24/miniprogram-debating/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%84%E5%BB%BAnpm/</url>
    <content><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>在开发者工具中新建小程序项目后，终端进入项目根目录中，执行 npm init -y 初始化仓库，仓库中就有 package.json文件了</p>
</li>
<li><p>终端中执行 npm i @vant/weapp -S –production，安装 vant-weapp 包</p>
</li>
<li><p>点击开发者工具中的 工具-构建npm，构建成功后，根目录中会看到一个miniprogram_npm这个文件夹</p>
</li>
<li><p>将 app.json中的 “style”:”v2” 去除，小程序的新版基础组件强行加上了许多样式，不关闭将造成部分组件样式混乱</p>
</li>
<li><p>在 index.json中引入 Button 组件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;van-button&quot;</span>: <span class="string">&quot;@vant/weapp/button/index&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 index.wxml中使用Button组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>构建成功：</p>
<img src="C:\Users\高萍\Desktop\MyHexoBlogs\myblogs\source\_posts\miniprogram-debating\截图\小程序构建npm.jpg" alt="https://wx3.sinaimg.cn/mw690/007gSPK8gy1gk0ppna3lkj309q0h9q2v.jpg" style="zoom: 67%;" />

</li>
</ol>
<p>小程序npm支持：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/npm.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/npm.html</a></p>
<p>vant-weapp：<a href="http://vant-contrib.gitee.io/vant-weapp/#/quickstart">http://vant-contrib.gitee.io/vant-weapp/#/quickstart</a></p>
<h3 id="自定义方式构建-Npm："><a href="#自定义方式构建-Npm：" class="headerlink" title="自定义方式构建 Npm："></a>自定义方式构建 Npm：</h3><ol>
<li><p>以上使用的是小程序默认的构建 npm 的方式</p>
</li>
<li><p>小程序也可以通过自定义node_modules 和 miniprogram_npm位置来构建npm，只需要在项目根目录中的project.config.json 文件中指定 node_modules 的位置和目标 miniprogram_npm  的位置。</p>
</li>
<li><p>若使用自定义构建方式，配置 setting.packNpmManually 为 true，以及 setting.packNpmRelationList 项，指定packageJsonPath（node_modules源对应的package.json) 和 miniprogramNpmDisDir（node_modules的构建结果目标位置)的位置，如：</p>
<p>构建npm前项目目录为：</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-tag">miniprogram</span></span><br><span class="line">│   ├── <span class="selector-tag">app</span><span class="selector-class">.js</span></span><br><span class="line">│   ├── <span class="selector-tag">app</span><span class="selector-class">.json</span></span><br><span class="line">│   ├── <span class="selector-tag">app</span><span class="selector-class">.wxss</span></span><br><span class="line">│   ├── <span class="selector-tag">index</span></span><br><span class="line">│   ├── <span class="selector-tag">sitemap</span><span class="selector-class">.json</span></span><br><span class="line">│   └── <span class="selector-tag">sub_package</span></span><br><span class="line">│       └── <span class="selector-tag">sub_package_page</span></span><br><span class="line">├── <span class="selector-tag">project</span><span class="selector-class">.config</span><span class="selector-class">.json</span></span><br><span class="line">├── <span class="selector-tag">src_node_modules_1</span></span><br><span class="line">│   ├── <span class="selector-tag">node_modules</span></span><br><span class="line">│   └── <span class="selector-tag">package</span><span class="selector-class">.json</span></span><br><span class="line">└── <span class="selector-tag">src_node_modules_2</span></span><br><span class="line">    ├── <span class="selector-tag">node_modules</span></span><br><span class="line">    └── <span class="selector-tag">package</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>project.config.json 配置为：</p>
<blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;setting&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;packNpmManually&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;packNpmRelationList&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;packageJsonPath&quot;</span>: <span class="string">&quot;./src_node_modules_1/package.json&quot;</span>,</span><br><span class="line">      <span class="string">&quot;miniprogramNpmDistDir&quot;</span>: <span class="string">&quot;./miniprogram/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;packageJsonPath&quot;</span>: <span class="string">&quot;./src_node_modules_2/package.json&quot;</span>,</span><br><span class="line">      <span class="string">&quot;miniprogramNpmDistDir&quot;</span>: <span class="string">&quot;./miniprogram/sub_package&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>那么，构建npm后的项目目录为：</p>
<blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── miniprogram</span><br><span class="line">│   ├── app.js</span><br><span class="line">│   ├── app.json</span><br><span class="line">│   ├── app.wxss</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── miniprogram_npm <span class="comment">// 由 src_node_modules_1/node_modules 构建得到</span></span><br><span class="line">│   ├── sitemap.json</span><br><span class="line">│   └── sub_package</span><br><span class="line">│       ├── miniprogram_npm <span class="comment">// 由 src_node_modules_2/node_modules 构建得到</span></span><br><span class="line">│       └── sub_package_page</span><br><span class="line">├── project<span class="selector-class">.config</span>.json</span><br><span class="line">├── src_node_modules_1</span><br><span class="line">│   ├── node_modules</span><br><span class="line">│   └── package.json</span><br><span class="line">└── src_node_modules_2</span><br><span class="line">    ├── node_modules</span><br><span class="line">    └── package.json</span><br></pre></td></tr></table></figure>

<p>miniprogram_npm的位置取决于配置的 packNpmRelationList 值</p>
</blockquote>
</li>
<li><p>使用小程序代码管理工具将项目代码提交的 远程仓库中：<a href="https://www.oschina.net/news/99140/mini-program-gitee">https://www.oschina.net/news/99140/mini-program-gitee</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>miniprogram-debating</category>
      </categories>
      <tags>
        <tag>miniprogram-debating</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序构建npm并安装vant-weapp包</title>
    <url>/2020/10/24/miniprogram-debating/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8Fswiper%E7%BB%84%E4%BB%B6%E9%AB%98%E5%BA%A6%E5%9B%BA%E5%AE%9A%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/c812d3cf3c6c">https://www.jianshu.com/p/c812d3cf3c6c</a></p>
]]></content>
      <categories>
        <category>miniprogram-debating</category>
      </categories>
      <tags>
        <tag>miniprogram-debating</tag>
      </tags>
  </entry>
  <entry>
    <title>v-for 指令 </title>
    <url>/2020/11/09/vue.js%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/v-model%E6%8C%87%E4%BB%A4%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<p>博客园：</p>
]]></content>
      <categories>
        <category>读书笔记--《vue.js权威指南》</category>
      </categories>
      <tags>
        <tag>《vue.js权威指南》</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾回收</title>
    <url>/2020/10/05/python/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ol>
<li><p>在程序中没有被引用的对象就是垃圾，这种垃圾对象过多会影响到程序运行的性能，因此必须进行垃圾回收，所谓的垃圾回收及时将垃圾对象从内存中删除</p>
</li>
<li><p>python中有自动垃圾回收机制，会自动将这些被引用的对象删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;A类&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># del是一个特殊方法，它会在对象被垃圾回收前调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A()对象被删除了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a.name)</span><br><span class="line"></span><br><span class="line">input(<span class="string">&#x27;回车键退出...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A类</span></span><br><span class="line"><span class="string">回车键退出...</span></span><br><span class="line"><span class="string">A()对象被删除了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据类型</title>
    <url>/2020/10/01/python/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>python中的数据类型指的是变量的值的类型</li>
</ul>
<h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><ol>
<li><p>分为三种：整数，浮点数，复数</p>
</li>
<li><p>python中所有的整数都是int类型， python中所有的小数都是 flota类型</p>
</li>
<li><p>python中的整数的大小没有限制，可以是一个无限大的整数</p>
</li>
<li><p>对浮点数进行运算，可能得到一个不精确结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">0.1</span> + <span class="number">0.2</span>  <span class="comment"># 0.30000000000000004</span></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果数字的长度过大，可以使用下划线作为分隔符 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">123</span>_456_789</span><br><span class="line">print(c)  <span class="comment"># 123456789</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意，10进制数字不能以0开头，如，不能写0123，其他进制的整数，打印数字时以十进制显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制 0b开头</span></span><br><span class="line">a = <span class="number">0b10</span>  <span class="comment"># 二进制的10</span></span><br><span class="line"><span class="comment"># 八进制 0o开头</span></span><br><span class="line">b = <span class="number">0o10</span></span><br><span class="line"><span class="comment"># 十六进制 0x开头</span></span><br><span class="line">c = <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a=&quot;</span>, a, <span class="string">&quot;b=&quot;</span>, b, <span class="string">&quot;c=&quot;</span>, c)  <span class="comment"># a= 2 b= 8 c= 16</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol>
<li><p>python中字符串用引号引起来，单引号或者双引号，但是相同的引号之间不能嵌套，如双引号中不能嵌套双引号</p>
</li>
<li><p>对于长字符串，引号不能跨行使用，可以用反斜杠</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;锄禾日当午，\</span></span><br><span class="line"><span class="string">汗滴禾下土，\</span></span><br><span class="line"><span class="string">谁知盘中餐，\</span></span><br><span class="line"><span class="string">粒粒皆辛苦&#x27;</span></span><br><span class="line">print(s) <span class="comment"># 锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用三重引号（三个单引号或三个双引号）也可以表示一个长的字符串，三重引号可以换行，也可以保留字符串中的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;&#x27;&#x27;锄禾日当午，</span></span><br><span class="line"><span class="string">汗滴禾下土，</span></span><br><span class="line"><span class="string">谁知盘中餐，</span></span><br><span class="line"><span class="string">粒粒皆辛苦&#x27;&#x27;&#x27;</span></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">锄禾日当午，</span></span><br><span class="line"><span class="string">汗滴禾下土，</span></span><br><span class="line"><span class="string">谁知盘中餐，</span></span><br><span class="line"><span class="string">粒粒皆辛苦</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>转义字符， &#39;，  &quot;，  \t，  \n,   \表示 \  ，    \uxxxx，表示unicode编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;子曰:\&quot;学而时习之，\\\\n不亦说乎！\&quot;&quot;</span></span><br><span class="line">s = <span class="string">&#x27;\u2270&#x27;</span></span><br><span class="line">print(a)  <span class="comment"># 子曰:&quot;学而时习之，\\n不亦说乎！&quot;</span></span><br><span class="line">print(s)  <span class="comment"># $ </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串复制：将字符串和数字相乘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">a = a * <span class="number">2</span></span><br><span class="line">print(a)  <span class="comment"># abcabc</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul>
<li><p>布尔值主要用来做逻辑判断，一共两个值，True和False</p>
</li>
<li><p>布尔值实际上也属于整型，True相当于1，False相当于0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">1</span> + <span class="literal">False</span>)  <span class="comment"># 1</span></span><br><span class="line">print(<span class="number">1</span> + <span class="literal">True</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><ul>
<li><p>None，空值，表示不存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="literal">None</span></span><br><span class="line">print(type(b))  <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol>
<li><p>列表是python中的一个对象</p>
</li>
<li><p>数值只能保存一个单一的数据，列表中可以保存多个有序的数据</p>
</li>
<li><p>列表的创建：通过[] 创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = []  <span class="comment"># 创建了一个空列表</span></span><br><span class="line">print(list, type(list))  <span class="comment"># [] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个列表中可以存储多个元素，也可以在创建列表时，指定列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">5</span>]  <span class="comment"># 创建一个包含5个元素的列表</span></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]  <span class="comment"># 创建了一个有5个元素的列表</span></span><br><span class="line">print(list)  <span class="comment"># [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表中可以保存任意的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="literal">True</span>, <span class="literal">None</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="keyword">print</span>]</span><br><span class="line">print(list)  <span class="comment"># [10, &#x27;hello&#x27;, True, None, [1, 2, 3], &lt;built-in function print&gt;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过索引获取列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(list[<span class="number">4</span>])  <span class="comment"># 50</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取列表的长度，len()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(len(list))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<ol start="8">
<li><p>+，将两个列表拼接为一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list)  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>’ * ‘，将列表重复指定次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] * <span class="number">2</span></span><br><span class="line">print(list)  <span class="comment"># [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>in 和 not in ，检查指定元素是否存在于列表中，返回True或false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> list)  <span class="comment"># False</span></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> list)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>min() 获取列表中最小值， max() 获取列表中最大值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(min(list), max(list))  <span class="comment"># 10 50</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index() 获取元素在列表中第一次出现的索引，如果获取了列表中没有的元素，报异常ValueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(list.index(<span class="number">10</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># index()的第二个参数，表示查找的起始位置 ， 第三个参数，表示查找的结束位置</span></span><br><span class="line">print(list.index(<span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 如果要获取列表中没有的元素，会抛出异常</span></span><br><span class="line">print(list.index(<span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>))  <span class="comment"># ValueError: 10 is not in list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意对于不可变序列，无法通过索引来修改</span></span><br><span class="line">s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># s[1] = &#x27;a&#x27; </span></span><br><span class="line"><span class="comment"># TypeError: &#x27;str&#x27; object does not support item assignment</span></span><br><span class="line"></span><br><span class="line">s = list(s)  <span class="comment"># 可以通过 list() 函数将其转换为列表进行修改</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">print(s)  <span class="comment"># [&#x27;h&#x27;, &#x27;a&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>count() , 统计指定元素在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(list.count(<span class="number">50</span>)) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列表</p>
<ul>
<li><p>直接通过索引修改列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[<span class="number">0</span>] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">list[<span class="number">2</span>] = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">print(list)  <span class="comment"># [&#x27;hello&#x27;, 20, &#x27;world&#x27;, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过切片修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;wrold&#x27;</span>]  <span class="comment"># 使用新的元素替换旧元素, 注意在给切片进行赋值时，只能使用序列</span></span><br><span class="line"><span class="comment"># [&#x27;hello&#x27;, &#x27;wrold&#x27;, 30, 40, 50]</span></span><br><span class="line">list[<span class="number">0</span>:<span class="number">0</span>] = [<span class="string">&#x27;abc&#x27;</span>]  <span class="comment"># 向索引为0的位置插入元素</span></span><br><span class="line"><span class="comment"># [&#x27;abc&#x27;, &#x27;hello&#x27;, &#x27;wrold&#x27;, 30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[::<span class="number">2</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]  <span class="comment"># 当设置了步长时，序列中元素的个数必须和切片中元素的个数一致</span></span><br><span class="line">print(list)  <span class="comment"># [&#x27;a&#x27;, 20, &#x27;b&#x27;, 40, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 del 删除列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">2</span>]  <span class="comment"># 删除索引为2的元素</span></span><br><span class="line">print(list)  <span class="comment"># [10, 20, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过切片删除元素        </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment"># [30, 40, 50]</span></span><br><span class="line"><span class="keyword">del</span> list[::<span class="number">2</span>]  <span class="comment"># [40]</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[<span class="number">1</span>:<span class="number">3</span>] = []  <span class="comment"># [10, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表的切片操作</p>
<ul>
<li><p>语法：列表[起始:结束] </p>
</li>
<li><p>通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素，左闭右开</p>
</li>
<li><p>切片指从现有列表中获取子列表，返回一个新的列表，不会影响原来的列表</p>
</li>
<li><p>索引是负数，从后往前获取元素，-1表示倒数第一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>, <span class="string">&#x27;李明&#x27;</span>]</span><br><span class="line">print(list[<span class="number">-2</span>])  <span class="comment"># 李华</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>起始位置和结束位置可以省略不写，全部省略时，相当于创建了一个列表的副本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>, <span class="string">&#x27;李明&#x27;</span>]</span><br><span class="line">print(list[<span class="number">1</span>:])  <span class="comment"># [&#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;李明&#x27;]</span></span><br><span class="line">print(list[:<span class="number">3</span>])  <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]</span></span><br><span class="line">print(list[:])  <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;李明&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>步长：</p>
<ul>
<li><p>语法：列表[起始:结束:步长] </p>
</li>
<li><p>表示每次获取元素的间隔，默认值是1，隔一个取一个，</p>
</li>
<li><p>步长可以是负数，负数则从后往前取，步长不能是0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>, <span class="string">&#x27;李明&#x27;</span>]</span><br><span class="line">print(list[<span class="number">0</span>::<span class="number">3</span>])  <span class="comment"># [&#x27;张三&#x27;, &#x27;李华&#x27;]</span></span><br><span class="line">print(list[::<span class="number">-1</span>])  <span class="comment"># [&#x27;李明&#x27;, &#x27;李华&#x27;, &#x27;王五&#x27;, &#x27;李四&#x27;, &#x27;张三&#x27;]</span></span><br><span class="line">print(list[::<span class="number">0</span>])  <span class="comment"># ValueError: slice step cannot be zero</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol>
<li><p>类型转换不是改变对象本身类型，不会对原来的变量有影响，而是将一个类型的对象转换为其他对象，是根据当前对象的值创建一个新对象</p>
</li>
<li><p>int() 将其他对象转换为整型，</p>
<ol>
<li><p>True转换为1，False转换为0</p>
</li>
<li><p>浮点数直接取整</p>
</li>
<li><p>合法的字符串直接转换为对应的数字，不合法的字符串报错ValueError</p>
</li>
<li><p>其他不可转换为整型的对象，抛出异常TypeError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">a = int(a)</span><br><span class="line"></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line">b = int(b)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">c = int(c)</span><br><span class="line"></span><br><span class="line">d = <span class="number">11.6</span></span><br><span class="line">d = int(d)</span><br><span class="line">print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span>)  <span class="comment"># a=1,b=0,c=123,d=11</span></span><br><span class="line"><span class="comment"># e = &#x27;11.5&#x27;</span></span><br><span class="line"><span class="comment"># e = int(e) #ValueError: invalid literal for int() with base 10: &#x27;11.5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f = None</span></span><br><span class="line"><span class="comment"># f = int(f) #TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;NoneType&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>float()，将其他对象转换为浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = float(a)</span><br><span class="line"></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line">b = float(b)</span><br><span class="line">print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>&#x27;</span>) <span class="comment">#a=1.0,b=0.0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>str()，将其他对象转化成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">print(type(a))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>bool()，将对象转换为布尔值，任何对象都可以转换为布尔值，所有表示空性的都是False（表示空性，0，None，” “），其它的转换为True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br><span class="line">a = bool(a)</span><br><span class="line">print(a) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><ol>
<li><p>类型检查：type(),  会将检查的结果作为返回值返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(<span class="number">1</span>))  <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">print(type(<span class="number">1.5</span>))  <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line">print(type(<span class="literal">True</span>))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line">print(type(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">print(type(<span class="literal">None</span>))  <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型</title>
    <url>/2020/09/20/python/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h3><ul>
<li>数值型：整数，小数（定点数，浮点数）</li>
<li>字符型：较短的文本(char，varchar)，较长的文本：text，blob(较长的二进制数据)</li>
<li>日期型</li>
</ul>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul>
<li><p>分类：tinyint（1字节)，smallint（2字节)，mediumint（3字节)，int/integer（4字节)，bigint（8字节)</p>
</li>
<li><p>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加 unsigned 关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">	t2 <span class="built_in">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#t1列只能插入正数，t2列可以插入正数或负数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果插入的数值超出了整型的范围，会报 out of range 异常</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#报out of range 异常</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span>(<span class="number">4</span>),</span><br><span class="line">	t2 <span class="built_in">INT</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_int <span class="keyword">VALUES</span>(<span class="number">2147483648</span>,<span class="number">4294967296</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不设置长度，会有默认的长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span>,</span><br><span class="line">	t2 <span class="built_in">INT</span> </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认长度是11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配 zerofill 使用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_int(</span><br><span class="line">	t1 <span class="built_in">INT</span>(<span class="number">3</span>) ZEROFILL,</span><br><span class="line">	t2 <span class="built_in">INT</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_int <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入值是001，2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><ul>
<li><p>分类：</p>
<ul>
<li><p>浮点型：float(M,D)，double(M，D)</p>
</li>
<li><p>定点型：dec(M,D)，decimal(M，D)</p>
</li>
<li><p>M：整数部位+小数部位，D：小数部位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_float(</span><br><span class="line">	f1 <span class="built_in">FLOAT</span>(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line">	f2 <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">3</span>),</span><br><span class="line">	f3 <span class="built_in">DECIMAL</span>(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#f1小数部分3位，整数部分1位</span></span><br><span class="line"><span class="comment">#f1 1.46，f2 12.400，f3 12.00</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">1.456</span>,<span class="number">12.4</span>,<span class="number">12</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">#f2小数部分3位，整数部分3位</span></span><br><span class="line"><span class="comment">#f2 out of range 异常</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">12.64</span>,<span class="number">123.456</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#f3小数部分2位，整数部分2位</span></span><br><span class="line"><span class="comment">#f1 12.60，f2 12.456，f3 12.56</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">12.6</span>,<span class="number">12.456</span>,<span class="number">12.56</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>M,D 可以省略，若是decimal，M默认是10，D默认是0；若是float或double，会根据插入值决定精度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_float(</span><br><span class="line">	f1 <span class="built_in">FLOAT</span>,</span><br><span class="line">	f2 <span class="keyword">DOUBLE</span>,</span><br><span class="line">	f3 <span class="built_in">DECIMAL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">123.4</span>,<span class="number">123.4</span>,<span class="number">123</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_float <span class="keyword">VALUES</span>(<span class="number">12345.6</span>,<span class="number">123.456</span>,<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定点型的精度较高，若要求插入数值精度较高如货币运算等考虑使用定点型存储</p>
</li>
</ul>
</li>
</ul>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ul>
<li><p>用来保存mysql中较短的字符串：char，varchar</p>
</li>
<li><p>char 和 varchar</p>
<ul>
<li>char，CHAR(M)，M是最大的字符数，可以省略，默认为1；固定长度的字符；耗费空间；效率高</li>
<li>varchar，VARCHAR(M)，M是最大的字符数，不可以省略；可变长度的字符；节省空间；效率低</li>
</ul>
</li>
<li><p>binary 和 varbinary 用于保存较短的二进制字符串</p>
</li>
<li><p>enum 用于保存枚举，要求插入的值必须属于列表中指定的值之一。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_char(</span><br><span class="line">   c1 ENUM(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>); <span class="comment">#插入值是a</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;m&#x27;</span>); <span class="comment">#m无法插入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>set 用于保存集合，里面可以保存 0~64个成员。和Enum类型的区别是，SET类型一次可以选取多个成员，而Enum只能选一个。根据成员个数不同，存储所占的字节也不同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_char(</span><br><span class="line">	s1 <span class="keyword">SET</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;A,B&#x27;</span>); <span class="comment">#插入值是a,b</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a,c,d&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>较长的文本：text，blob(较大的二进制)</p>
</li>
</ul>
<h3 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h3><ul>
<li><p>分类：</p>
<ul>
<li><p>DATE：4个字节，只保存日期，1000-01-01 ~ 9999-12-31</p>
</li>
<li><p>TIME：3个字节，只保存时间，-838:59:59 ~ 838:59:59</p>
</li>
<li><p>YEAR：只保存年,1个字节，1901 ~ 2155</p>
</li>
<li><p>DATETIME和TIMESTAMP</p>
<ul>
<li>都是保存日期和时间</li>
<li>DATETIME ,8个字节，1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 ，不受时区影响</li>
<li>TIMESTAMP，4个字节，19700101080001（2038年的某个时刻），受时区影响，受mysql版本和sqlMode的影响大。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_date(</span><br><span class="line">	t1 DATETIME,</span><br><span class="line">	t2 <span class="built_in">TIMESTAMP</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_date <span class="keyword">VALUES</span>(<span class="keyword">NOW</span>(),<span class="keyword">NOW</span>());</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;time_zone&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">time_zone</span>=<span class="string">&#x27;+9:00&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_date; <span class="comment"># t2列提前了1h</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>文件</title>
    <url>/2020/10/04/python/%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><ol>
<li><p>使用 open() 函数打开一个文件</p>
</li>
<li><p>open(file, mode=’r’, buffering=-1, encoding_=None, errors=None, newline=None, closefd=True, opener=None)</p>
</li>
<li><p>返回一个对象，这个对象就代表了当前打开的文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在windows系统使用路径时，可以使用/来代替 \</span></span><br><span class="line"><span class="comment"># 或者可以使用 \\ 来代替 \, file_name = &#x27;hello\\demo.txt&#x27;</span></span><br><span class="line"><span class="comment"># 或者也可以使用原始字符串,   r&#x27;hello\demo.txt&#x27;</span></span><br><span class="line">file_name = <span class="string">&#x27;hello/demo.txt&#x27;</span></span><br><span class="line">file_obj = open(file_name)  # 打开 file_name 对应的文件</span><br><span class="line"><span class="builtin-name">print</span>(file_obj)  # &lt;_io.TextIOWrapper <span class="attribute">name</span>=<span class="string">&#x27;hello/demo.txt&#x27;</span> <span class="attribute">mode</span>=<span class="string">&#x27;r&#x27;</span> <span class="attribute">encoding</span>=<span class="string">&#x27;cp936&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><ol>
<li><p>当获取了文件对象后，所有对文件的操作都应该通过文件对象来进行</p>
</li>
<li><p>通过 close() 来关闭文件</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">file_name</span> = &#x27;<span class="built_in">demo</span>.txt&#x27;</span><br><span class="line">file_obj = open(<span class="built_in">file_name</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">content</span> = file_obj.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">content</span>)</span><br><span class="line"></span><br><span class="line">file_obj.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>with …  as  语句，在 with 语句中可以直接使用 file_obj 来进行文件操作，此时这个文件只能在 with 中使用，一旦 with 结束则文件会自动 close()</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_obj:</span><br><span class="line">    print(file_obj.<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><ol>
<li><p>调用open() 来打开一个文件，可以将文件分成两种类型，一种是纯文本文件，另一种是二进制文件（图片，mp3，ppt等这些文件），open() 打开文件时，默认是以纯文本文件的形式打开的，但是 open() 默认的编码 为 None，所以处理文本文件时，必须要指定文件的编码</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">file_name</span> = &#x27;<span class="built_in">demo</span>.txt&#x27;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    with open(<span class="built_in">file_name</span>, encoding=&#x27;utf-<span class="number">8</span>&#x27;) as file_obj:</span><br><span class="line">        <span class="built_in">content</span> = file_obj.<span class="built_in">read</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">content</span>)</span><br><span class="line">        <span class="built_in">print</span>(len(<span class="built_in">content</span>))</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(f&#x27;&#123;<span class="built_in">file_name</span>&#125; 这个文件不存在！&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取模式，t 读取文本文件（默认值），b  读取二进制文件；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">file_name = &#x27;C:/Users/高萍/Videos/4.mp4&#x27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    <span class="comment"># 读取文本文件时，size是以字符为单位的</span></span><br><span class="line">    <span class="comment"># 读取二进制文件时，size是以字节为单位</span></span><br><span class="line">    print(file_obj.read(<span class="number">100</span>))</span><br><span class="line">    new_file_name = <span class="string">&#x27;5.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">open</span>(new_file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> new_file_obj:</span><br><span class="line">        <span class="comment"># 定义每次读取的大小</span></span><br><span class="line">        <span class="keyword">chunk</span> = <span class="number">1024</span> * <span class="number">100</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 从已有的对象中读取数据</span></span><br><span class="line">            <span class="keyword">content</span> = file_obj.read(<span class="keyword">chunk</span>)</span><br><span class="line">            <span class="comment"># 内容读取完毕，终止循环</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">content</span>:</span><br><span class="line">                break</span><br><span class="line">            <span class="comment"># 将读取到的数据写入到新对象中</span></span><br><span class="line">            new_file_obj.write(<span class="keyword">content</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取文件内容，read()，它会将文件内容全部保存为一个字符串返回</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">file_name</span> = &#x27;<span class="built_in">demo</span>.txt&#x27;</span><br><span class="line">file_obj = open(<span class="built_in">file_name</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">content</span> = file_obj.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">content</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果直接调用 read() ，会将文本文件的所有内容一次性全部读取出来，如果要读取的文件较大的话，一次性将文件的内容全部加载到内存中，容易导致内存泄露，所以对于较大的文件，不要调用 read()</p>
</li>
<li><p>read() 可以接收一个 size 参数，用来指定要读取的字符的数量，默认值为-1，读取文件中的所有字符，可以为 size 指定值，这样read() 会读取指定数量的字符，每一次读取都是从上次读取到的位置开始读取的。如果字符的数量小于size，则会读取所有剩余字符，如果已经读取到了文件最后，则会返回 ‘’ 字符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">file_name = &#x27;demo.txt&#x27;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">open</span>(file_name, <span class="keyword">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        file_content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">chunk</span> = <span class="number">100</span>  <span class="comment"># 定义一个变量，来指定每次读取的大小</span></span><br><span class="line">        <span class="comment"># 创建一个循环来读取文件内容</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">content</span> = file_obj.read(<span class="keyword">chunk</span>)  <span class="comment"># 读取chunk大小的内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">content</span>:  <span class="comment"># 检查是否读取到了内容</span></span><br><span class="line">                break  <span class="comment"># 内容读取完毕，退出循环</span></span><br><span class="line">            file_content += <span class="keyword">content</span></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    print(f<span class="string">&#x27;&#123;file_name&#125; 这个文件不存在！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(file_content)</span><br></pre></td></tr></table></figure>
</li>
<li><p>readline()，可以用来读取一行内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import pprint</span><br><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">with open(file_name, <span class="attribute">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>) as file_obj:</span><br><span class="line">    <span class="builtin-name">print</span>(file_obj.readline())</span><br><span class="line">    <span class="builtin-name">print</span>(file_obj.readline())</span><br><span class="line">    <span class="builtin-name">print</span>(file_obj.readline())</span><br></pre></td></tr></table></figure>
</li>
<li><p>readlines()，用于一行一行的读取内容，一次性将读取到的内容封装到一个列表中返回</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">import pprint</span><br><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">with<span class="meta"> open(</span>file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="meta">as</span> file_obj:</span><br><span class="line">    r = file_obj.readlines()</span><br><span class="line">    pprint.pp<span class="meta">rint(</span>r[0])</span><br><span class="line">    pprint.pp<span class="meta">rint(</span>r[1])</span><br><span class="line">    pprint.pp<span class="meta">rint(</span>r[2])</span><br></pre></td></tr></table></figure>
</li>
<li><p>seek() 可以修改当前读取的位置，需要两个参数，第一个参数是要切换到的位置，第二个参数是计算位置方式（0：从头计算，默认值；1：从当前位置计算；2：从最后位置开始计算）</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    <span class="comment"># file_obj.seek(55)</span></span><br><span class="line">    <span class="comment"># file_obj.seek(80, 0)</span></span><br><span class="line">    <span class="comment"># file_obj.seek(70, 1)</span></span><br><span class="line">    file_obj.<span class="built_in">seek</span>(<span class="number">-10</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(file_obj.<span class="built_in">read</span>())</span><br><span class="line">    print(<span class="string">&#x27;当前读取到了 --&gt;&#x27;</span>, file_obj.tell()) <span class="comment"># tell() 用来查看当前读取的位置</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h3><ol>
<li><p>使用open() 打开文件时必须要指定打开文件所要做的操作（读，写，追加），如果不指定操作类型，默认是 读取文件</p>
<ul>
<li>r 表示只读；</li>
<li>w表示可写的，如果文件不存在会创建文件，文件存在则会覆盖原来文件中的所有内容</li>
<li>a 表示追加内容，文件不存在会创建文件，文件存在则会向文件中追加内容</li>
<li>x 用来新建文件，文件不存在则创建，存在则报错</li>
<li>“ + “ 为操作符增加功能，如 r+ 可读可写，文件不存在会报错，w+，a+等</li>
</ul>
</li>
<li><p>write() 向文件中写入内容，如果操作的是一个文本文件的话，则 write() 需要传递一个字符串作为参数。该方法可以分多次向文件中写入内容，返回写入的字符的个数</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    file_obj.<span class="built_in">write</span>(<span class="string">&#x27;aaa\n&#x27;</span>)</span><br><span class="line">    file_obj.<span class="built_in">write</span>(<span class="string">&#x27;bbb\n&#x27;</span>)</span><br><span class="line">    file_obj.<span class="built_in">write</span>(<span class="string">&#x27;ccc\n&#x27;</span>)</span><br><span class="line">    r = file_obj.<span class="built_in">write</span>(str(<span class="number">123</span>) + <span class="string">&#x27;123123\n&#x27;</span>)</span><br><span class="line">    print(r)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文件的其他操作"><a href="#文件的其他操作" class="headerlink" title="文件的其他操作"></a>文件的其他操作</h3><ol>
<li>os.listdir()，获取指定目录的目录结构，需要一个路径作为参数，会获取到该路径下的目录结构，某人路径为当前目录。返回一个列表，目录中的每一个文件(夹) 的名字都是列表中的一个元素</li>
<li>os.getcwd()，获取当前所在的目录</li>
<li>os.chdir()，切换当前所在的目录，相当于 cd</li>
<li>os.mkdir( ‘目录名’ )，创建目录</li>
<li>os.rmdir( ‘目录名’ )，删除目录</li>
<li>os.remove( ‘文件名’ )，删除文件</li>
<li>os.rename( ‘旧的文件名’，’新的文件名’ )，对文件重命名，也可以用来移动一个文件</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制语句</title>
    <url>/2020/09/26/python/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">and</span> age &lt; <span class="number">30</span>:</span><br><span class="line">    print(<span class="string">&#x27;已成年&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">30</span> <span class="keyword">and</span> age &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&#x27;中年&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&#x27;已退休&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> (x % <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;输入的是偶数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;输入的是奇数&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>可以有0个或多个 elif 部分，以及一个可选的 else 部分，关键字 ‘elif’ 是 ‘else if ‘ 的缩写。</li>
<li>一个if…elif..elif…序列可以看做其他语言中的 swtich 或 case语句</li>
</ul>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p>python中的for语句并不总是对算术递增的数值进行迭代，或是给予用户定义迭代步骤和暂停条件的能力，而是对任意序列进行迭代，条目的迭代顺序与它们在序列中出现的顺序一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><p>遍历一个数字序列时，可以使用内置函数 range() ，它会生成算术级数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span></span><br><span class="line"> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>range也可以以另一个数字开头，或者以指定的幅度增加，甚至是负数，叫做“步进”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item1 <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(item1)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"><span class="keyword">for</span> item2 <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    print(item2)  <span class="comment"># 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> item3 <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>):</span><br><span class="line">    print(item3)  <span class="comment"># 0 3 6 9</span></span><br><span class="line"><span class="keyword">for</span> item4 <span class="keyword">in</span> range(<span class="number">-1</span>, <span class="number">-10</span>, <span class="number">-3</span>):</span><br><span class="line">    print(item4)  <span class="comment"># -1 -4 -7</span></span><br></pre></td></tr></table></figure>

<p>range() 所返回的对象实际上并不是一个列表，此对象会在你迭代时基于所希望的序列返回连续的项，但它不真正生成列表，可以节省空间</p>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><ul>
<li><p>break 用来立即退出循环语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;循环结束&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印结果：0 1 2</span></span><br><span class="line"><span class="string">注意，else 中也不执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>continue 用来跳过当次循环，继续循环下一次迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">&#x27;循环结束&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印结果：</span></span><br><span class="line"><span class="string">1  3  4  5</span></span><br><span class="line"><span class="string">循环结束</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>都是只对最近的循环起作用</li>
</ul>
<h3 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h3><ul>
<li><p>pass语句什么也不做，当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它</p>
</li>
<li><p>可以在判断或循环语句中用来占位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(<span class="string">&quot;2+3=&quot;</span>, sum(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>def 关键字引入一个函数定义，它必须后跟函数名称和带括号的形式参数列表</p>
<h3 id="函数定义的更多形式"><a href="#函数定义的更多形式" class="headerlink" title="函数定义的更多形式"></a>函数定义的更多形式</h3><p>参数默认值</p>
<blockquote>
<p>对一个或多个参数指定一个默认值</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>(<span class="params">a=<span class="number">3</span>, b=<span class="number">4</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;3-4=&quot;</span>, cut())</span><br><span class="line">print(<span class="string">&quot;1-4=&quot;</span>, cut(<span class="number">1</span>))</span><br><span class="line">print(<span class="string">&quot;1-1=&quot;</span>, cut(<span class="number">1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>关键字参数</p>
<blockquote>
<p>可以使用形如 key=value 的关键字参数 来调用函数</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span>(<span class="params">a=<span class="number">3</span>, b=<span class="number">4</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;3/4=&quot;</span>, div())</span><br><span class="line">print(<span class="string">&quot;1/4=&quot;</span>, div(a=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">&quot;1/1=&quot;</span>, div(a=<span class="number">1</span>, b=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>特殊参数</p>
<ol>
<li>位置或关键字参数</li>
</ol>
<blockquote>
<p>如果函数定义中未使用 / 和 *，则参数可以按位置或关键字传递给函数</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对调用方式没有限制，参数可以按位置也可以按关键字传入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">arg</span>):</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1(<span class="number">10</span>)</span><br><span class="line">fun1(arg=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="2">
<li>仅限位置参数</li>
</ol>
<blockquote>
<p>仅限位置形参要放在 / 之前，在 / 之后的形参没有限制</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在函数定义中带有 /，限制仅使用位置形参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">arg, /</span>):</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun2(<span class="number">10</span>)</span><br><span class="line">fun2(arg=<span class="number">10</span>) </span><br><span class="line"><span class="comment"># TypeError: fun2() got some positional-only arguments passed as keyword arguments: &#x27;arg&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li>仅限关键字参数</li>
</ol>
<blockquote>
<p>要将形参标记为仅限关键字，即指明该形参必须以关键字的形式传入，应在参数列表的第一个 仅限关键字形参之前放置一个 *</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在函数定义中通过 * 指明仅允许关键字传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>(<span class="params">*, arg</span>):</span></span><br><span class="line">    print(arg)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">fun3(arg=<span class="number">10</span>)</span><br><span class="line">fun3(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># TypeError: fun3() takes 0 positional arguments but 1 was given</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="4">
<li>*name和**name关键字</li>
</ol>
<blockquote>
<p>当存在一个形式为name的最后一个形参时，它会接收一个字典，其中包含除了与已有形参相对应的关键字参数以外的所有关键字参数。</p>
<p>**name，接收一个包含除了已有形参列表外的位置参数的元素的形参</p>
<p>*name必须出现在**name之前</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">arg1, *arg2, **arg3</span>):</span></span><br><span class="line">    print(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg2:</span><br><span class="line">        print(<span class="string">&quot;arg2:&quot;</span>, item)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg3:</span><br><span class="line">        print(<span class="string">&quot;arg3:&quot;</span>, arg3[item])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, key1=<span class="number">100</span>, key2=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">打印结果：</span><br><span class="line">arg1: <span class="number">1</span></span><br><span class="line">arg2: aaa</span><br><span class="line">arg2: bbb</span><br><span class="line">arg3: <span class="number">100</span></span><br><span class="line">arg3: hello</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="5">
<li>在同一函数定义中使用三种调用方式</li>
</ol>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span>(<span class="params">pos_only, /, standard, *, kwd_only</span>):</span></span><br><span class="line">    print(pos_only, standard, kwd_only)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun4(<span class="number">10</span>, <span class="string">&#x27;abc&#x27;</span>, kwd_only=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="6">
<li>任意的参数列表</li>
</ol>
<blockquote>
<p>可以使用任意数量的参数调用函数，这些参数会被包含在一个元祖里</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat</span>(<span class="params">*args, sep=<span class="string">&quot;/&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> sep.join(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>))  <span class="comment"># earth/mars/venus</span></span><br><span class="line">print(concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>, sep=<span class="string">&quot;.&quot;</span>))  <span class="comment"># earth.mars.venus</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>解包参数列表</p>
<p>Lambda表达式</p>
<blockquote>
<p>可以用 lambda 关键字来创建一个小的匿名函数，这个函数返回两个参数的和：lambda a,b：a+b。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = foo(<span class="number">10</span>)</span><br><span class="line">print(f(<span class="number">1</span>))  <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>文档字符串</p>
<blockquote>
<p>help()是Python中的内置函数，通过help()函数可以查询python中的函数的用法，语法：help(函数对象)，如，help(print) # 获取print()函数的使用说明</p>
<p>文档字符串：在定义函数时，可以在函数内部编写文档字符串，文档字符串就是函数的说明<br>当我们编写了文档字符串时，就可以通过help()函数来查看函数的说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a: int, b: bool, c: str = <span class="string">&#x27;hello&#x27;</span></span>) -&gt; int:</span>  <span class="comment"># 这里定义的类型仅是为了函数说明</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    这是一个文档字符串的示例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    函数的作用：。。。。。</span></span><br><span class="line"><span class="string">    函数的参数：</span></span><br><span class="line"><span class="string">        a，作用，类型，默认值。。。。</span></span><br><span class="line"><span class="string">        b，作用，类型，默认值。。。。</span></span><br><span class="line"><span class="string">        c，作用，类型，默认值。。。。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">help(fn)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>函数标注</p>
<h3 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h3><ul>
<li>对于Python，PEP 8已经成为大多数醒目所遵循的风格指南</li>
<li>使用四个空格缩进，不使用制表符</li>
<li>换行，一行不超过79个字符</li>
<li>使用空行分隔函数和类，以及函数内的较大的代码块</li>
<li>如果可能，把注释放到单独一行</li>
<li>使用文档字符串</li>
<li>在运算符前后和逗号后使用空格，但不能直接在括号内使用</li>
<li>以一致的规则为类和函数命名</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python运算符</title>
    <url>/2020/10/02/python/python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ol>
<li><p>“+”，加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）</p>
</li>
<li><p>“-” ，减法运算符</p>
</li>
<li><p>“<em>”，</em> 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）</p>
</li>
<li><p>“/“，除法运算，运算时结果总会返回一个浮点类型</p>
</li>
<li><p>//，整除，只保留计算后的整数位，总会返回一个整型，对浮点数运算，结果返回浮点数</p>
</li>
<li><p>** 幂运算，一个值的几次幂，开方，16**0.5</p>
</li>
<li><p>“%”，取模，求两个数相除的余数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span> / <span class="number">5</span></span><br><span class="line">b = <span class="number">10</span> // <span class="number">3</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">2</span> ** <span class="number">2</span></span><br><span class="line">d = <span class="number">16</span> ** <span class="number">0.5</span>  <span class="comment"># 求16的平方根</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span>) <span class="comment"># a=2.0,b=3,c=4,d=4.0</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><h3 id="逻辑运算符-比较运算符"><a href="#逻辑运算符-比较运算符" class="headerlink" title="逻辑运算符(比较运算符)"></a>逻辑运算符(比较运算符)</h3><ol>
<li><p>not 逻辑非，and 逻辑与，or 逻辑或</p>
</li>
<li><p>Python中的与是短路与，或是短路或</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="selector-tag">a</span> = not a</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;a =&#x27;</span>,a)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>非布尔值进行与或运算时</p>
<ul>
<li><p>对非布尔值进行与或运算时，Python会将其当做布尔值运算，最终会返回原值</p>
</li>
<li><p>与运算， 如果第一个值是False，不看第二个值，所以如果第一个值是False，则直接返回第一个值，否则返回第二个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span> <span class="comment"># 2 True and True</span></span><br><span class="line">result = <span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span> <span class="comment"># 0 True and False</span></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="comment"># 0 False and True</span></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">and</span> <span class="literal">None</span> <span class="comment"># 0 False and False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或运算，如果第一个值是True，不看第二个值，所以如果第一个值是True，则直接返回第一个值，否则返回第二个值  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span> <span class="comment"># 1 True or True</span></span><br><span class="line">result = <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span> <span class="comment"># 1 True or False</span></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span> <span class="comment"># 1 False or True</span></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">or</span> <span class="literal">None</span> <span class="comment"># None False or False</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>可以使用 1&lt;2&lt;3，表示 1&lt;2 and 2&lt;3,对中间的数比较    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># 相当于 1 &lt; 2 and 2 &lt; 3</span></span><br><span class="line">result = <span class="number">10</span> &lt; <span class="number">20</span> &gt; <span class="number">15</span></span><br><span class="line">print(result)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h3><ol>
<li><p>可以进行两个字符串比较，Python中，比较的是字符串的Unicode的编码，逐位比较（可以进行字符串排序，但对于中文意义不大）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="string">&#x27;2&#x27;</span> &gt; <span class="string">&#x27;1&#x27;</span>  <span class="comment"># True  unicode 0032 &gt; 0031</span></span><br><span class="line">result = <span class="string">&#x27;2&#x27;</span> &gt; <span class="string">&#x27;11&#x27;</span>  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;a&#x27;</span> &gt; <span class="string">&#x27;b&#x27;</span>  <span class="comment"># False unicode  0061 &lt; 0062</span></span><br><span class="line">result = <span class="string">&#x27;c&#x27;</span> &lt; <span class="string">&#x27;d&#x27;</span>  <span class="comment"># True</span></span><br><span class="line">result = <span class="string">&#x27;ab&#x27;</span> &gt; <span class="string">&#x27;b&#x27;</span>  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象</p>
<ul>
<li>python是一门面向对象的语言，对象就是内存中专门用来存储指定数据的一块区域，实际上就是一个容器，专门用来存储数据</li>
<li>对象的结构：<ul>
<li>id，每一个对象都有唯一的id，通过id() 查看对象的id，id是解析器生成的，CPython中，id就是对象的内存地址，对象一旦创建，它的id不能改变（强类型语言）</li>
<li>type，标识对象所属的类型，通过type() 查看对象的类型，python强类型语言，对象一旦创建，类型不能改变</li>
<li>value，对象中存储的具体数据，有些对象值是可变的，对象分为两大类，可变对象，不可变对象，可变对象值可以改变，不可变对象的值不能改变</li>
</ul>
</li>
<li>变量和对象<ul>
<li>对象没有直接存储在变量中，python中变量更像是给对象起的别名</li>
<li>变量中存储是对象的内存地址，id，使用变量，就是通过对象的id找到对象的值，a=10，b=a, id(b) = id(a)    </li>
</ul>
</li>
</ul>
</li>
<li><p>==和！=比较的是对象的value，不是id</p>
</li>
<li><p>is 比较是否是同一个对象，比较的是id，is not和is 一般用在可变对象上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> == <span class="literal">True</span>  <span class="comment"># True</span></span><br><span class="line">result = <span class="number">1</span> <span class="keyword">is</span> <span class="literal">True</span>  <span class="comment"># SyntaxWarning: &quot;is&quot; with a literal. </span></span><br><span class="line">result = <span class="number">1</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>  <span class="comment"># SyntaxWarning: &quot;is not&quot; with a literal.</span></span><br><span class="line">print(id(<span class="number">1</span>), id(<span class="literal">True</span>))  <span class="comment"># 140720088745632 140720088467280</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><ol>
<li><p>三元运算符，语句1   if   条件表达式   else   语句2</p>
</li>
<li><p>执行流程：先对条件表达式进行求值判断，如果判断结果为True，则执行语句1，并返回执行结果， 如果判断结果为False，则执行语句2，并返回执行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">30</span></span><br><span class="line">b = <span class="number">50</span></span><br><span class="line">max = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(max) <span class="comment"># 50</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><ol>
<li>and的优先级高于or</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于python</title>
    <url>/2020/09/26/python/%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ol>
<li>python提供了高效的高级数据结构，有高级的内置数据类型，比如灵活的数组和字典，能简单有效地面向对象编程</li>
<li>python是解释型语言</li>
<li>编译型语言和解释型语言<ul>
<li>任何语言给计算机执行时，都要转换成机器码 （二进制的0101）</li>
<li>根据转换时机不同分为两类<ul>
<li>编译型：如C语言，在代码执行前，编译为机器码，执行速度快，跨平台性不好</li>
<li>解释型：python，JS，java，不会在执行前对代码编译，而是边执行边编译，由解释器解释执行，执行速度慢，跨平台性好</li>
</ul>
</li>
</ul>
</li>
<li>python缺点：<ul>
<li>运行速度慢，python是解释性语言，代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。C程序是运行前直接编译成CPU能执行的机器码，所以块。</li>
<li>代码不能加密，发布python程序实际上就是发布源代码。C语言不用发布源代码，只需要把编译后的机器码（xxx.exe文件) 发布出去，要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源代码发布出去。</li>
</ul>
</li>
<li>Python标准库：<a href="https://docs.python.org/zh-cn/3/library/index.html">https://docs.python.org/zh-cn/3/library/index.html</a></li>
<li>Python语法：<a href="https://docs.python.org/zh-cn/3/reference/index.html">https://docs.python.org/zh-cn/3/reference/index.html</a></li>
</ol>
<h3 id="python解释器"><a href="#python解释器" class="headerlink" title="python解释器"></a>python解释器</h3><ul>
<li><p>目前，python有两个版本，2.x版和3.x版，这两个版本不兼容。</p>
</li>
<li><p>python3安装：<a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></p>
</li>
<li><p>命令行选项：<a href="https://docs.python.org/zh-cn/3/using/cmdline.html#using-on-general">https://docs.python.org/zh-cn/3/using/cmdline.html#using-on-general</a></p>
</li>
</ul>
<h3 id="python作为计算器使用"><a href="#python作为计算器使用" class="headerlink" title="python作为计算器使用"></a>python作为计算器使用</h3><ol>
<li><p>解释器可以像计算器一样，在里面输入一个表达式，它会写出答案。</p>
</li>
<li><p>数字</p>
</li>
</ol>
<blockquote>
<p>整数类型是 int，小数类型是 float</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>*(<span class="number">4</span>+<span class="number">5</span>)</span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">5</span></span><br><span class="line"><span class="number">0.8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>%<span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>除法返回浮点数类型，若忽略整数部分，可以使用 // 运算符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>python中，可以使用 ** 运算符计算乘方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>**<span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>**<span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>交互模式下，上一次打印出的表达式被赋值给变量 _，把python作为桌面计算器时，继续计算相对简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tax=<span class="number">12.5</span>/<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price=<span class="number">100.50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price*tax</span><br><span class="line"><span class="number">12.5625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price+_</span><br><span class="line"><span class="number">113.0625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(_,<span class="number">2</span>)</span><br><span class="line"><span class="number">113.06</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>除了int 和 float，python也支持其他类型的数字，如 Decimal或Fraction，python也支持内置对复数的支持，使用后缀 j 或者 J 就可以表示虚数部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">2j</span>+<span class="number">2</span>+<span class="number">4j</span></span><br><span class="line">(<span class="number">3</span>+<span class="number">6j</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li><p>字符串</p>
<ul>
<li><p>除了数字，python也可以操作字符串。单引号或者双引号都可以，反斜杠\用来转义</p>
</li>
<li><p>字符串可以用 + 进行连接，也可以用 * 进行重复</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>*<span class="string">&#x27;ab&#x27;</span>+<span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="string">&#x27;ababab123&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>字符串可以被“索引”，第一个字符索引是0，单个字符没有特殊的类型，只是一个长度为1的字符串</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;p&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>索引也可以用负数，这时从右边开始数，负数索引从-1开始</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">-1</span>]</span><br><span class="line"><span class="string">&#x27;n&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>字符串还支持切片，索引可以得到单个字符，切片可以获取子字符串，左闭右开</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[:<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">2</span>:]</span><br><span class="line"><span class="string">&#x27;thon&#x27;</span></span><br></pre></td></tr></table></figure>

<p>对于非负索引的切片，如果索引不越界，得到的切片长度就是起止索引之差，如 word[1:3] 的长度为2</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>python中的字符串不能被修改，不能向字符串中的某个索引位置赋值，否则会产生一个错误</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">0</span>]=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>内建函数 len() 返回一个字符串的长度</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str=<span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(str)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<ol start="4">
<li>列表</li>
</ol>
<ul>
<li>可以通过方括号引起，逗号分隔的一组值（元素）得到</li>
</ul>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>和字符串一样，列表也支持索引和切片</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[:<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-2</span>:]</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表同样支持拼接操作</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list+[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>与 immutable 的字符串不同，列表是一个 mutable 类型，它自己的内容可以改变</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">0</span>]=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>可以在列表末尾通过 append() 方法来添加新元素</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.append(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>内置函数 len() 也可以作用到列表上</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(list)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>模块</title>
    <url>/2020/09/27/python/%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol>
<li><p>如果从python 解释器退出并再次进入，那么之前定义的函数和变量都会丢失，因此，如果想编写一个稍微长一些的程序，最好使用功能文本编辑器（如pycharm) 为解释器准备输入并将该文件作为输入运行，这被称为编写 脚本</p>
</li>
<li><p>为了将程序拆分为几个文件以方便维护，并且希望在不同程序中使用同一个函数而不是把和这个函数复制到每一个程序中去，可以使用 python提供的模块。</p>
</li>
<li><p>模块可以把定义放在一个文件中，并在脚本或解释器的交互式实例中使用它们， 模块中的定义可以导入到其他模块或者主模块（顶级和计算器模式下执行的脚本中可以访问的变量集合）中</p>
</li>
<li><p>在一个模块中引入外部模块</p>
<ul>
<li>import  模块名 </li>
<li>import  模块名   as  模块别名</li>
<li>也可以只引入模块中的部分内容，from 模块名 import  …….</li>
<li>可以引入同一个模块多次，但是模块的实例只会创建一次</li>
<li>import  可以在程序的任意位置调用，一般写在程序开头</li>
<li>在一个模块内部，模块名可以通过全局变量” _ name _”的值获得，__  name __ 属性值为 __ main __ 的模块是主模块，一个程序中只会有一个主模块</li>
</ul>
</li>
<li><p>例如：</p>
<blockquote>
<p>a.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>然后在该目录中进入python解释器，导入该模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>imnport a</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>在当前的符号表中，这并不会直接进入到定义在 a 函数内的名称，只是进入到该模块名中  a 中，可以用模块名访问 sum 和 cut 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cut(<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__name__</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>模块可以包含可执行的语句以及函数定义，这些语句用于初始化模块，它们仅在模块第一次 import  时才执行</p>
</li>
<li><p>每个模块都有它自己的私有符号表，该表用作模块中定义的所有函数的全局符号表。因此，模块的作者可以在模块内使用全局变量而不必担心与用户的全局变量发生冲突。</p>
</li>
<li><p>模块可以导入其他模块，习惯上把所有 import 语句放在模块或脚本的开头，但不要求。被导入的模块名存放在调入模块的全局符号表中</p>
</li>
<li><p>import 语句有一个变体，可以把名字从一个被调模块内直接导入到现模块的符号表里，</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> a <span class="keyword">import</span> sum,cut</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cut(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__name__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>这并不会把被调入模块名引入到局部变量里，即这么做 a 是未定义的</p>
</blockquote>
</li>
<li><p>还有一个变体甚至可以导入模块内定义的所有名称</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> a  <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__name__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<p>这会调入所有不是以下划线(_)开头的名称，在多数情况下，这个功能并不常用，因为会导致代码可读性很差。</p>
</blockquote>
</li>
<li><p>如果模块名称之后带有 as ，在跟在 as 之后的名称将直接绑定到所导入的模块</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> a <span class="keyword">as</span> module_a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>module_a.sum(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>这种方式也可以在用到 from 的时候使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> a <span class="keyword">import</span> sum <span class="keyword">as</span> function_sum</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>function_sum(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<ol start="12">
<li><p>以脚本的方式执行模块</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>python a.py &lt;arguments&gt;</span><br></pre></td></tr></table></figure>

<p>模块里的代码会被执行，就像导入了模块一样，但是__ name __ 被赋值为“ __ main __”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__name__</span><br><span class="line"><span class="string">&#x27;__main__&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这经常用于为模块提供一个方便的用户接口，或用于测试（以脚本的方式运行模块从而执行一些测试套件）</p>
</blockquote>
</li>
<li><p>模块搜索路径</p>
<blockquote>
<p>当一个名为 spam 的模块被导入的时候，解释器首先寻找具有该名称的内置模块。</p>
<p>如果没找到，然后解释器从 sys.path 变量给出的目录列表中寻找名为 spam.py的文件，sys.path 初始有以下目录地址:</p>
<p>​        包含输入脚本的目录，或者未指定文件时的当前目录</p>
<p>​        PYTHONPATH—–一个包含目录名称的列表，它和 shell 变量 PAHT有一样的语法</p>
<p>​        取决于安装的默认的配置</p>
<p>在初始化后，Python程序可以更改 sys.path，包含正在运行脚本的文件目录被放在搜索路径的开头处，标准库路径之前。这意味着将加载此目录里的脚本，而不是标准库中的同名模块。</p>
</blockquote>
</li>
<li><p>“编译过的” python 文件</p>
<blockquote>
<p>为了加速模块载入，Python在 <em>pycache</em> 目录里缓存了每个模块的编译后版本，名称为 moudle.version.pyc，其中名称中的版本字段对编译文件的格式进行编码，一般使用Python版本号。</p>
<p>例如，在CPython3.3中，spam.py的编译版本将被缓存为 _ pycache _/spam.cpython-33.pyc</p>
<p>python在两种情况下不会检查缓存，一是从命令行直接载入的模块，它都是重新编译不存储编译结果；其次，如果没有源模块，它不会检查缓存。</p>
</blockquote>
</li>
</ol>
<h3 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h3><ol>
<li><p>python附带了一个标准模块库</p>
</li>
<li><p>一些模块内置于解释器中，它们提供对不属于语言核心但仍然内置的操作的访问，以提高效率或提供对系统调用等操作系统原语的访问</p>
</li>
<li><p>这些模块的集合是一个配置选项，也取决于底层平台，例如，winreg 模块只在 windows 操作系统上提供</p>
</li>
<li><p>特别注意 sys 模块，它被内嵌到每一个Python解释器中，使我们可以获取到python解释器的信息或者通过函数来操作python解释器，变量 sys.psl 和 sys.ps2 定义用作主要和辅助提示的字符串</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps1</span><br><span class="line"><span class="string">&#x27;&gt;&gt;&gt; &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps2</span><br><span class="line"><span class="string">&#x27;... &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps1=<span class="string">&#x27;C&gt;&#x27;</span></span><br><span class="line">C&gt;print(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">Hello</span><br><span class="line">C&gt;</span><br></pre></td></tr></table></figure>

<p>这两个变量只有在编译器是交互模式下才被定义</p>
</blockquote>
</li>
<li><p>sys.argv，获取执行代码时，命令行中所包含的参数，返回一个列表，列表中保存了当前命令的所有参数</p>
</li>
<li><p>sys.modules，获取当前程序中引入的所有模块，返回一个字典，字典的 key 是模块的名字，字典的 value 是模块对象</p>
</li>
<li><p>syp.path 变量是一个字符串列表，用于确定解释器的模块搜索路径，该变量被初始化为从环境变量 PYTHONPATH获取的默认路径，或者如果PYTHONPATH未设置，则从内置默认路径初始化。</p>
</li>
<li><p>sys.platform，表示当前python运行的平台，windows平台下，值为 win32</p>
</li>
<li><p>sys.exit() 用来退出程序，参数中可以添加退出提示</p>
</li>
<li><p>pprint 模块给我们提供了一个方法 pprint() ，该方法可以用来对打印的数据做简单的格式化</p>
</li>
<li><p>os 模块可以对操作系统进行访问，os.environ，通过这个属性可以获取到系统的环境变量；os.system，可以用来执行操作系统的名字；</p>
</li>
</ol>
<h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir() 函数"></a>dir() 函数</h3><ol>
<li>内置dir() 函数用于查找模块定义的名称，它返回一个排序过的字符串列表</li>
</ol>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;cut&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有传入参数，dir() 列出你当前定义的名称</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="2">
<li><p>它列出所有类型的名称：变量，模块，函数，等等</p>
</li>
<li><p>不会列出内置函数和变量的名称，它们的定义是在标准模块 builtins 中</p>
</li>
</ol>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ol>
<li><p>包也是一个模块，当模块中的代码过多时，或者一个模块需要被分解为多个模块时，就需要使用包</p>
</li>
<li><p>包是一种通过用“带点号的模块名”来构造Python模块命名空间的方法，例如，模块名A.B表示A包中名为B的子模块</p>
</li>
<li><p>普通的模块就是一个 py 文件，而包是一个文件夹</p>
</li>
<li><p>包中必须有一个 __ init __.py 文件，这个文件可以包含包中的主要内容</p>
</li>
<li><p>__ pycache __ 是模块的缓存文件，py代码在执行前，需要被解释器先转换为机器码再执行，所以在使用包模块）时，也需要将模块的代码先转换为机器码，而为了提高程序执行的性能，python会在编译过一些之后，将代码保存到一个缓存文件中，这样下次加载这个包（模块）时，就不用重新编译而直接加载缓存中编译好的代码即可。</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> a, b</span><br><span class="line"></span><br><span class="line">print(a.c)  <span class="comment"># 30</span></span><br><span class="line">print(b.d)  <span class="comment"># 40</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test 目录中</span><br><span class="line">a.py</span><br><span class="line">c=<span class="number">30</span></span><br><span class="line"></span><br><span class="line">b.py</span><br><span class="line">d=<span class="number">40</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>输入输出</title>
    <url>/2020/09/28/python/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h3 id="input"><a href="#input" class="headerlink" title="input()"></a>input()</h3><ol>
<li><p>该函数用来获取用户的输入</p>
</li>
<li><p>input()调用后，程序会立即暂停，等待用户输入，用户输入完内容以后，点击回车程序才会继续向下执行</p>
</li>
<li><p>用户输入完成以后，其所输入的的内容会以返回值得形式返回</p>
</li>
<li><p>注意：input()的返回值是一个字符串</p>
</li>
<li><p>input()函数中可以设置一个字符串作为参数，这个字符串将会作为提示文字显示</p>
</li>
<li><p>input()也可以用于暂时阻止程序结束</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = input(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;管理员登录！&#x27;</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><ol>
<li><p>几种格式化输出的方法</p>
<ul>
<li><p>格式化字符串</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串相加，拼接（注意，字符串只能和字符串拼接，不能和其他类型做加法连接）</span></span><br><span class="line">a = <span class="number">123</span> </span><br><span class="line">print(<span class="string">&quot;a = &quot;</span>+a) <span class="comment"># 不常用</span></span><br><span class="line">print(<span class="string">&#x27;a =&#x27;</span>,a)  <span class="comment"># 常用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a = 123</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建字符串时，可以在字符串中指定占位符</span></span><br><span class="line"><span class="comment"># %s 在字符串中表示任意字符</span></span><br><span class="line"><span class="comment"># %3s，3位字符，不够补空格</span></span><br><span class="line"><span class="comment"># %3.5s，3位到5位字符</span></span><br><span class="line"><span class="comment"># %f 浮点数占位符</span></span><br><span class="line"><span class="comment"># %.2f 两位小数</span></span><br><span class="line"><span class="comment"># %d 整数占位符</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;Hello %s&#x27;</span> % <span class="string">&#x27;张三&#x27;</span>  <span class="comment"># a = Hello 张三</span></span><br><span class="line">b = <span class="string">&#x27;hello %s 你好 %s&#x27;</span> % (<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>)  <span class="comment"># b = hello Tom 你好 张三</span></span><br><span class="line">c = <span class="string">&#x27;hello %3.5s&#x27;</span> % <span class="string">&#x27;abcdefg&#x27;</span>  <span class="comment"># c = hello abcde</span></span><br><span class="line">d = <span class="string">&#x27;hello %s&#x27;</span> % <span class="number">123.456</span>  <span class="comment"># d = hello 123.456</span></span><br><span class="line">e = <span class="string">&#x27;hello %.2f&#x27;</span> % <span class="number">123.456</span>  <span class="comment"># e = hello 123.46</span></span><br><span class="line">f = <span class="string">&#x27;hello %d&#x27;</span> % <span class="number">123.95</span>  <span class="comment"># f = hello 123</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;a = %s&#x27;</span> % a)</span><br><span class="line">print(<span class="string">&#x27;b = %s&#x27;</span> % b)</span><br><span class="line">print(<span class="string">&#x27;c = %s&#x27;</span> % c)</span><br><span class="line">print(<span class="string">&#x27;d = %s&#x27;</span> % d)</span><br><span class="line">print(<span class="string">&#x27;e = %s&#x27;</span> % e)</span><br><span class="line">print(<span class="string">&#x27;f = %s&#x27;</span> % f)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在字符串的引号之前加上一个 f 或 F，在字符串中，可以在&#123;&#125; 之间写可以引用的变量或字面值的 python 表达式</span></span><br><span class="line">year = <span class="number">2016</span></span><br><span class="line">str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(&#123;year&#125;, &#123;str&#125;)</span><br><span class="line">print(<span class="string">f&#x27;year=<span class="subst">&#123;year&#125;</span>,str=<span class="subst">&#123;str&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;2016&#125; &#123;&#x27;hello world&#x27;&#125;</span></span><br><span class="line"><span class="string">year = 2016, str = hello world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</blockquote>
</li>
<li><p>字符串的 str.format() 方法</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">42</span>_572_654</span><br><span class="line">b = <span class="number">43</span>_132_495</span><br><span class="line">c = a / (a + b)</span><br><span class="line">print(<span class="string">&#x27;&#123;:-9&#125;,&#123;:2.2%&#125;&#x27;</span>.format(a, c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">42572654,49.67%</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>仍然使用{} 来标记变量将被替换的位置，并且可以提供详细的格式化指令，但还需要提供要格式化的信息</p>
</blockquote>
</li>
<li><p>当只想快速显示某些变量以进行调试时，可以使用 repr() 或 str() 将任何值转化为字符串</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(str(s), repr(s))  <span class="comment"># hello world  &#x27;hello world&#x27;</span></span><br><span class="line">print(str(<span class="number">1</span> / <span class="number">7</span>))  <span class="comment"># 0.14285714285714285</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line">y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line">print(repr(x), repr(y))  <span class="comment"># 32.5 40000</span></span><br><span class="line">print(repr((x, y, (<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>))))  <span class="comment"># (32.5, 40000, (&#x27;Tom&#x27;, &#x27;Bob&#x27;))</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;hello,world\n&quot;</span></span><br><span class="line">print(repr(str))  <span class="comment"># &#x27;hello,world\n&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><p>格式化字符串文字</p>
<ul>
<li><p>格式化字符串字面值（f-字符串），可以在字符串前面加上 f 和 F 并将表达式写成 {expression} ，在字符串中包含python表达式的值</p>
</li>
<li><p>可选的格式说明符可以跟在表达式后，可以更好的控制值的格式化方式</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将PI舍入到小数点后三位</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&#x27;PI is <span class="subst">&#123;math.pi:<span class="number">.3</span>f&#125;</span>&#x27;</span>)  <span class="comment"># PI is 3.142</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在 ’ ：’ 后传递一个整数可以让该字段成为最小字符宽度，在列对齐时很有用</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = &#123;<span class="string">&#x27;Tom&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;Alice&#x27;</span>: <span class="number">7678</span>&#125;</span><br><span class="line"><span class="keyword">for</span> name, phone <span class="keyword">in</span> table.items():</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;name:<span class="number">10</span>&#125;</span>==&gt;<span class="subst">&#123;phone:<span class="number">10</span>d&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Tom       ==&gt;      4127</span></span><br><span class="line"><span class="string">Jack      ==&gt;      4098</span></span><br><span class="line"><span class="string">Alice     ==&gt;      7678</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>其他修饰符可用于在格式化前转化值。’ !a ‘ 应用 ascill() ，’ !s ‘ 应用 str()，’ !r ‘ 应用 repr()</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">animals = <span class="string">&#x27;eels&#x27;</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;animals&#125;</span>&#x27;</span>)  <span class="comment"># eels</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;animals!a&#125;</span>&#x27;</span>)  <span class="comment"># &#x27;eels&#x27;</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;animals!s&#125;</span>&#x27;</span>)  <span class="comment"># eels</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;animals!r&#125;</span>&#x27;</span>)  <span class="comment"># &#x27;eels&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><p>字符串的 format() 方法</p>
<ul>
<li><p>基本用法</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#123;&#125;,&quot;&#123;&#125;&quot;&#x27;</span>.format(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>))  <span class="comment"># hello,&quot;world&quot;</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p>花括号和其中的字符（称为格式字段）将替换为传递给 str.format() 方法的对象。</p>
</li>
<li><p>花括号中的数字可以表示传递给 str.format() 方法的对象的位置</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#123;0&#125; and &#123;1&#125;&#x27;</span>.format(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>))  <span class="comment"># abc and ABC</span></span><br><span class="line">print(<span class="string">&#x27;&#123;1&#125; and &#123;0&#125;&#x27;</span>.format(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>))  <span class="comment"># ABC and abc</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>如果在 str.format() 方法中使用关键字参数，则使用参数的名称引用它们的值</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#123;name&#125; and &#123;sex&#125;&#x27;</span>.format(name=<span class="string">&#x27;jack&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>))  <span class="comment"># jack and 男</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>位置和关键字参数可以任意组合</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#123;0&#125;,&#123;1&#125;,and &#123;other&#125;&#x27;</span>.format(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>, other=<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># abc,ABC,and hello</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>如果是一个很长的格式字符串，不希望把它拆开，那么最好按名称而不是按位置引用变量来进行格式化，这可以通过简单的传递字典并使用方括号访问键来完成</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = &#123;<span class="string">&#x27;Tom&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;Alice&#x27;</span>: <span class="number">7678</span>&#125;</span><br><span class="line">print(<span class="string">&#x27;Tom:&#123;0[Tom]:d&#125;;Jack:&#123;0[Jack]:d&#125;;Alice:&#123;0[Alice]:d&#125;;&#x27;</span>.format(table)) <span class="comment">#Tom:4127;Jack:4098;Alice:7678;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>也可以通过使用 ‘*’ 符号将 table 作为关键字参数传递</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;Tom:&#123;Tom:d&#125;;Jack:&#123;Jack:d&#125;;Alice:&#123;Alice:d&#125;;&#x27;</span>.format(**table)) <span class="comment">#Tom:4127;Jack:4098;Alice:7678;</span></span><br></pre></td></tr></table></figure>

</blockquote>
</li>
</ul>
<p>这与内置函数 vars() 结合使用时非常有用，会返回包含所有局部变量的字典</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面会生成一组整齐的列，其中包含给定的整数和它的平方以及立方</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    print(<span class="string">&#x27;&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;&#x27;</span>.format(x,x*x,x*x*x))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> 1   1    1</span></span><br><span class="line"><span class="string"> 2   4    8</span></span><br><span class="line"><span class="string"> 3   9   27</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>手动格式化字符串</p>
<ul>
<li><p>平方和立方的表，手动格式化的，每一列之间的一个空格是通过 print() 方式添加的</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    print(repr(x).rjust(<span class="number">2</span>),repr(x*x).rjust(<span class="number">3</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print(repr(x*x*x).rjust(<span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> 1   1   1</span></span><br><span class="line"><span class="string"> 2   4   8</span></span><br><span class="line"><span class="string"> 3   9  27</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p>字符串的 str.rjust() 方法通过在左侧填充空格来对给定宽度的字段中的字符串进行右对齐。。类似的还有 str.ljust()  和 str.center() 。</p>
</li>
<li><p>str.zfill() ，它会在数字字符串的左边填充0，能识别正负号。</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;-3.14&#x27;</span></span><br><span class="line">print(a.zfill(<span class="number">5</span>))  <span class="comment"># 00123</span></span><br><span class="line">print(b.zfill(<span class="number">7</span>))  <span class="comment"># -003.14</span></span><br><span class="line">print(b.zfill(<span class="number">1</span>))  <span class="comment"># -3.14</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><p>旧的字符串格式化方法</p>
<ul>
<li><p>% 运算符（求余）也可用于字符串格式化，给定 ‘ string ‘  % values，则 string 中的 % 实例会以0个或多个 values 元素替换。此操作通常被称为字符串插值</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;PI is %5.3f&#x27;</span> % math.pi)  <span class="comment"># PI is 3.142</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><ol>
<li><p>open() 返回一个 file mode，最常用的有两个参数：open(filename，mode)</p>
<ul>
<li><p>第一个参数是包含文件名的字符串，第二个参数是另一个字符串，其中包含一些描述文件使用方式的字符。</p>
</li>
<li><p>mode 可以是 ‘r’，表示文件只读；’w’ 表示文件只能写入（已存在的同名文件会被删除）’a’表示打开文件以追加内容，任何写入的数据会自动添加到文件末尾。 ‘r+’ 表示打开文件进行读写。 mode 参数可选，省略时默认值是”r”</p>
</li>
<li><p>通常文件是以 text mode 打开的，这意味着从文件中读取或写入字符串时，都会以指定的编码方式进行编码。如果未指定编码方式，默认值与平台无关。在 mode 中追加的 ‘b’ 则以 binary mode 打开文件，这个模式应该用于所有不包含文本的文件</p>
</li>
<li><p>在文本模式读取时，默认会把平台特定的行结束符（Unix的\n，Windows的 \r\n）转换为 \n，</p>
</li>
<li><p>在文本模式写入时，默认会把出现的 \n 转化回平台特定的结束符</p>
</li>
<li><p>处理文件对象时，最好使用 with 关键字，当子句体结束后文件会正确关闭。</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;workfile&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	read_data = f.read()</span><br><span class="line"></span><br><span class="line">f.closed </span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>若没有使用 with 关键字，那么应该调用 f.close() 来关闭文件并立即释放它使用的所有系统资源。</p>
</li>
</ul>
</li>
<li><p>文件对象的方法</p>
<ul>
<li><p>读取文件内容，f.read(size)，它会读取一些数据并将其作为字符串（在文本模式下）或字节串对象（在二进制模式下）返回。size是一个可选的数值参数，当 size 被省略或者为负数时，将读取并返回整个文件的内容，当取其他值时，将读取并返回至多 size 个字符（文本模式下），或 size 个字节（二进制模式下）。如果已到达文件末尾，f.read() 将返回一个空字符串(‘ ‘)</p>
</li>
<li><p>f.readline() 从文件中读取一行，换行符 \n 留在字符串末尾，如果文件不以换行符结尾，则在文件的最后一行省略。如果 f.readline() 返回一个空的字符串，则表示已经到达文件末尾，而空行使用 ‘ \n ‘ 表示。</p>
</li>
<li><p>要从文件中读取行，可以循环遍历文件对象 </p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f= open(<span class="string">&#x27;workfile&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">	print(line,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>如果希望以列表形式读取文件中的所有行，可以使用 list(f) 或 f.readlines()</p>
</li>
<li><p>f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数，在写入其他类型的对象之前，需要先把它们转化为字符串（文本模式下）或字节对象（二进制模式下）</p>
</li>
<li><p>f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为从二进制模式下时从文件开始的字节数，以及文本模式下的意义不明的数字。</p>
</li>
<li><p>f.seek(offset，whence) ，可以改变文件对象的位置，通过向一个参考点添加 offset 来计算位置；参考点由 whence 参数指定。whence 取0 表示从文件开头起算，1表示使用当前文件位置，2表示使用文件末尾作为参考点。whence 如果省略则默认值是0，即使用文件开头作为参考点。</p>
</li>
</ul>
</li>
<li><p>使用 json 保存结构化数据</p>
<ul>
<li><p>一个对象 x，可以用一行简单的代码来查看它的JOSN字符串表表示</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a=json.dumps([<span class="number">1</span>, <span class="string">&#x27;simple&#x27;</span>, <span class="string">&#x27;list&#x27;</span>])</span><br><span class="line">print(a)   <span class="comment">#[1, &quot;simple&quot;, &quot;list&quot;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>dumps() 函数的另一个变体是 dump() ，它只是将对象序列化为 text file。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>小哼买书</title>
    <url>/2020/11/30/%E3%80%8A%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E3%80%8B/%E5%B0%8F%E5%93%BC%E4%B9%B0%E4%B9%A6/</url>
    <content><![CDATA[<h3 id="程序1："><a href="#程序1：" class="headerlink" title="程序1："></a>程序1：</h3><ul>
<li>输入：2行，第一行为一个正整数n表示有n个同学参与调查；第二行有n个用空格隔开的正整数，为每本书的ISBN号。</li>
<li>输出：2行，第一行为一个正整数k，表示需要买多少本书；第二行为k个用空格隔开的正整数，为从小到大已排好序的需要购买的图书的ISBN号。</li>
<li>程序运行时间限制为1秒</li>
</ul>
<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol>
<li><p>两种方法：方法1，先将n个图书的ISBN号去重，再进行从小到大排序并输出。方法2，先从小到大排序，输出的时候再去重。</p>
</li>
<li><p>方法1：将桶排序稍加改动可以起到去重的效果</p>
<p>C代码：</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1，先使用桶排序去重，再排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1，定义数组a存放全部图书的ISBN号的出现次数，变量n保存图书数量，因为ISBN号的范围在1-1000之间，故数组大小定义为1001;</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">1001</span>], n;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//count是去重后ISBN号的个数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入图书数量：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2，将数组a初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3,读入n个ISBN号</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入%d个图书的ISBN号：\n&quot;</span>,n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">		a[num]=<span class="number">1</span>; <span class="comment">//标记出现过的ISBN号</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">		count += a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">1</span>) &#123; <span class="comment">//如果这个ISBN号出现过就打印出来</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入图书数量：10<br>输入10个图书的ISBN号：<br>20 40 32 67 40 20 89 300 400 15</p>
<p>8<br>15 20 32 40 67 89 300 400</p>
<p>这种方法的时间复杂度就是桶排序的时间复杂度：O（M+N）</p>
</blockquote>
</li>
</ol>
<p>   python代码：</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[]</span><br><span class="line">n=int(input(<span class="string">&quot;输入图书数量：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    num=int(input(<span class="string">f&#x27;输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个书的ISBN号：&#x27;</span>))</span><br><span class="line">    a[num]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">    count+=a[i]</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">if</span>(a[i]==<span class="number">1</span>):</span><br><span class="line">        print(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li><p>方法2：先排序后去重，排序可以使用冒泡排序或者快速排序</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法2：先排序再去重*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">1001</span>]; <span class="comment">//全部图书的ISBN号的状态</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>; <span class="comment">//图书数量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入图书数量：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入%d个图书的ISBN号：\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开始冒泡排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (n - i); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">int</span> t = a[j];</span><br><span class="line">				a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//输出第一个数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从第二个数开始遍历，如果遍历到的这个数是第一次出现就打印，否则不打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] != a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行排序后，输出的时候，预先判断一下当前这个数a[i] 与前面一个数 a[i -1] 是否相同，如果相同不打印，不相同说明是第一次出现则打印。</p>
<p>这种方法的时间复杂度由两部分构成：</p>
<p>​        一部分是冒泡排序的时间复杂度：O（N^2）</p>
<p>​        另一部分是读入和输出，都是O（N）</p>
<p>​        因此整个算法的时间复杂度是：O（N^2+ 2*N )，忽略 2N，最终该方法的时间复杂度是：O(N^2)</p>
</blockquote>
<p>python代码：</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[]</span><br><span class="line">n=int(input(<span class="string">&quot;输入图书数量：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    num=int(input(<span class="string">f&#x27;输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个图书的ISBN号：&#x27;</span>))</span><br><span class="line">    a.append(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n-i):</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>]):</span><br><span class="line">            t=a[j]</span><br><span class="line">            a[j]=a[j+<span class="number">1</span>]</span><br><span class="line">            a[j+<span class="number">1</span>]=t</span><br><span class="line"></span><br><span class="line">print(a[<span class="number">0</span>],end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">    <span class="keyword">if</span>(a[i]!=a[i<span class="number">-1</span>]):</span><br><span class="line">        print(a[i],end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记-- 《啊哈算法》</category>
      </categories>
      <tags>
        <tag>《啊哈算法》</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2020/11/28/%E3%80%8A%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E3%80%8B/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="程序1：对-6-1-2-7-9-3-4-5-10-8，这10个数进行排序"><a href="#程序1：对-6-1-2-7-9-3-4-5-10-8，这10个数进行排序" class="headerlink" title="程序1：对 6    1      2      7     9      3      4      5     10      8，这10个数进行排序"></a>程序1：对 6    1      2      7     9      3      4      5     10      8，这10个数进行排序</h3><p><strong>分析：</strong></p>
<ol>
<li>首先在这个序列中找一个基准数，如以第一个数6作为基准数，接下来将比6大的数放在6的右边，比6小的数放在6的左边</li>
<li>分别从“  6  1  2  7   9   3   4   5   10   8 ” 两端开始探测，先从右往左找一个小于6的数，再从左往右找一个大于6的数，然后交换它们。可以用两个变量 i  和 j ，分别指向序列最左边和最右边</li>
<li>刚开始的时候让哨兵i指向序列的最左边，即 i = 1，执行数字6；让哨兵 j 指向序列的最右边，即 j=10，指向数字8</li>
<li>首先哨兵 j 开始出动（因为此处设置的基准数是最左边的数，所有哨兵 j 先出动）。哨兵 j 一步一步向左挪动，即 j–，直到找到一个小于6的数停下来。</li>
<li>接下来哨兵 i 一步一步向右挪动，即 i++，直到找到一个大于6的数停下来</li>
<li>最后哨兵 j 停在了5面前，哨兵 i 停在了 7 面前，交换 5 和 7，交换后的序列是：  6 1  2  5  9   3  4  7  10  8</li>
<li>到此，第一次交换结束。接下来哨兵 j 继续向左挪动（注意每次必须是哨兵 j 先出发），哨兵 j 在4 面前停下来，哨兵 i 继续向右挪动，在 9 面前停下来，再次进行交换。第二次交换后的序列为：   6 1  2  5   4  3  9  7   10  8</li>
<li>第二次交换结束，继续探测。哨兵 j 继续向左，在 3 面前停下，哨兵 i 继续向右，此时哨兵 i 和 哨兵 j 在 3 面前相遇了，说明此时 探测结束，将基准数 6 和 3进行交换，交换后的序列为：  3 1  2  5  4   6  9   7  10  8</li>
<li>到此第一轮探测真正结束，此时以基准数6为分界点，6左边的数都小于6,   6右边的数都大于6。基准数 6 归位。</li>
<li>接下来以同样的方式处理6左边的序列和6右边的序列。</li>
</ol>
<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><ol>
<li><p>初始序列：6   1   2   7   9   3    4    5   10    8</p>
</li>
<li><p>以6为基准数</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>   <span class="number">1</span>    <span class="number">2</span>  <span class="number">7</span>   <span class="number">9</span>   <span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span>   <span class="number">10</span>    <span class="number">8</span></span><br><span class="line">① i=<span class="number">6</span>，j=<span class="number">8</span>，j移动到<span class="number">5</span>，i移动到<span class="number">7</span>，交换<span class="number">5</span>和<span class="number">7</span></span><br><span class="line">	<span class="number">6</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">5</span>   <span class="number">9</span>   <span class="number">3</span>    <span class="number">4</span>    <span class="number">7</span>   <span class="number">10</span>    <span class="number">8</span></span><br><span class="line">② i=<span class="number">5</span>，j=<span class="number">7</span>，j移动到<span class="number">4</span>，i移动到<span class="number">9</span>，交换<span class="number">4</span>和<span class="number">9</span></span><br><span class="line">	<span class="number">6</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">5</span>   <span class="number">4</span>   <span class="number">3</span>    <span class="number">9</span>    <span class="number">7</span>   <span class="number">10</span>    <span class="number">8</span></span><br><span class="line">③ i=<span class="number">4</span>，j=<span class="number">9</span>，j移动到<span class="number">3</span>，i移动到<span class="number">3</span>，i和j相遇，将<span class="number">6</span>和<span class="number">3</span>交换，<span class="number">6</span>归位</span><br><span class="line">	<span class="number">3</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">5</span>   <span class="number">4</span>   <span class="number">6</span>    <span class="number">9</span>    <span class="number">7</span>   <span class="number">10</span>    <span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将 6 左边的序列进行归并排序</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">5</span>   <span class="number">4</span></span><br><span class="line">①以<span class="number">3</span>为基准数，<span class="number">3</span>归位后：<span class="number">2</span>   <span class="number">1</span>   <span class="number">3</span>   <span class="number">5</span>   <span class="number">4</span></span><br><span class="line">②将<span class="number">3</span>左边排序：<span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">5</span>   <span class="number">4</span></span><br><span class="line">③将<span class="number">3</span>右边排序：<span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span></span><br><span class="line">④得到<span class="number">6</span>左边的序列：<span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将6 右边的序列进行归并排序</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span>    <span class="number">7</span>   <span class="number">10</span>    <span class="number">8</span></span><br><span class="line">①以<span class="number">9</span>为基准数，<span class="number">9</span>归位后：<span class="number">8</span>  <span class="number">7</span>  <span class="number">9</span>  <span class="number">10</span></span><br><span class="line">②将<span class="number">9</span>左边排序：<span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span></span><br><span class="line">③将<span class="number">9</span>右边排序：<span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span></span><br><span class="line">④得到<span class="number">6</span>右边的序列：<span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>排序结果：1   2   3   4   5   6    7   8   9   10</p>
</li>
</ol>
<p><strong>C代码</strong></p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个数组保存待排序的数，定义为全局变量，主函数和子函数中都需要操作这个数组</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，快速排序定义,left是待排序数组最左边，right是待排序数组最右边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j,temp;</span><br><span class="line">	i = left, j = right; <span class="comment">//哨兵i和哨兵j</span></span><br><span class="line">	temp = a[left]; <span class="comment">//将基准数保存在temp中</span></span><br><span class="line">	<span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span>; <span class="comment">//参数合法性，left一定小于right</span></span><br><span class="line">	<span class="keyword">while</span> (i != j) &#123; <span class="comment">//哨兵i和哨兵j没有相遇 </span></span><br><span class="line">		<span class="keyword">while</span> (a[j] &gt;= temp &amp;&amp; i &lt; j) &#123; <span class="comment">//顺序很重要，哨兵j先移动，在比temp小的数面前才会停下来</span></span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (a[i] &lt;= temp &amp;&amp; i &lt; j) &#123; <span class="comment">//接着移动哨兵i，在比temp大的数面前停下来</span></span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; j) &#123; <span class="comment">//哨兵i和j没有相遇时，将两个数交换</span></span><br><span class="line">			<span class="keyword">int</span> t = a[i];</span><br><span class="line">			a[i] = a[j];</span><br><span class="line">			a[j] = t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//哨兵i和哨兵j相遇后，将基准数归位</span></span><br><span class="line">	a[left] = a[i]; <span class="comment">//将相遇处的数换到数组最左边，注意a[left]不能写成temp，因为下一行temp需要操作</span></span><br><span class="line">	a[i] = temp; <span class="comment">//将基准数换到相遇处</span></span><br><span class="line">	</span><br><span class="line">	quickSort(left, i - <span class="number">1</span>); <span class="comment">//继续处理左边的</span></span><br><span class="line">	quickSort(i + <span class="number">1</span>, right);<span class="comment">//继续处理右边的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入待排序数的个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入%d个待排序的数：\n&quot;</span>,n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//调用快速排序</span></span><br><span class="line">	quickSort(<span class="number">0</span>, n<span class="number">-1</span>); </span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印出排序后的序列</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>python代码</strong></p>
<p><strong>总结：</strong></p>
<ol>
<li>快速排序之所以比较快，是以为相比冒泡排序，每次交换式跳跃式的，交换距离大，冒泡排序每次交换只能在相邻的数之间进行交换，因此总的比较次数和交换次数就少了，速度自然就提高了。</li>
<li>在最坏的情况下，仍可能是相邻的两个数进行了交换，因此快排的最差时间复杂度和冒泡排序一样，O(N^2)</li>
<li>快速排序的平均时间复杂度是：O(NlogN)</li>
<li>快排实际上是基于一种“二分”的思想</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>读书笔记-- 《啊哈算法》</category>
      </categories>
      <tags>
        <tag>《啊哈算法》</tag>
      </tags>
  </entry>
  <entry>
    <title>桶排序</title>
    <url>/2020/11/27/%E3%80%8A%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E3%80%8B/%E7%AE%80%E5%8C%96%E7%89%88%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="程序1：将5个同学的分数5-3-5-2-8（满分10分）进行从小到大排序输出"><a href="#程序1：将5个同学的分数5-3-5-2-8（满分10分）进行从小到大排序输出" class="headerlink" title="程序1：将5个同学的分数5,3,5,2,8（满分10分）进行从小到大排序输出"></a>程序1：将5个同学的分数5,3,5,2,8（满分10分）进行从小到大排序输出</h3><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol>
<li>可以借助一个一维数组</li>
<li>首先申请一个大小为11的数组 int a [11]，就有了11个变量 a[0] 到 a[10]，a[k] = v 表示得 k 分的人有 v个</li>
<li>然后将 a[0] 到 a[10] 都初始化为0，表示得0-10分的人都为0，这些分数还没有人得</li>
<li>接着处理一个分数，如第一个人的分数是5分，则让 a[5] 自增1，表示5这个分数出现了一次，以此类推处理所有的分数</li>
<li>最后的数组 a的值就是 0-10，分数范围的各个分数出现的次数，将出现过的分数打印出来即可，出现几次打印几次。如 a[2] =1 就把2这个分数打印1次。</li>
</ol>
<p><strong>c代码：</strong></p>
<ol>
<li><p>申请一个长度为11的数组a，并定义一个 score数组保存所有学生的分数</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> score[] = &#123; <span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span> &#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>将数组a初始化</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">	a[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>处理每一个分数</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">int</span> item = score[i];</span><br><span class="line">	a[item] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>打印输出</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">	<span class="comment">//printf(&quot;%d &quot;, a[i]);  0 0 1 1 0 2 0 0 1 0 0</span></span><br><span class="line">	<span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);  <span class="comment">//2 3 5 5 8</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里 if 判断可不用，若a[i] = 0，将不会进行for循环打印输出</p>
</blockquote>
</li>
<li><p>完整代码：</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1，申请一个大小为11的数组a[11]，11个变量a[0]~a[10]</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">int</span> score[] = &#123; <span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2，将a[0]到a[10]初始化为0，表示这些分数没有人得过</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3，处理每一个人的分数，如，第一个人是5分，将a[5]加1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> item = score[i];</span><br><span class="line">		a[item] += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4，将出现过的分数打印出来即可（出现几次打印几次），如a[2]=1,将2打印1次</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">		<span class="comment">//printf(&quot;%d &quot;, a[i]);  0 0 1 1 0 2 0 0 1 0 0</span></span><br><span class="line">		<span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);  <span class="comment">//2 3 5 5 8</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：2 3 5 5 8</p>
</blockquote>
</li>
</ol>
<p><strong>python代码：</strong></p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1，申请一个大小为11的数组a[11]，11个变量a[0]~a[10]</span></span><br><span class="line">a = []</span><br><span class="line">score = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2，将a[0]到a[10]初始化为0，表示这些分数没有人得过</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print(a) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3，处理每一个人的分数，如，第一个人是5分，将a[5]加1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> score:</span><br><span class="line">    a[i] += <span class="number">1</span></span><br><span class="line"><span class="comment"># print(a) [0, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4，将出现过的分数打印出来即可（出现几次打印几次）</span></span><br><span class="line"><span class="comment"># a[0]为0，表示“0”没有出现过，打印0次</span></span><br><span class="line"><span class="comment"># a[2]为1，表示“2”出现1次，打印1次</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(a):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(value):  <span class="comment"># a[2]=1 打印2一次</span></span><br><span class="line">        print(key, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 2 3 5 5 8</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="程序2：编写一段程序，让计算机随机读入5个数然后将这5个数从小到大输出，要求数的范围是0-10"><a href="#程序2：编写一段程序，让计算机随机读入5个数然后将这5个数从小到大输出，要求数的范围是0-10" class="headerlink" title="程序2：编写一段程序，让计算机随机读入5个数然后将这5个数从小到大输出，要求数的范围是0-10"></a>程序2：编写一段程序，让计算机随机读入5个数然后将这5个数从小到大输出，要求数的范围是0-10</h3><p><strong>c代码</strong></p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a [<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入5个数：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//循环读入5个数，如第一次读入5，则a[5]自增</span></span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//用num保存读入的数字</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">		a[num] += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">		<span class="comment">//printf(&quot;%d &quot;, a[i]);</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);  <span class="comment">// 2 3 5 5 8</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入：5 3 5 2 8</p>
<p>输出：2 3 5 5 8</p>
</blockquote>
<p><strong>python代码</strong></p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">f&#x27;输入第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>个数：&#x27;</span>)</span><br><span class="line">    num = int(input(<span class="string">&quot;&quot;</span>))  <span class="comment"># 这里一次输入一个数，不能一次性全部录入</span></span><br><span class="line">    a[num] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(a):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(value):</span><br><span class="line">        print(key, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 2 3 5 5 8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>依次输入 5  3 5 5 8</p>
<p>输出：2 3 5 5 8</p>
</blockquote>
<h3 id="程序3：将程序2按从大到小输出"><a href="#程序3：将程序2按从大到小输出" class="headerlink" title="程序3：将程序2按从大到小输出"></a>程序3：将程序2按从大到小输出</h3><p><strong>c代码：</strong></p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入5个数: &quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">		a[num]++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i); <span class="comment">// 8 5 5 3 2</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c中只需将 for(i=0; i&lt;11;i++) 改为 for( int i=10; i&gt;=0 ; i–)</p>
</blockquote>
<p><strong>python代码：</strong></p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    num = int(input(<span class="string">f&#x27;输入第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>个数：&#x27;</span>))</span><br><span class="line">    a[num] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">-1</span>, <span class="number">-1</span>):  <span class="comment"># 从后往前遍历</span></span><br><span class="line">    <span class="comment"># print(item)  10 9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a[item]):  <span class="comment"># 如 a[10]=1</span></span><br><span class="line">        print(item, end=<span class="string">&quot; &quot;</span>) <span class="comment"># 8 5 5 3 2</span></span><br></pre></td></tr></table></figure>

<p>注意python中从后往前遍历序列，需要修改 range() 函数的参数</p>
</blockquote>
<h3 id="程序4：输入n个0-1000之间的整数，从大到小排序输出"><a href="#程序4：输入n个0-1000之间的整数，从大到小排序输出" class="headerlink" title="程序4：输入n个0-1000之间的整数，从大到小排序输出"></a>程序4：输入n个0-1000之间的整数，从大到小排序输出</h3><p><strong>C代码：</strong></p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> book[<span class="number">1001</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">		book[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入数据的个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入%d个数：&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">		book[num]++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1001</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; book[i]; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入：10</p>
<p>8   100   50   22 15 6 1 1000 999 0</p>
<p>输出：1000    999    100    50    22    15    8    6    1    0</p>
</blockquote>
<p><strong>python代码：</strong></p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">    book.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">n = int(input(<span class="string">&quot;输入的数据个数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    num = int(input(<span class="string">f&#x27;输入第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>个数：&#x27;</span>))</span><br><span class="line">    book[num] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(book[item]):  <span class="comment"># book[2]=3，将2打印3次</span></span><br><span class="line">        print(item, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入：10</p>
<p>8   100   50   22 15 6 1 1000 999 0</p>
<p>输出：1000    999    100    50    22    15    8    6    1    0</p>
</blockquote>
<h3 id="简化版桶排序"><a href="#简化版桶排序" class="headerlink" title="简化版桶排序"></a>简化版桶排序</h3><ol>
<li><p>时间复杂度：m为桶的个数，n为待排序数的个数，时间复杂度为：O(M+N)</p>
</li>
<li><p>问题1：对于分数排名的问题，若要求对学生的分数进行排序后输入对应的学生姓名，桶排序无法做到</p>
</li>
<li><p>问题2：浪费空间：若需要排序数的范围在0-210000000之间，则需要申请210000001个变量（需要210000000个桶）来存储0-210000000之间每一个数出现的次数，即便只有3个数，1,1912345678，210000000，也需要210000001个桶</p>
</li>
<li><p>问题3：若将5.5678，  2.12， 1.1 ， 3.123  ，4.1234这五个数进行排序，无法进行。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记-- 《啊哈算法》</category>
      </categories>
      <tags>
        <tag>《啊哈算法》</tag>
      </tags>
  </entry>
  <entry>
    <title>错误和异常</title>
    <url>/2020/09/29/python/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><ul>
<li>语法错误又称解析错误</li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul>
<li>在执行时检测到的错误被称为 异常</li>
<li>异常有不同的类型，ZeroDivisionError，NameError，TypeError等</li>
</ul>
<h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><ol>
<li><p>可以编写处理所选异常的程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		x = int(input(<span class="string">&quot;输入一个整数：&quot;</span>))</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">except</span> ValueError:</span><br><span class="line">		print(<span class="string">&quot;不是合法的数字，请重新输入&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>try 语句的工作原理如下:</p>
<ul>
<li>首先，执行 try 子句</li>
<li>如果没有异常发生，则跳过 except 子句并完成 try 语句的执行</li>
<li>如果在执行 try子句时发生了异常，则跳过 try 子句中剩下的部分，然后，如果异常的类型和 except 关键字后面的异常匹配，则执行 except 子句，然后继续执行 try 语句之后的代码</li>
<li>如果发生的异常和 except 子句中指定的异常不匹配，则将其传递到外部的 try 语句中，如果没有找到处理程序，则它是一个 未处理异常。</li>
</ul>
</li>
<li><p>一个 try 语句可能有多个 except 子句，以指定不同异常的处理程序。最多会执行一个处理程序。处理程序只处理 try 子句中发生的异常，而不处理其他处理程序中的异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(c)  <span class="comment"># NameError </span></span><br><span class="line">    <span class="comment"># list[10] #IndexError </span></span><br><span class="line">    <span class="comment"># 1 + &#x27;hello&#x27; # 未知异常</span></span><br><span class="line">    <span class="comment"># print(10/0) #ZeroDivisionError </span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">&#x27;出现 NameError 异常&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&#x27;出现 ZeroDivisionError 异常&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">&#x27;出现 IndexError 异常&#x27;</span>)</span><br><span class="line"><span class="comment"># Exception 是所有异常类的父类，所以如果except后跟的是Exception，他也会捕获到所有的异常</span></span><br><span class="line"><span class="comment"># 可以在异常类后边跟着一个 as xx 此时xx就是异常对象</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;未知异常&#x27;</span>, e, type(e))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;无论是否出现异常，该子句都会执行&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个except子句可以将多个 异常命名为带括号的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> (RuntimeError,TypeError，NameError):</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>try……except 语句有一个可选的 else 子句，在使用时必须放在所有的 except 子句后面，对于在 try 子句不引发异常时必须执行的代码来说很有用。</p>
</li>
</ol>
<h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><ol>
<li><p>异常的传播：</p>
<ul>
<li>当在函数中出现异常时，如果在函数中对异常进行了处理，则异常不会再继续传播</li>
<li>如果函数中没有对异常进行处理，异常会继续向函数调用出传播</li>
<li>如果函数调用处对异常进行了处理，则不再传播，否则继续向调用处传播</li>
<li>直到传递到全局作用域（主模块），如果依然没有处理，程序终止，并且显示异常信息</li>
<li>当程序运行过程中出现异常之后，所有的异常信息会被保存到一个专门的异常对象中，而异常传播时，实际上就是把异常对象抛给了调用处。比如 ZerovisionError类的对象专门用来表示除0的异常，NameError类的对象专门用来处理变量错误的异常。</li>
</ul>
</li>
<li><p>raise 语句允许程序员强制发生指定的异常，后边可以跟一个异常类或异常类的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> NameError(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: hello</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="comment"># 如果a和b中有负数，就向调用处抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span> <span class="keyword">or</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;两个参数中不能有负数！&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(add(<span class="number">-12</span>, <span class="number">45</span>))</span><br></pre></td></tr></table></figure>

<p>raise 唯一的参数就是要抛出的异常，这个参数必须是一个异常实例或者是一个异常类，如果传递的是一个异常类，将通过调用没有参数的构造函数来隐式实例化。</p>
</li>
<li><p>如果需要确定是否引发了异常但不打算处理它，则可以使用更简单的 raise 语句形式重新引发异常</p>
</li>
</ol>
<h3 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h3><ul>
<li><p>可以自定义异常，创建一个类继承Exception即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="定义清理操作"><a href="#定义清理操作" class="headerlink" title="定义清理操作"></a>定义清理操作</h3><ol>
<li><p>try 语句有一个 finally 子句，用于定义必须在所有情况下执行的清理操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	reise KeyboardInterrup</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	print(<span class="string">&quot;hello，world&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果存在 finally 子句，则 finally 子句将作为 try 语句结束前的最后一项任务被执行，finally 子句不论 try 语句是否产生了异常都会被执行。</p>
<ul>
<li>如果在执行 try 子句期间发生异常，该异常可由一个 except 子句进行处理，如果异常没有被某个 except 子句处理，则该异常会在 finally 子句执行之后被重新引发。</li>
<li>异常也可能在 except 或 else 子句执行期间发生，同样，该异常会在 finally 子句执行之后被重新引发。</li>
<li>如果在执行 try 语句时遇到一个 break，continue，或 return 语句，则 finally 子句将在执行 break，continue或 return 语句之前被执行</li>
<li>如果 finally 子句中包含一个 return 语句，则返回值将来自 finally 子句的某个 return 语句的返回值，而非来自 try 子句的 return 语句的返回值。</li>
</ul>
</li>
<li><p>实际应用程序中，finally 子句对于释放外部资源，例如文件或者网络连接非常有用，无论是否成功使用资源。</p>
</li>
</ol>
<h3 id="预定义的清理操作"><a href="#预定义的清理操作" class="headerlink" title="预定义的清理操作"></a>预定义的清理操作</h3><ol>
<li><p>某些对象定义了在不再需要该对象时要执行的标准清理操作，无论使用该对象的操作是成功还是失败，清理操作都会被执行。下面的实例，它尝试打开一个文件并把其内容打印到屏幕上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">&quot;myfile.txt&quot;</span>):</span><br><span class="line">	print(line,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这个代码的问题在于，它在这部分代码执行完后，会使文件在一段不确定的时间内处于打开状态。</p>
</li>
<li><p>with 语句允许像文件这样的对象能够以一种确保它们得到及时和正确的清理的方式使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">		print(line,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>执行完语句后，即使在处理行时遇到问题，文件 f 也始终会被关闭。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2020/10/04/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="面向对象—封装"><a href="#面向对象—封装" class="headerlink" title="面向对象—封装"></a>面向对象—封装</h3><ol>
<li><p>封装指的是隐藏对象中一些不希望被外部访问到的属性或方法</p>
</li>
<li><p>获取/修改 对象中的属性，需要提供一个 getter 和 setter 方法，getter 方法用来获取对象中的指定属性(get _ 属性名)，setter 用来设置对象中的指定属性（set _ 属性名）</p>
</li>
<li><p>使用封装，一定程度上增加了类的复杂程度，但是它增加了数据的安全性。</p>
<ul>
<li>隐藏了属性名，使调用者无法随意修改对象中的属性</li>
<li>增加了 getter 和 setter 方法，控制属性的读和写</li>
<li>使用 setter 方法设置属性，可以增加数据的验证</li>
<li>使用 getter 方法获取属性，可以在读取的同时做一些其他处理，还可以表示一些计算的属性</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.hidden_name = name  <span class="comment"># 隐藏属性名</span></span><br><span class="line">        <span class="keyword">self</span>.hidden_age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(<span class="keyword">self</span>)</span></span>:  <span class="comment"># get_name()用来获取对象的name属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.hidden_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(<span class="keyword">self</span>, name)</span></span>:  <span class="comment"># set_name()用来设置对象的name属性</span></span><br><span class="line">        <span class="keyword">self</span>.hidden_name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.hidden_age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(<span class="keyword">self</span>, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> age &lt; <span class="number">0</span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.hidden_age = <span class="number">0</span></span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.hidden_age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(f<span class="string">&#x27;你好，我是&#123;self.hidden_name&#125;,今年&#123;self.hidden_age&#125;岁&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d1 = Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">8</span>)</span><br><span class="line">d1.say_hello()</span><br><span class="line">d2 = Dog(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">d2.say_hello()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用setter来修改age属性</span></span><br><span class="line">d2.set_age(-<span class="number">10</span>)</span><br><span class="line">print(d2.get_age())  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象的隐藏属性可以使用 __ 开头，隐藏属性只能在类的内部访问，无法通过对象访问。，隐藏属性事实上是python自动为属性修改了一个属性名，将属性名修改为  _ 类名 _ 属性名，比如，__ name -&gt; _ Person _ name</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.__name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">print(p._Person__name)  <span class="comment"># 张三</span></span><br><span class="line">print(p.__name)</span><br><span class="line"><span class="comment"># _AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__name&#x27;,_开头的属性是隐藏属性，无法通过对象访问</span></span><br><span class="line"></span><br><span class="line">p._Person__name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">print(p.get_name())  <span class="comment"># 李四，可以修改</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 __ 开头的属性，实际上通过 _ 类名 _属性名依然可以在外部被访问到，隐藏属性通常是将一些私有属性以 _ 开头</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">print(p._name) <span class="comment"># 张三</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>property 装饰器 ，可以将一个 getter 方法转换为对象的属性，添加property装饰器装饰以后，就可以像调用属性一样使用 getter 方法，要求使用 property 装饰的方法，必须和属性名是一样的。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._name = name</span><br><span class="line">        <span class="keyword">self</span>._age = age</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setter方法的装饰器：@属性名.setter</span></span><br><span class="line">    @name.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._name = name</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._age</span><br><span class="line"></span><br><span class="line">    @age.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">print(p.name, p.age)  <span class="comment"># 张三 18</span></span><br><span class="line">p.name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">p.age = <span class="number">28</span></span><br><span class="line">print(p.name, p.age)  <span class="comment"># 李四 28</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="面向对象—继承"><a href="#面向对象—继承" class="headerlink" title="面向对象—继承"></a>面向对象—继承</h3><ol>
<li><p>通过继承可以使一个类获取到其他类中的属性和方法</p>
</li>
<li><p>在定义类时，可以在类名后的括号中指定当前类的父类（超类，基类，super)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物会跑&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物睡觉&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;狗会跑&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Dog()</span><br><span class="line"></span><br><span class="line">d.sleep()  <span class="comment"># 动物睡觉</span></span><br><span class="line">d.run()  <span class="comment"># 狗会跑</span></span><br><span class="line">d.bark()  <span class="comment"># 汪汪汪</span></span><br><span class="line"></span><br><span class="line">print(isinstance(d, Dog))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(d, Animal))  <span class="comment"># True</span></span><br><span class="line">print(issubclass(Dog, Animal))  <span class="comment"># True issubclass() 检查一个类是否是另一个类的子类</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在创建类时，如果省略了父类，默认父类是 object，它是所有类的父类，所有类都继承自object</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span>(<span class="symbol">object</span>):</span><br><span class="line">    <span class="symbol">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">print</span>(<span class="symbol">issubclass</span>(<span class="symbol">Person, <span class="symbol">object</span></span>))  # <span class="symbol">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重写：如果子类中有和父类同名的方法，则通过子类调用该方法时，会调用子类的方法而不是父类的方法，这就是方法的重写（override）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物会跑&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物睡觉&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;狗在跑&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Dog类的实例</span></span><br><span class="line">d = Dog()</span><br><span class="line">d.run()  <span class="comment"># 狗在跑</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父类中的所有方法都会被子类继承，包括特殊方法，所以也可以对特殊方法重写</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._name = name</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._name</span><br><span class="line"></span><br><span class="line">    @name.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 希望可以直接调用父类的__init__来初始化父类中定义的属性</span></span><br><span class="line">        <span class="comment"># super() 可以用来获取当前类的父类，并且通过super()返回对象调用父类方法时，不需要传递self</span></span><br><span class="line">        <span class="keyword">super</span>().__init_<span class="number">_</span>(name)</span><br><span class="line">        <span class="keyword">self</span>._age = age</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._age</span><br><span class="line"></span><br><span class="line">    @age.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._age = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">print(d.name, d.age)  <span class="comment"># 旺财 18</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多重继承</p>
<ul>
<li><p>python中是支持多重继承的，也就是可以为一个类同时指定多个父类，在类名的() 后面添加多个父类</p>
</li>
<li><p>多重继承会使子类拥有多个父类，并且会获取到所有父类中的方法</p>
</li>
<li><p>如果多个父类中有同名的方法，则会现在第一个父类中寻找，然后找第二个，然后找第三个，以此类推，前边父类的方法会覆盖后边父类的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;BBB&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A, B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类名.__bases__ 这个属性可以用来获取当前类的所有父类</span></span><br><span class="line">print(C.__bases__)  <span class="comment"># (&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;)</span></span><br><span class="line">print(B.__bases__)  <span class="comment"># (&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.test() <span class="comment"># AAA</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="面向对象—多态"><a href="#面向对象—多态" class="headerlink" title="面向对象—多态"></a>面向对象—多态</h3><ol>
<li>封装：确保对象中的数据安全；继承：保证了对象的可扩展性；多态：保证了程序的灵活性</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery代码的编写</title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/1.3jQuery%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h3 id="第一个jQuery程序"><a href="#第一个jQuery程序" class="headerlink" title="第一个jQuery程序"></a>第一个jQuery程序</h3><ol>
<li><p>在jQuery库中，$ 就是jQuery的一个简写形式，例如 $(“#foo”) 和 jQuery(“#foo”) 是等价的，$.ajax 和 jQuery.ajax 是等价的。</p>
</li>
<li><p>等待DOM元素加载完毕，弹出“hello world”</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//等待DOM元素加载完毕</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;hello world&quot;</span>) <span class="comment">//弹出 &quot;hello world&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><blockquote>
<pre><code class="js">$(document).ready(function()&#123;
    //....
&#125;)</code></pre>
<p>这段代码的作用类似于传统JavaScript中的window.onload方法，但有所不同</p>
</blockquote>
</li>
<li><p>window.onload与$(document).ready() 的对比：</p>
</li>
</ol>
<blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th>window.onload</th>
<th>$(document).ready()</th>
</tr>
</thead>
<tbody><tr>
<td align="center">执行时机</td>
<td>必须等待网页中所有的内容加载完毕后（包括图片）才能执行</td>
<td>网页中所有DOM结构绘制完毕后就执行，可能DOM元素关联的东西并没有加载完</td>
</tr>
<tr>
<td align="center">编写个数</td>
<td>不同编写多个；</td>
<td>能同时编写多个；</td>
</tr>
<tr>
<td align="center">简化写法</td>
<td>无</td>
<td>可以简写为：$(function(){  //….   })</td>
</tr>
</tbody></table>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记--《锋利的jQuery》</category>
      </categories>
      <tags>
        <tag>《锋利的jQuery》</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2020/11/28/%E3%80%8A%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E3%80%8B/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul>
<li>基本思想：每次比较两个相邻的元素，如果它们的顺序错误就把它们交换</li>
<li>原理：每一趟只能确定将一个数归位</li>
<li>如果有n个数进行排序，只需将 n-1 个数归位，也就是说要进行 n-1 趟操作，而“每一趟”都需要从第一位开始进行相邻两个数的比较，将较小的一个数放在后面，比较完毕后向后挪一位继续比较下面两个相邻数的大小，重复此步骤，直到最后一个尚未归位的数。</li>
</ul>
<h3 id="程序1：将5个无序的数-3-9-1-10-2，使用冒泡排序从小到大排序"><a href="#程序1：将5个无序的数-3-9-1-10-2，使用冒泡排序从小到大排序" class="headerlink" title="程序1：将5个无序的数 3    9     -1    10    2，使用冒泡排序从小到大排序"></a>程序1：将5个无序的数 3    9     -1    10    2，使用冒泡排序从小到大排序</h3><ol>
<li><p>分析：</p>
<p>第一轮：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">9</span> -<span class="number">1</span> <span class="number">10</span> -<span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span>-<span class="number">1</span> <span class="number">9</span> <span class="number">10</span> -<span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span>-<span class="number">1</span> <span class="number">9</span> <span class="number">10</span> -<span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span>-<span class="number">1</span> <span class="number">9</span> -<span class="number">2</span> <span class="number">10</span>  //第一大的数移到最后</span><br></pre></td></tr></table></figure>

<p>第二轮：　</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>  <span class="number">3</span> <span class="number">9</span> <span class="number">-2</span> <span class="number">10</span></span><br><span class="line"><span class="number">-1</span>  <span class="number">3</span> <span class="number">9</span> <span class="number">-2</span> <span class="number">10</span></span><br><span class="line"><span class="number">-1</span>  <span class="number">3</span> <span class="number">-2</span> <span class="number">9</span> <span class="number">10</span> <span class="comment">//第二大的数就位</span></span><br></pre></td></tr></table></figure>

<p>第三轮：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="number">3</span> <span class="number">-2</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-2</span>  <span class="number">3</span> <span class="number">9</span> <span class="number">10</span> <span class="comment">// 第三大的数就位</span></span><br></pre></td></tr></table></figure>

<p>第四轮：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-2</span> <span class="number">-1</span> <span class="number">3</span> <span class="number">9</span> <span class="number">10</span>  <span class="comment">// 全部就位</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>先进行第一轮排序：</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123; <span class="number">3</span>,<span class="number">9</span>,<span class="number">-1</span>,<span class="number">10</span>,<span class="number">-2</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123; <span class="comment">//第一轮，需要进行4次比较</span></span><br><span class="line">	<span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = a[i];</span><br><span class="line">		a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">		a[i + <span class="number">1</span>] = t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第一轮排序后：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一轮排序后：3 -1 9 -2 10</p>
</blockquote>
</li>
<li><p>第一轮排序需要比较4次，第二轮排序需要比较3次，第三轮排序需要比较2次，第四轮排序需要比较1次，因此第 i 轮排序，需要比较（n-i）次，i从1开始。</p>
</li>
<li><p>C代码</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">5</span>] = &#123; <span class="number">3</span>,<span class="number">9</span>,<span class="number">-1</span>,<span class="number">10</span>,<span class="number">-2</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">4</span>; i++) &#123; <span class="comment">//共进行4轮比较</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">5</span> - i); j++) &#123; <span class="comment">//第i轮比较，比较(n-i)次，如第1轮比较，比较4次;</span></span><br><span class="line">			<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">int</span> t = a[j];</span><br><span class="line">				a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%d轮排序后：&quot;</span>, i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>第1轮排序后：3 -1 9 -2 10<br>第2轮排序后：-1 3 -2 9 10<br>第3轮排序后：-1 -2 3 9 10<br>第4轮排序后：-2 -1 3 9 10</p>
</blockquote>
</li>
<li><p>python代码</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">3</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">10</span>, <span class="number">-2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span> - i):  <span class="comment"># 第0轮循环，需要比较4次;第1轮循环，需要比较3次</span></span><br><span class="line">        <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]):</span><br><span class="line">            t = a[j]</span><br><span class="line">            a[j] = a[j + <span class="number">1</span>]</span><br><span class="line">            a[j + <span class="number">1</span>] = t</span><br><span class="line">    print(<span class="string">f&#x27;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>轮循环后:<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>第1轮循环后:    [3, -1, 9, -2, 10]<br>第2轮循环后:    [-1, 3, -2, 9, 10]<br>第3轮循环后:    [-1, -2, 3, 9, 10]<br>第4轮循环后:    [-2, -1, 3, 9, 10]</p>
</blockquote>
</li>
</ol>
<h3 id="程序2：输入-n-表示n个数）以及-n个待排序的数，输出进行从小到大冒泡排序后的结果"><a href="#程序2：输入-n-表示n个数）以及-n个待排序的数，输出进行从小到大冒泡排序后的结果" class="headerlink" title="程序2：输入:n(表示n个数）以及 n个待排序的数，输出进行从小到大冒泡排序后的结果"></a>程序2：输入:n(表示n个数）以及 n个待排序的数，输出进行从小到大冒泡排序后的结果</h3><p>c代码</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1，定义一个存放待排序数的数组a以及一个变量n保存待排序数的数目</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数n,接下来将有n个数进行排序：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2，循环读入n个数到待排序数组a中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开始进行冒泡排序 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123; <span class="comment">//n个数，(n-1)轮排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (n - i); j++) &#123; <span class="comment">//如第1轮排序，需要比较(n-1)次</span></span><br><span class="line">			<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">int</span> t = a[j];</span><br><span class="line">				a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%d轮排序后：&quot;</span>, i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>输入一个正整数n,接下来将有n个数进行排序：10<br>8 100 50 22 15 6 1 1000 999 0<br>第1轮排序后：8 50 22 15 6 1 100 999 0 1000<br>第2轮排序后：8 22 15 6 1 50 100 0 999 1000<br>第3轮排序后：8 15 6 1 22 50 0 100 999 1000<br>第4轮排序后：8 6 1 15 22 0 50 100 999 1000<br>第5轮排序后：6 1 8 15 0 22 50 100 999 1000<br>第6轮排序后：1 6 8 0 15 22 50 100 999 1000<br>第7轮排序后：1 6 0 8 15 22 50 100 999 1000<br>第8轮排序后：1 0 6 8 15 22 50 100 999 1000<br>第9轮排序后：0 1 6 8 15 22 50 100 999 1000</p>
</blockquote>
<p>python代码</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input(<span class="string">&quot;输入n，表示将有n个待排序的数:&quot;</span>))</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    num = int(input(<span class="string">f&#x27;输入第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>个数：&#x27;</span>))</span><br><span class="line">    a.append(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):  <span class="comment"># n个数，进行(n-1)轮排序</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n - <span class="number">1</span> - i):  <span class="comment"># 第0轮排序，需要比较(n-1)次,第1轮排序，比较(n-2)次</span></span><br><span class="line">        <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]):</span><br><span class="line">            t = a[j]</span><br><span class="line">            a[j] = a[j + <span class="number">1</span>]</span><br><span class="line">            a[j + <span class="number">1</span>] = t</span><br><span class="line">    print(<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>轮排序：<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="程序3：输入5个学生的姓名和分数，将分数从小到大排序，输出对应的学生姓名"><a href="#程序3：输入5个学生的姓名和分数，将分数从小到大排序，输出对应的学生姓名" class="headerlink" title="程序3：输入5个学生的姓名和分数，将分数从小到大排序，输出对应的学生姓名"></a>程序3：输入5个学生的姓名和分数，将分数从小到大排序，输出对应的学生姓名</h3><p>c代码</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1,创建一个结构体用来存储姓名和分数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2,定义变量n用于保存学生人数，student类型的数组a保存n个学生的姓名和分数</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>[100];</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入n，表示学生人数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3,循环读入n个学生的姓名和分数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入%d个学生的姓名和分数：\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, a[i].name, &amp;(a[i].score));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4,按分数进行冒泡排序，从低到高</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (n - i); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j].score &gt; a[j + <span class="number">1</span>].score) &#123;</span><br><span class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">t</span> = <span class="title">a</span>[<span class="title">j</span>];</span></span><br><span class="line">				a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;排序结果是：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s：%d\n&quot;</span>, a[i].name, a[i].score);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入n，表示学生人数：5<br>输入5个学生的姓名和分数：<br>huhu 5<br>haha 3<br>xixi 5<br>hengheng 2<br>gaoshou 8</p>
<p>排序结果是：<br>hengheng：2<br>haha：3<br>huhu：5<br>xixi：5<br>gaoshou：8</p>
</blockquote>
<p>python代码</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1,定义n用来保存学生人数，数组a用来保存所有学生的姓名和分数</span></span><br><span class="line">n = int(input(<span class="string">&quot;输入n，表示学生人数：&quot;</span>))</span><br><span class="line">a = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2,循环输入n个学生的姓名和分数到</span></span><br><span class="line">print(<span class="string">f&#x27;输入<span class="subst">&#123;n&#125;</span>个学生的姓名和分数：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    d = &#123;&#125;  <span class="comment"># 定义一个空字典</span></span><br><span class="line">    d[<span class="string">&#x27;name&#x27;</span>] = input(<span class="string">f&#x27;输入第<span class="subst">&#123;i&#125;</span>个学生的姓名:&#x27;</span>)</span><br><span class="line">    d[<span class="string">&#x27;score&#x27;</span>] = int(input(<span class="string">f&#x27;输入第<span class="subst">&#123;i&#125;</span>个学生的分数：&#x27;</span>))</span><br><span class="line">    a.append(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n - <span class="number">1</span> - i):</span><br><span class="line">        <span class="keyword">if</span> (a[j][<span class="string">&#x27;score&#x27;</span>] &lt; a[j + <span class="number">1</span>][<span class="string">&#x27;score&#x27;</span>]):</span><br><span class="line">            t = a[j]</span><br><span class="line">            a[j] = a[j + <span class="number">1</span>]</span><br><span class="line">            a[j + <span class="number">1</span>] = t</span><br><span class="line">            </span><br><span class="line">print(<span class="string">&quot;排名是：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(a[i][<span class="string">&#x27;name&#x27;</span>], a[i][<span class="string">&#x27;score&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>输入5个学生的姓名和分数</p>
<p>排名是：<br>gaoshou 8<br>huhu 5<br>xixi 5<br>haha 3<br>hengheng 2</p>
</blockquote>
<p>总结</p>
<ol>
<li>冒泡排序的核心部分是双重嵌套循环</li>
<li>时间复杂度是 O(N^2)，算法复杂度非常高</li>
<li>冒泡排序可以解决桶排序浪费空间的问题</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记-- 《啊哈算法》</category>
      </categories>
      <tags>
        <tag>《啊哈算法》</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery对象和DOM对象</title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/1.4jQuery%E5%AF%B9%E8%B1%A1%E5%92%8CDOM%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><ol>
<li><p>DOM：Document Object Model ，文档对象模型，每一份DOM都可以表示成一棵树（DOM树）</p>
</li>
<li><p>可以通过JavaScript中的getElementsByTagName 或者 getElementsById 来获取元素结点，像这样得到的DOM元素就是DOM对象</p>
</li>
<li><p>DOM对象可以使用JavaScript中的方法：</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> domObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;id&quot;</span>); <span class="comment">// 获得DOM对象</span></span><br><span class="line"><span class="keyword">var</span> objHtml = domObj.innerHTML; <span class="comment">// 使用JavaScript中的方法--innerHTML</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h3 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h3><ol>
<li><p>jQuery对象就是通过jQuery包装DOM对象后产生的对象</p>
</li>
<li><p>jQuery对象是jQuery独有的，如果一个对象是jQuery对象，那么可以使用jQuery中的方法，如：</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#foo&quot;</span>).html();  <span class="comment">// 获取id为foo的元素内的html代码，.html() 是jquery里的方法</span></span><br></pre></td></tr></table></figure>

<p>等同于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>).innerHTML;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在jQuery对象中无法使用DOM对象的任何方法，例如 $(“#id”).innerHTML 和 $(“#id”).checked 之类的写法都是错误的，可以使用 $(“#id”).html() 和 $(“#id”).attr(“checked”)之类的jQuery方法来代替</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=$(<span class="string">&quot;#foo&quot;</span>).innerHTML;</span><br><span class="line"><span class="keyword">var</span> b=$(<span class="string">&quot;#foo&quot;</span>).html()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//hello</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>同样，DOM对象也不能使用jQuery对象的方法，例如，document.getElementById(“id”).html() 也会报错，只能用 document.getElementById(“id”).innerHTML 语句</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>).innerHTML;</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">//hello</span></span><br><span class="line"><span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>).html()</span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">//Uncaught TypeError: document.getElementById(...).html is not a function</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h3 id="jQuery对象和DOM对象的相互转换"><a href="#jQuery对象和DOM对象的相互转换" class="headerlink" title="jQuery对象和DOM对象的相互转换"></a>jQuery对象和DOM对象的相互转换</h3><ol>
<li><p>jQuery对象转换为DOM对象</p>
<ul>
<li><p>转换场景：如果对jQuery对象所提供的方法不熟悉，或者jQuery没有封装想要的方法，不得不使用DOM对象的时候，可以将jQuery对象转换为DOM对象</p>
</li>
<li><p>方法一：[index]</p>
<blockquote>
<p>jQueryus对象是一个数组对象，可以通过 [index] 方法得到相应的DOM对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $cr = $(<span class="string">&quot;#cr&quot;</span>); <span class="comment">// $cr 是jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> cr = $cr[<span class="number">0</span>]; <span class="comment">// cr 是DOM对象</span></span><br><span class="line">alert(cr.checked); <span class="comment">// 使用DOM对象的方法检测这个checkbox是否被选中了</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>方法二：get (index)</p>
<blockquote>
<p>这种方法是jQuery本身提供的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $cr = $(<span class="string">&quot;#cr&quot;</span>); <span class="comment">// $cr是jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> cr = $cr.get(<span class="number">0</span>); <span class="comment">// cr是DOM对象</span></span><br><span class="line">alert(cr.checked); <span class="comment">//使用DOM对象的方法检测这个checkbox是否被选中了</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><p>DOM对象转换为jQuery对象</p>
<ul>
<li><p>只需要用 $() 把DOM对象包装起来，就可以获得一个jquery对象了，方式为 $(DOM对象)</p>
<blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cr = document.getElementById(<span class="string">&quot;cr&quot;</span>); <span class="comment">// cr是DOM对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="symbol">$cr</span> = $(cr); <span class="comment">// $cr是jQuery对象</span></span><br></pre></td></tr></table></figure>

<p>转换后，可以使用jQuery中的方法</p>
</blockquote>
</li>
<li><p>平时用到的jQuery对象都是通过 $() 函数制造出来的，$() 函数就是一个jQuery对象的制造工厂</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记--《锋利的jQuery》</category>
      </categories>
      <tags>
        <tag>《锋利的jQuery》</tag>
      </tags>
  </entry>
  <entry>
    <title>‘解决jquery和其他库的冲突&#39;</title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/1.5%E8%A7%A3%E5%86%B3jquery%E5%92%8C%E5%85%B6%E4%BB%96%E5%BA%93%E7%9A%84%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h3 id="jquery库在其他库之后导入"><a href="#jquery库在其他库之后导入" class="headerlink" title="jquery库在其他库之后导入"></a>jquery库在其他库之后导入</h3><blockquote>
<p>在其他库和jQuery都被加载完毕后，可以在任何时候调用jQuery.noConflict() 函数来将变量$的控制权移交给其他JavaScript库。</p>
</blockquote>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入prototype --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/prototype/1.6.0.3/prototype.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入jquery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>test---prototype<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>test---jquery<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    jQuery.noConflict(); <span class="comment">// 将变量$的控制权移交给prototype.js</span></span></span><br><span class="line"><span class="javascript">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        jQuery(<span class="string">&quot;p&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(jQuery(<span class="built_in">this</span>).text())</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;test&quot;</span>).style.display=<span class="string">&#x27;none&#x27;</span>; <span class="comment">// 使用prototype</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以在程序里将jQuery() 函数作为jQuery对象的制造工厂</p>
</blockquote>
<h3 id="jquery在其他库之前导入"><a href="#jquery在其他库之前导入" class="headerlink" title="jquery在其他库之前导入"></a>jquery在其他库之前导入</h3><blockquote>
<p>可以直接使用 “ jQuery” 来做一些jQuery的工作，同时，可以使用 $() 方法作为其他库的快捷方式，无需调用 jQuery.noConflict() 函数。</p>
</blockquote>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入jquery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入prototype --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/prototype/1.6.0.3/prototype.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>test--prototype<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>test-jquery<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        jQuery(<span class="string">&quot;p&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//直接使用jquery,不用调用&quot;jQuery.noConflict()&quot;函数</span></span></span><br><span class="line"><span class="javascript">            alert(jQuery(<span class="built_in">this</span>).text())</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;test&quot;</span>).style.display=<span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记--《锋利的jQuery》</category>
      </categories>
      <tags>
        <tag>《锋利的jQuery》</tag>
      </tags>
  </entry>
  <entry>
    <title>‘jQuery选择器&#39;</title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/2.1jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><ol>
<li><p>常用的CSS选择器</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>语法</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>标签选择器</td>
<td>E{ CSS规则 }</td>
<td>以文档元素作为选择符</td>
<td>td{ font-size：14px; }</td>
</tr>
<tr>
<td>ID选择器</td>
<td>#ID{ css规则 }</td>
<td>以文档元素的class作为选择符</td>
<td>div.note{ font-size: 14px; }</td>
</tr>
<tr>
<td>群组选择器</td>
<td>E1，E2，E3{ CSS规则 }</td>
<td>多个选择符应用同样的样式规则</td>
<td>td，p，div.a { font-size：14px; }</td>
</tr>
<tr>
<td>后代选择器</td>
<td>E F{ CSS规则 }</td>
<td>元素E的任意后代元素F</td>
<td>#links  a { color：red; }</td>
</tr>
<tr>
<td>通配选择器</td>
<td>* { css 规则 }</td>
<td>以文档的所有元素作为选择符</td>
<td>* { font-size：14px; }</td>
</tr>
<tr>
<td>伪类选择器</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>子选择器</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>临近选择器</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>属性选择器</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>把CSS应用到网页中有3种方式：行间样式表、内部样式表、外部样式表</p>
</li>
<li><p>主流浏览器并非完全支持所有的CSS选择器</p>
</li>
</ol>
<h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><ol>
<li><p>jQuery选择器完全继承了CSS的风格，使用jQuery选择器无需担心浏览器是否支持这一选择器。</p>
</li>
<li><p>jQuery选择器的写法与CSS选择器非常相似，CSS选择器找到元素后通常是添加样式，而jQuery选择器找到元素后通常是添加行为。</p>
<blockquote>
<p>CSS获取元素添加事件：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">.demo&#123;  <span class="regexp">//</span>给<span class="class"><span class="keyword">class</span>为<span class="title">demo</span>的元素添加样式</span></span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>jQuery获取元素添加行为：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.demo&quot;</span> &#123;  <span class="regexp">//</span>给<span class="class"><span class="keyword">class</span>为<span class="title">demo</span>的元素添加行为</span></span><br><span class="line">	.....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</blockquote>
</li>
<li><p>jQuery中涉及CSS样式的部分比单纯的CSS功能更加强大，并拥有跨浏览器的兼容性。</p>
</li>
</ol>
<h3 id="jQuery选择器优势："><a href="#jQuery选择器优势：" class="headerlink" title="jQuery选择器优势："></a>jQuery选择器优势：</h3><ol>
<li><p>简洁的写法：</p>
<ul>
<li>$(“#id”) 用来代替 document.getElementById() 函数</li>
<li>$(“tagName”) 用来代替 document.getElementsVByTagName() 函数</li>
</ul>
</li>
<li><p>支持CSS1到CSS3选择器</p>
<ul>
<li>jQuery选择器支持CSS1，CSS2,的全部选择器和CSS3的部分选择器，同时它自己也有少量独有的选择器</li>
</ul>
</li>
<li><p>完善的处理机制</p>
<ul>
<li><p>使用jQuery选择器不仅比使用传统的getElementById() 和 getElementsByTagName() 函数简洁，而且还能避免某些错误</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).style.color=<span class="string">&quot;red&quot;</span> </span></span><br><span class="line"><span class="javascript">    <span class="comment">//Uncaught TypeError: Cannot read property &#x27;style&#x27; of null</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码，浏览器会报错，因为网页中没有 id 为 demo 的元素</p>
</blockquote>
<p>改进后为：</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  	<span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>))&#123;</span></span><br><span class="line"><span class="javascript">  		<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).style.color=<span class="string">&quot;red&quot;</span> </span></span><br><span class="line">  	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样可以避免浏览器报错，但需要操作的元素很多</p>
</blockquote>
</li>
<li><p>jQuery获取网页中不存在的元素不会报错</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="string">&quot;#demo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">//这里无需判断$(&quot;#demo&quot;)是否存在</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个预防措施，及时以后因为某种原因删除网页上某个以前使用过的元素，也不用担心这个网页的JavaScript代码会报错。</p>
</blockquote>
</li>
<li><p>需要注意的是，$(“#demo”) 获取的永远是对象，即使网页上没有这个元素</p>
<blockquote>
<p>当用jQuery检查某个元素在网页上是否存在时，不能使用以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">if</span>($(<span class="string">&quot;#demo&quot;</span>))&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>);</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面中没有 id 为demo的元素，依然会打印出 aaa</p>
</blockquote>
<blockquote>
<p>而应该根据获取到的元素的长度来判断：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">if</span>($(<span class="string">&quot;#demo&quot;</span>).length&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;bbb&quot;</span>);</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面中没有 id 为 demo 的元素，不打印 bbb</p>
</blockquote>
<blockquote>
<p>或者转化为DOM对象来判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">if</span>($(<span class="string">&quot;#demo&quot;</span>)[<span class="number">0</span>])&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="string">&quot;ccc&quot;</span>);</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><blockquote>
<p>jQuery中最常用，最简单的选择器，通过元素id，class 和标签名等来查找DOM元素</p>
</blockquote>
<blockquote>
<table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
<th>返回</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>#id</td>
<td>根据给定的id匹配一个元素</td>
<td>单个元素</td>
<td>$(“#test”) ：选取id为test的元素</td>
</tr>
<tr>
<td>.class</td>
<td>根据给定的类名匹配一个元素</td>
<td>集合元素</td>
<td>$(“.test”)：选取 class为test的元素</td>
</tr>
<tr>
<td>element</td>
<td>根据给定的元素名匹配元素</td>
<td>集合元素</td>
<td>$(“p”) ：选取所有的p元素</td>
</tr>
<tr>
<td>*</td>
<td>匹配所有元素</td>
<td>集合元素</td>
<td>$(“*”)：选取所有的元素</td>
</tr>
<tr>
<td>selector1，selector2，……</td>
<td>将每一个选择器匹配到的元素合并后一起返回</td>
<td>集合元素</td>
<td>$(“div，span，p.myClass”)：选取所有 div，span，和class为myClass的p标签元素。</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><blockquote>
<table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
<th>返回</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>$(“ancestor  descendant”)</td>
<td>选取ancestor元素里的所有descendant(后代)元素</td>
<td>集合元素</td>
<td>$(“div span”)：选取div里的所有span元素</td>
</tr>
<tr>
<td>$(“parent&gt;child”)</td>
<td>选取parent元素下的子元素，与后代元素有区别</td>
<td>集合元素</td>
<td>$(“div&gt;span”)：选取div元素下元素名是span的子元素(直接子元素)</td>
</tr>
<tr>
<td>$(“prev+next”)</td>
<td>选取紧接在prev元素后的next元素</td>
<td>集合元素</td>
<td>$(“.one+div”)：选取class为one元素的下一个div元素</td>
</tr>
<tr>
<td>$(“prev~siblings”)</td>
<td>选取prev元素之后的所有siblings元素</td>
<td>集合元素</td>
<td>$(“#two~div”)：选取id为two的元素后面的所有div兄弟元素</td>
</tr>
</tbody></table>
</blockquote>
<blockquote>
<ul>
<li>第一个和第二个比较常用，后面两个jQuery中有更简单的方式代替。</li>
<li>next()方法代替$(“prev+next”) 选择器，即 $(“.one+div”) = $(“.one”).next(“div”)</li>
<li>nextAll() 方法代替$(“prev<del>siblings”)选择器，即$(“#two</del>div”) = $(“#two”).nextAll(“div”)，选择#two元素后面的同辈div元素</li>
<li>siblings() 方法与前后位置无关，只要是同辈结点都匹配，如，$(“#two”).siblings(“div”);</li>
</ul>
</blockquote>
<h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><ol>
<li><p>主要是通过特定的过滤规则来筛选出DOM元素，过滤规则与CSS中的伪类选择器语法相同，都以一个冒号：开头</p>
</li>
<li><p>按照不同的过滤规则，可以分为基本过滤，内容过滤，可见性过滤，属性过滤，子元素过滤，表单对象属性过滤</p>
</li>
<li><p>基本过滤选择器</p>
<blockquote>
<table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
<th>返回</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>:first</td>
<td>选取第一个元素</td>
<td>单个元素</td>
<td>$(“div:first”)：选取所有div元素中的第一个div元素</td>
</tr>
<tr>
<td>:last</td>
<td>选取最后一个元素</td>
<td>单个元素</td>
<td>$(“div:last”)：选取所有div元素中的最后一个div元素</td>
</tr>
<tr>
<td>:not(selector)</td>
<td>去除所有与给定选择器匹配的元素</td>
<td>集合元素</td>
<td>$(“input:not(.myClass)”)：选取class不是myClass的input元素</td>
</tr>
<tr>
<td>:even</td>
<td>选取索引是偶数的所有元素，索引从0开始</td>
<td>集合元素</td>
<td>$(“input:even”)：选取索引是偶数的input元素</td>
</tr>
<tr>
<td>:odd</td>
<td>选取索引是奇数的所有元素，索引从0开始</td>
<td>集合元素</td>
<td>$(“input:odd”)：选取索引是奇数的input元素</td>
</tr>
<tr>
<td>:eq(index)</td>
<td>选取索引等于index的元素，index从0开始</td>
<td>单个元素</td>
<td>$(“input:eq(1)”)：选取索引是1的input元素</td>
</tr>
<tr>
<td>:gt(index)</td>
<td>选取索引大于index的元素，index从0开始</td>
<td>集合元素</td>
<td>$(“input:gt(1)”)：选取索引大于1的input元素</td>
</tr>
<tr>
<td>:lt(index)</td>
<td>选取索引小于index的元素，index从0开始</td>
<td>集合元素</td>
<td>$(“input:lt(1)”)：选取索引小于1的input元素</td>
</tr>
<tr>
<td>:header</td>
<td>选取所有标题元素，如h1,h2,h3</td>
<td>集合元素</td>
<td>$(“:header”)：选取网页中所有的 h1，h2，h3….元素</td>
</tr>
<tr>
<td>:animated</td>
<td>选取当前正在执行动画的所有元素</td>
<td>集合元素</td>
<td>$(“div:animated”)：选取正在执行动画的div元素</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>内容过滤选择器</p>
<blockquote>
<p>过滤规则主要体现在它所包含的子元素或文本内容上</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
<th>返回</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>:contains(text)</td>
<td>选取含有文本内容为“text”的元素</td>
<td>集合元素</td>
<td>$(“div:contains(‘我’)”)：选取含有文本”我“的div元素</td>
</tr>
<tr>
<td>:empty</td>
<td>选取不包含子元素或者文本的空元素</td>
<td>集合元素</td>
<td>$(“div:empty”)：选取不包含子元素（包括文本元素）的div空元素</td>
</tr>
<tr>
<td>:has(selector)</td>
<td>选取含有选择器所匹配的元素的元素</td>
<td>集合元素</td>
<td>$(“div:has(p)”)：选取含有p元素的div元素</td>
</tr>
<tr>
<td>:parent</td>
<td>选取含有子元素或者文本元素的元素</td>
<td>集合元素</td>
<td>$(“div:parent”)：选取拥有子元素（包括文本元素）的div元素</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>可见性过滤选择器</p>
<blockquote>
<p>根据元素的可见和不可见的状态来选择相应的元素</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
<th>返回</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>:hidden</td>
<td>选取所有不可见的元素</td>
<td>集合元素</td>
<td>$(“:hidden”)：所有不可见的元素。包括 &lt;input type=”hidden”‘&gt;，&lt;div style=”display:none;”‘&gt;  和 &lt;div sytle=”visibility:hidden;”‘&gt; 等元素，如果只想选取input 元素，可以使用 $(“input:hidden”)</td>
</tr>
<tr>
<td>:visiblie</td>
<td>选取所有可见的元素</td>
<td>集合元素</td>
<td>$(“div:visible”) ：选取所有可见的 div 元素</td>
</tr>
</tbody></table>
<p>注意选择器：hidden，它不仅包括样式属性 display为”none”的元素，也包括文本域 input type=”hidden” 和 visibility：hidden之类的元素</p>
</blockquote>
</li>
<li><p>属性过滤选择器</p>
<blockquote>
<p>过滤规则是通过元素的属性来获取相应的元素</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>子元素过滤选择器</p>
</li>
<li><p>表单对象过滤选择器</p>
</li>
</ol>
<h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><h3 id="选择器中的一些注意事项"><a href="#选择器中的一些注意事项" class="headerlink" title="选择器中的一些注意事项"></a>选择器中的一些注意事项</h3><ol>
<li>属性选择器的引号问题</li>
<li></li>
</ol>
<h3 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h3>]]></content>
      <categories>
        <category>读书笔记--《锋利的jQuery》</category>
      </categories>
      <tags>
        <tag>《锋利的jQuery》</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript和JavaScript库</title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/1.1JavaScript%E5%92%8CJavaScript%E5%BA%93/</url>
    <content><![CDATA[<h3 id="JavaScript自身存在三个弊端："><a href="#JavaScript自身存在三个弊端：" class="headerlink" title="JavaScript自身存在三个弊端："></a>JavaScript自身存在三个弊端：</h3><ol>
<li>复杂的文档对象模型（DOM）</li>
<li>不一致的浏览器实现</li>
<li>缺乏便捷的开发、调试工具</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记--《锋利的jQuery》</category>
      </categories>
      <tags>
        <tag>《锋利的jQuery》</tag>
      </tags>
  </entry>
  <entry>
    <title>数论</title>
    <url>/2020/09/26/%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%95%B0%E8%AE%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="素数与非素数"><a href="#素数与非素数" class="headerlink" title="素数与非素数"></a>素数与非素数</h3><p><strong>因子</strong></p>
<ul>
<li>设a，b(b≠0)，是两个整数，如果存在另一个整数 m，使得 a=mb，则称b整除a，记为 b|a ，且称 b 是 a 的因子。</li>
<li>如：6=2x3，3|6（3整除6），3是6的因子</li>
</ul>
<p><strong>整数有以下性质：</strong></p>
<ul>
<li>a|1，那么 a=±1  （1的因子是正负1）</li>
<li>a|b 且 b|a，则 a=±b</li>
<li>对任一b（b≠0），b|0  （0的因子是所有非0整数）</li>
<li>b|g，b|h，则对任一整数m，n 有 b|(mg+nh)</li>
</ul>
<p><strong>素数</strong></p>
<ul>
<li>整数p，p&gt;1，p的因子只有±1，±p，p是素数</li>
</ul>
<p><strong>整数分解的唯一性：</strong></p>
<ul>
<li>任一整数a，a&gt;1，都能唯一分解为：<img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926131033205.png" alt="image-20200926131033205" style="zoom: 50%;" /></li>
<li>其中p1&gt;p2&gt;p3……，pt 是素数，</li>
<li>如：91=13x7，11011=13x 11^2 x7</li>
</ul>
<p><strong>互素数</strong></p>
<ul>
<li>c=gcd(a,b)，c&gt;0</li>
<li>c是a,b的最大公因子，a和b的任一公因子，也是c的因子</li>
<li>若 gcd(a,b) =1，则称 a和 b互素（a和b的最大公因子是1）</li>
</ul>
<h3 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h3><p><strong>模n同余</strong></p>
<ul>
<li>(a mod n) = (b mod n) ，则称两整数 a，b模n同余，记作 a≡b mod n</li>
<li>如 1≡11 mod 5，(1 mod 5) = (11 mod 5)，1和11模5同余</li>
<li>同余有以下性质<ul>
<li>若 n|(a-b)，则  a≡b mod n</li>
<li>(a mod n) = (b mod n) ，则 a≡b mod n</li>
<li>a≡b mod n，则 b≡a mod n</li>
<li>a≡b mod n，b≡c mod n，则 a≡c mod n</li>
</ul>
</li>
<li>模运算有以下性质<ul>
<li>[ (a mod n) + (b mod n) ] mod n = (a+b) mod n</li>
<li>[ (a mod n) - (b mod n) ] mod n =  (a-b) mod n</li>
<li>[ (a mod n) x (b mod n) ] mod n = (axb) mod n</li>
</ul>
</li>
<li>乘法逆元<ul>
<li>设a∈Zn，Zn={0,1,2,3,4，……，n-1}，gcd(a，n) =1，则 a在Zn中有乘法逆元</li>
<li>如：模8的乘法运算，1,3,5,7 有逆元</li>
</ul>
</li>
</ul>
<h3 id="费尔马定理"><a href="#费尔马定理" class="headerlink" title="费尔马定理"></a>费尔马定理</h3><ul>
<li>Fermat定理：若p是素数，a是正整数，且 gcd(a,p) = 1，则 a^(p-1) ≡ a mod p</li>
<li>如：7是素数，在Z7中，3是正整数，且 gcd(3,7) = 1，则 3^(7-1) mod 7 = 1</li>
</ul>
<h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><ul>
<li>欧拉函数：设n是一正整数，小于n且与n互素的正整数的个数称为 欧拉函数，记作 ψ(n)<ul>
<li>如： ψ(3)=2， ψ(7)=6,  ψ(8)=4</li>
<li>若 n是素数，显然有  ψ(n) = n-1</li>
<li>定理：若n 是两个素数 p和q 的乘积，则  ψ(n)= ψ(p) x  ψ(q) =(p-1) x (q-1)</li>
<li>如： ψ(21) =  ψ(3) x  ψ(7) = 2x6 = 12</li>
</ul>
</li>
<li>Euler定理：若 a 和 n互素，则 a ^  ψ(n) ≡ 1 mod n<ul>
<li>例如，3^ ψ(8) mod 8 =1</li>
</ul>
</li>
</ul>
<h3 id="素性检验"><a href="#素性检验" class="headerlink" title="素性检验"></a>素性检验</h3><ul>
<li>对给定的数检验其是否为素数</li>
<li>概率检验法</li>
<li>-2≡1 mod 3</li>
<li>2≡ -1 mod 3</li>
</ul>
<h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><p><strong>求最大公因子</strong></p>
<ul>
<li>对任意非负整数a 和正整数 b，有 gcd(a，b) = gcd(b，a mod b)</li>
<li>例如：gcd(18，12) = gcd(12,6) = gcd(6,0) = 6</li>
</ul>
<p><strong>求乘法逆元</strong></p>
<p><img src="C:\Users\高萍\Desktop\MyHexoBlogs\myblogs\source_posts\密码学\01.png" alt="https://wx2.sinaimg.cn/mw690/007gSPK8gy1gj41iuxudoj304i00u741.jpg"></p>
<ul>
<li>x是 a 关于 m的乘法逆元</li>
<li>仅当 gcd(a，m) =1 时，</li>
</ul>
<p><strong>扩展欧几里得定理</strong></p>
<h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><h3 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h3><p><strong>求模下的整数幂</strong></p>
<ul>
<li>a^m ≡ 1 mod n</li>
<li>如果 a与n互素，则至少有一整数m满足这一方程，称满足方程的最小正整数 m 为模n下 a的阶</li>
<li>如：a=7，n=19，7^1 ≡ 7 mod 19，7^2 ≡ 11 mod 19，7^3 ≡ 1 mod 19，即7在模19下的阶为3</li>
</ul>
<h3 id="平方剩余"><a href="#平方剩余" class="headerlink" title="平方剩余"></a>平方剩余</h3>]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery简介</title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/1.2jQuery/</url>
    <content><![CDATA[<ol>
<li>是一个轻量级的库，拥有强大的选择器，出色的DOM操作的封装，可靠的事件处理机制，完善的兼容性和链式操作等功能</li>
<li>jQuery凭借简洁的语法和跨平台的兼容性，极大地简化了JavaScript开发人员遍历HTML文档，操作DOM，处理事件，执行动画和开发Ajax的操作。</li>
<li>轻量级</li>
<li>强大的选择器：</li>
</ol>
<blockquote>
<ul>
<li>允许开发者使用从Css1到Css3几乎所有的选择器</li>
<li>jQuery独创的高级而复杂的选择器</li>
<li>可以加入插件使其支持Xpath选择器</li>
<li>开发者可以编写属于自己的选择器</li>
</ul>
</blockquote>
<ol start="5">
<li>出色的DOM操作的封装</li>
<li>可靠的事件处理机制</li>
<li>完善的Ajax</li>
</ol>
<blockquote>
<p>jQuery将所有的Ajax封装到一个函数 $.ajax()里，开发者处理Ajax的时候可以能够专心处理业务逻辑而无需关心复杂的浏览器兼容性和XMLHttpRequest对象的创建和使用的问题。</p>
</blockquote>
<ol start="8">
<li>不污染顶级变量</li>
</ol>
<blockquote>
<ul>
<li>jQuery只建立一个名为jQuery的对象，其所有的函数方法都在这个对象之下，其别名 $ 可以随时交出控制权，绝不会污染其他对象</li>
<li>该特性使得jQuery可以与其他JavaScript库共存，在项目中放心的引用而不需要考虑到后期可能的冲突。</li>
</ul>
</blockquote>
<ol start="9">
<li>出色的浏览器兼容性：</li>
</ol>
<blockquote>
<ul>
<li>jQuery能够在IE6.0+，FF2+，Safari2.0+和Opera9.0+下正常运行</li>
<li>jQuery同时修复了一些浏览器之间的差异，开发者不必在开展项目之前建立浏览器兼容库。</li>
</ul>
</blockquote>
<ol start="10">
<li>链式操作方式：</li>
</ol>
<blockquote>
<ul>
<li>链式操作方式：即对发生在同一个jQuery对象上的一组动作，可以之间连写而无需重复获取对象</li>
</ul>
</blockquote>
<ol start="11">
<li>隐式迭代：</li>
</ol>
<blockquote>
<ul>
<li>jQuery里的方法都被设计成自动操作对象集合，而不是单独的对象，这使得大量的循环结构变得不再必要</li>
<li>如，当用jQuery找到带有“.myclass”类的全部元素，然后隐藏它们时，无需循环遍历每一个返回的元素。</li>
</ul>
</blockquote>
<ol start="12">
<li>行为层和结构层的分离：</li>
</ol>
<blockquote>
<p>可以使用jQuery选择器选中元素，然后直接给元素添加事件</p>
</blockquote>
<ol start="13">
<li>丰富的插件支持</li>
<li>完善的文档</li>
<li>开源</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记--《锋利的jQuery》</category>
      </categories>
      <tags>
        <tag>《锋利的jQuery》</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学概述</title>
    <url>/2020/09/26/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="密码学主要解决的问题"><a href="#密码学主要解决的问题" class="headerlink" title="密码学主要解决的问题"></a>密码学主要解决的问题</h3><ul>
<li>信息的机密性、完整性、不可否认性和可用性</li>
<li>机密性：对传送的信息进行加密就可以实现机密性，保证信息不泄露给未经授权的人。</li>
<li>完整性：防止信息被未经授权的人篡改，保证信息不被篡改</li>
<li>不可否认性：保证信息行为人不能否认其信息行为</li>
<li>可用性：保证信息及信息系统确实为授权使用者所用</li>
</ul>
<h3 id="密码学起源与发展"><a href="#密码学起源与发展" class="headerlink" title="密码学起源与发展"></a>密码学起源与发展</h3><ol>
<li>古典密码学<ol>
<li>典型的古典密码算法包括凯撒（Caeser) 密码和维基利亚（Vigenere）密码</li>
<li>主要特点：数据的安全基于算法的保密</li>
</ol>
</li>
<li>近代密码学<ol>
<li>主要特点：数据的安全基于密钥而不是算法的保密</li>
</ol>
</li>
<li>现代密码学<ol>
<li>RSA公钥密码算法</li>
<li>椭圆曲线等其他公钥算法</li>
</ol>
</li>
</ol>
<h3 id="密码学概念"><a href="#密码学概念" class="headerlink" title="密码学概念"></a>密码学概念</h3><ul>
<li>密码学：研究信息系统安全保密的科学，包含两个分支：密码编码学和密码分析学</li>
<li>密码编码学：主要研究密码方案的设计，即寻找对信息进行编码的方法从而隐藏信息的一门学问。主要目的是寻求保证信息的保密性或认证性的方法</li>
<li>密码分析学：主要是从攻击者的角度来看问题，研究如何破解被隐藏信息的一门学问。主要目的是研究加密的破译或信息的伪造。</li>
</ul>
<h3 id="密码系统构成"><a href="#密码系统构成" class="headerlink" title="密码系统构成"></a>密码系统构成</h3><ul>
<li>明文(plaintext)：希望得到保密的原始信息</li>
<li>密文(ciphertext)：明文经过密码交换后的消息</li>
<li>加密(encryption)：由明文变换为密文的过程</li>
<li>解密(decryption)：从密文恢复出明文的过程</li>
<li>加密算法(encryption algorithm)：对明文进行加密时采用的一组规则</li>
<li>解密算法：对密文进行解密时采用的一组规则</li>
<li>密钥(key)：密码系统的关键，控制加密和解密算法操作的信息。加解密算法通常都是在一组密钥的控制下进行的，分别称为加密密钥和解密密钥。</li>
</ul>
<h3 id="密码系统数学模型"><a href="#密码系统数学模型" class="headerlink" title="密码系统数学模型"></a>密码系统数学模型</h3><ul>
<li>以五元组(M，C，K，E，D) 表示密码系统，M是明文信息空间，C是密文信息空间，K是密钥信息空间，E是加密算法，D是解密算法</li>
<li>E：M x K -&gt; C，表示E是M与K到C的一个映射</li>
<li>D：C x K -&gt; M，表示D是C与K到M的一个映射</li>
<li>发送消息的一方使用密钥K1加密明文M，通过加密算法得到密文C，即C=Ek1（M）</li>
<li>接收消息的一方使用功能密钥 K2解密密文C，通过解密算法得到明文M，即M=Dk2(C)</li>
<li>K1与K2可能相等，可能不等</li>
</ul>
<h3 id="凯撒密码体制"><a href="#凯撒密码体制" class="headerlink" title="凯撒密码体制"></a>凯撒密码体制</h3><ul>
<li><p><img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926111012355.png" alt="image-20200926111012355"></p>
</li>
<li><p>加密算法：（M+K）mod 26</p>
</li>
<li><p>解密算法：（C-K ） mod 26</p>
</li>
<li><p>密钥：K=5</p>
</li>
<li><p>例如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">明文：hello (<span class="number">7</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">14</span>)</span><br><span class="line">密文：(<span class="number">12</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="number">19</span>) -&gt; mjqqt</span><br><span class="line">解密出明文：(<span class="number">7</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">14</span>) -&gt; hello</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="保密系统"><a href="#保密系统" class="headerlink" title="保密系统"></a>保密系统</h3><p>保密系统应当满足的要求：</p>
<ul>
<li>系统及时达不到理论上不可破的，也应当是实际上不可破的。从解惑的密文或已知明文-密文对，要确定密钥或任何明文，在计算上不可行。</li>
<li>系统的保密性不依赖于对加密体制或算法的保密，而依赖于密钥。</li>
<li>加密和解密算法使用密钥空间中的所有元素</li>
<li>系统便于实现和使用</li>
</ul>
<h3 id="认证与认证系统"><a href="#认证与认证系统" class="headerlink" title="认证与认证系统"></a>认证与认证系统</h3><p><strong>认证系统：</strong></p>
<ul>
<li>防止消息被篡改，删除，重放和伪造</li>
<li>发送的消息能够被验证</li>
<li>接受者或第三者能够识别和确认消息的真伪</li>
</ul>
<p><strong>保密性</strong>：截获者在不知密钥条件下不能解读密文内容</p>
<p><strong>认证性：</strong>任何不知道密钥的人不能构造一个密文，意定的接收者解密成一个可理解的消息（合法的消息）</p>
<h3 id="密钥体制分类"><a href="#密钥体制分类" class="headerlink" title="密钥体制分类"></a>密钥体制分类</h3><ol>
<li><strong>按密钥特点划分</strong><ol>
<li>对称密码体制<ol>
<li>单钥密码体制，私钥密码体制，传统密码体制</li>
<li>加密密钥和解密密钥相同或彼此之间容易互相确定</li>
<li>不仅可用于数据加密，还可用于消息认证</li>
<li>根据加密方式可以将对称密码体制分为：流密码、分组密码</li>
</ol>
</li>
<li>非对称密码体制<ol>
<li>双钥密码体制，公钥密码体制</li>
<li>加密密钥和解密密钥不同，并且从一个难以推出另一个</li>
<li>加密密钥对外公开，所有人都可知，公钥</li>
<li>解密密钥，私钥，只有特定用户方才有</li>
</ol>
</li>
</ol>
</li>
<li><strong>按保密程度来分</strong><ol>
<li>实际上保密的密码体制<ol>
<li>理论上可破解，计算上不可行</li>
<li>当前广泛使用的各类密码方案，除一次一密外，其余都是实际上保密的密码体制</li>
</ol>
</li>
<li>绝对保密的密码体制<ol>
<li>理论上和实际上都不可破解</li>
<li>一次一密密码体制是绝对保密的</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="流密码和分组密码（对称密码体制）"><a href="#流密码和分组密码（对称密码体制）" class="headerlink" title="流密码和分组密码（对称密码体制）"></a>流密码和分组密码（对称密码体制）</h3><p><strong>流密码</strong></p>
<ul>
<li>将明文一次加密一个比特或多个比特形成密码字符串</li>
<li>典型的流密码有一次一密，其密钥长度与明文长度相等</li>
</ul>
<p><strong>分组密码</strong></p>
<ul>
<li>将明文分组，每组具有固定长度，然后将一个分组作为整体通过加密算法产生对应密文</li>
<li>各组之间是否有关联关系根据具体的加密模式决定</li>
<li>典型的分组密码：DES，AES等。</li>
</ul>
<h3 id="流密码和分组密码主要区别："><a href="#流密码和分组密码主要区别：" class="headerlink" title="流密码和分组密码主要区别："></a>流密码和分组密码主要区别：</h3><ul>
<li>流密码的加密变换是时变的</li>
<li>分组密码的加密变换是固定不变的。</li>
</ul>
<p><strong>公钥密码系统模型</strong></p>
<p><strong>加密模型</strong></p>
<img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926114849663.png" alt="image-20200926114849663" style="zoom: 67%;" />



<p><strong>认证模型</strong></p>
<img src="C:\Users\高萍\AppData\Roaming\Typora\typora-user-images\image-20200926114859071.png" alt="image-20200926114859071" style="zoom:67%;" />

<p><strong>主要特点</strong></p>
<ul>
<li>加密和解密能力公开</li>
<li>可以实现多个用户加密的消息只能由一个用户解读——–用于公共网络中实现保密通信</li>
<li>只能由一个用户加密消息而使多个用户可以解读——用于认证系统中对消息进行数字签名</li>
<li>无需事先分配密钥</li>
</ul>
<h3 id="对称密码体制与非对称密码体制优缺点"><a href="#对称密码体制与非对称密码体制优缺点" class="headerlink" title="对称密码体制与非对称密码体制优缺点"></a>对称密码体制与非对称密码体制优缺点</h3><p><strong>对称密码体制</strong></p>
<ul>
<li>优点：加密速度快、效率高、广泛用于大信息量的加密</li>
<li>缺点：密钥传输与交换面临威胁，密钥容易被截获；若和大量用户通信，难以安全管理大量密钥，大范围应用存在问题</li>
</ul>
<p><strong>非对称密码体制</strong></p>
<ul>
<li>优点：很好解决对称加密中由于密钥数量过多难以管理和费用高等问题，不用担心传输中私钥泄漏，保密性能高</li>
<li>缺点：加密算法复杂，加密速度慢</li>
</ul>
<h3 id="密码系统攻击"><a href="#密码系统攻击" class="headerlink" title="密码系统攻击"></a>密码系统攻击</h3><p><strong>被动攻击</strong></p>
<ul>
<li>通过窃取密文试图了解明文或者密钥的内容</li>
</ul>
<p><strong>主动攻击</strong></p>
<ul>
<li>篡改和伪造密文，以达到修改或者伪造明文的目的</li>
</ul>
<p><strong>攻击类型</strong></p>
<ol>
<li>唯密文攻击<ol>
<li>有一个或多个用同一密钥加密的密文</li>
<li>通过对这些截获的密文进行分析得出明文或密钥</li>
</ol>
</li>
<li>已知明文攻击<ol>
<li>待解密文+一些明文+用同一密钥加密这些明文的对应密文</li>
</ol>
</li>
<li>选择明文攻击<ol>
<li>可得到所需要的任何明文对应密文，这些密文与待解密文是用同意密钥</li>
</ol>
</li>
<li>选择密文攻击<ol>
<li>可得到所需任何密文的对应明文，解密这些密文所使用的密钥与解密待解密文的密钥一样。</li>
</ol>
</li>
<li>强度按序递增，唯密文工作最弱，选择密文攻击最强</li>
</ol>
<h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a><strong>古典密码</strong></h3><ul>
<li>属于对称密码体制，加密和解密使用同一密钥</li>
<li>基于对明文信息的“置换”或“替代”完成</li>
<li>栅栏密码（置换密码体制）</li>
</ul>
<blockquote>
<p><strong>加密：</strong></p>
<ol>
<li>将明文的元素按照两行的方式书写，从上到下，从左到右</li>
<li>按从上到写的顺序依次读取每一行元素所得到的的组合就是密文</li>
</ol>
<p><strong>解密：</strong></p>
<ol>
<li>将接受的密文按从左到右顺序写为两行，如果密文个数为偶数n，每一行写n/2个元素，如果密文个数为奇数，第一行排 (n+1) /2 个元素，第二行排 (n-1)/2 个元素；</li>
<li>按加密算法规则，从上到下，从左到右读取各元素，得到明文</li>
</ol>
<p><strong>例如：</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">明文：economic business</span><br><span class="line">加密：e o o <span class="selector-tag">i</span> <span class="selector-tag">b</span> s n s</span><br><span class="line">	 c n m c u <span class="selector-tag">i</span> e s</span><br><span class="line">密文: eonibsnscnmcuies</span><br><span class="line">解密：e o o <span class="selector-tag">i</span> <span class="selector-tag">b</span> s n s</span><br><span class="line">	 c n m c u <span class="selector-tag">i</span> e s</span><br><span class="line">解密出明文：economicbusiness</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>置换法破译：通过字母的使用频率破译</li>
<li>替代法<ul>
<li>凯撒加密：把每个英文字母向后推移K位，即将明文中的每个元素用各自后面对应的第K个字符代替</li>
<li>替代方式<ul>
<li>单字母替换，如凯撒密码</li>
<li>多字母替换，也称密码本式替换，将一个或一组字符分别用多个字符一起替换，如将 efe 替换为 awt</li>
<li>插入式替换，将明文信息插入到其他信息中，如把明文中各元素插入到一段文章中</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-26</title>
    <url>/2020/09/26/%E6%A0%91%E6%B4%9E/2020-09-26/</url>
    <content><![CDATA[<p>今天上午把三级数据库考了，前前后后也准备了挺久的，题库刷了不少，毕竟我真的不想主动报名的考试是去捐款。选择题和填空题都是题库里的题，尤其是题库里的最后一套题，非常感谢自己前一天晚上刷了那套题，否则可能真得错几个。ER图有个地方错了，但是也活该，因为ER图有的复杂联系我真的没搞明白，错了活该，但应该不会扣太多分的。最后两道大题，有信心写对了一题，至于最后一道题，看考官信息吧，哈哈。</p>
<p>总之，出考场的心情和当时考完六级差不多，自己有信心是可以过的，希望结果不会失望。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-23</title>
    <url>/2020/09/23/%E6%A0%91%E6%B4%9E/2020-09-23/</url>
    <content><![CDATA[<p>班主任第一次给我们上课了，数据库，坦白说，我还是更喜欢井老师上课，喜欢听他拓展，而且井老师直率，有啥说啥的性格很可。</p>
<p>下午密码学被告知下周要开始上实验课了，也不知道密码学的实验课咋上，还以为这门课就纯理论呢，感觉很不好，网络安全和密码学学得都挺糟糕的，好多东西不懂啊，希望这两门必修课别给我挂了。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-24</title>
    <url>/2020/09/24/%E6%A0%91%E6%B4%9E/2020-9=09-24/</url>
    <content><![CDATA[<p>下午软件工程又被老外 cue 了，唉，真的听不懂啊。</p>
<p>自从过了四六级，英语水平直线下降，再让我去考四级肯定过不了，一次性过了四六级看来也不是什么好事，听英语课超级不耐烦。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-09-27</title>
    <url>/2020/09/27/%E6%A0%91%E6%B4%9E/2020-09-27/</url>
    <content><![CDATA[<p>今天去驾校分教练了，不得不说，华坚驾校的规范化程度是真的高（形式真的多），本以为填个表就可以了，没想到又是开班典礼，又是宣誓，校长主任的讲话，好多流程，花了一上午的时间才终于分到了教练。</p>
<p>对了，还碰到了隔壁班一个同学，被分到了同一个教练，念到了名字，我才觉得好耳熟，哈哈哈光看脸完全不认识的。</p>
]]></content>
      <categories>
        <category>tree-hole</category>
      </categories>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql安装、服务的启动与登录</title>
    <url>/2020/09/16/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E5%AE%89%E8%A3%85%E3%80%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h3 id="Mysql-的安装与启动mysql服务"><a href="#Mysql-的安装与启动mysql服务" class="headerlink" title="Mysql 的安装与启动mysql服务"></a>Mysql 的安装与启动mysql服务</h3><p>这里我使用的是 phpStudy 集成环境中的 mysql，5.7版本，启动服务，只需要界面上点击启动即可。</p>
<img src="https://wx2.sinaimg.cn/mw690/007gSPK8gy1giuoto98cfj30rv0lr76a.jpg" alt="03.png" style="zoom:50%;" />

<p>此外，mysql 还可以通过配置服务启动等方式</p>
<h3 id="登录到-mysql-服务"><a href="#登录到-mysql-服务" class="headerlink" title="登录到 mysql 服务"></a>登录到 mysql 服务</h3><p>进入mysql 的安装目录下的 bin目录文件夹，输入命令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -h 主机名  -u  用户名  -p  </span><br></pre></td></tr></table></figure>

<p>然后提示输入数据库的密码即可。</p>
<img src="https://wx4.sinaimg.cn/mw690/007gSPK8gy1giuotrusxdj30o607xq3j.jpg" alt="04.png" style="zoom:80%;" />

<p>退出命令，exit</p>
<h3 id="mysql-配置文件"><a href="#mysql-配置文件" class="headerlink" title="mysql 配置文件"></a>mysql 配置文件</h3><p>mysql安装的根目录中 my.ini 文件即是 mysql 的配置文件</p>
<p>其中包含了 mysql 的客户端的配置 [mysql] 和 服务端的配置信息 [mysqld] ，可以看到 mysql  的安装目录以及数据库存放目录等等配置信息。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql常用命令</title>
    <url>/2020/09/16/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>查看当前所有的数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><strong>打开指定的数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 库名;</span><br></pre></td></tr></table></figure>

<p><img src="https://wx3.sinaimg.cn/mw690/007gSPK8gy1giup1pxszkj305w020mwz.jpg" alt="06.png"></p>
<p>表示切换数据库成功</p>
<p><strong>查看当前库中的所有表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p><strong>查看某个库中所有的表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables from 库名;</span><br></pre></td></tr></table></figure>

<p><strong>查看表结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure>

<p><strong>查看当前所在的库</strong></p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">select</span> <span class="function"><span class="title">database</span>()</span></span><br></pre></td></tr></table></figure>

<img src="https://wx3.sinaimg.cn/mw690/007gSPK8gy1giup1tsuyuj308x055dfr.jpg" style="zoom:80%;" />

<p><strong>创建表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">   列名 列类型,</span><br><span class="line">   列名 列类型，</span><br><span class="line">   。。。</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>查看 mysql 版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>

<img src="https://wx1.sinaimg.cn/mw690/007gSPK8gy1giup2cblhdj309x054t8n.jpg" alt="image-20200916233203526" style="zoom:80%;" />

<p><strong>SQL 语言分类</strong></p>
<ul>
<li>数据查询语言：DQL（Data Query Language）</li>
<li>数据操作语言：DML（insert，update，delete）</li>
<li>数据定义语言：DDL（create，drop，alter）</li>
<li>事务控制语言：TCL（commit，rollback）</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据定义语言DDL</title>
    <url>/2020/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93/DDL/</url>
    <content><![CDATA[<h3 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h3><ul>
<li>创建(CREATE)，修改(ALTER)，删除(DROP)</li>
</ul>
<p><strong>库的创建</strong></p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>  [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 库名;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建库Books</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> books ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>库的修改</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改库的字符集</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> books <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>库的删除</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> books;	</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>表的创建</strong></p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列的类型【(长度) 约束】,</span><br><span class="line">	列名 列的类型【(长度) 约束】,</span><br><span class="line">	列名 列的类型【(长度) 约束】,</span><br><span class="line">	...</span><br><span class="line">	列名 列的类型【(长度) 约束】</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建表 book</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="comment">#编号</span></span><br><span class="line">	book_Name <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="comment">#书名</span></span><br><span class="line">	book_price <span class="keyword">DOUBLE</span>,  <span class="comment">#价格</span></span><br><span class="line">	authorId  <span class="built_in">INT</span>,  <span class="comment">#作者编号</span></span><br><span class="line">	publishDate DATETIME  <span class="comment">#出版日期</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建表author</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">	author_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	author_nation <span class="built_in">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>表的修改</strong></p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span>|<span class="keyword">DROP</span>|<span class="keyword">MODIFY</span>|<span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> 列名 【列类型 约束】;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将publishDate修改为publish-date</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> publishDate publish_date DATETIME;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列的类型或约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将publish_date的类型从datetime变为timstamp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> publish_date <span class="built_in">TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#author表中添加author_age列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> author_age <span class="built_in">INT</span>; </span><br></pre></td></tr></table></figure>
</li>
<li><p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除author表中author_age列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">DROP</span> <span class="keyword">COLUMN</span>  author_age;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将author表名修改为book_author表名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">RENAME</span> <span class="keyword">TO</span> book_author;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>表的删除</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除book_author表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> book_author;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>表的复制</strong></p>
<ul>
<li><p>仅复制表的结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy1 <span class="keyword">LIKE</span> author;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制表的结构+数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy2 </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> author;</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅复制部分数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#仅复制author表中，国际为中国的作家id和作家姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy3</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,author_name</span><br><span class="line"><span class="keyword">FROM</span> author </span><br><span class="line"><span class="keyword">WHERE</span> author_nation=<span class="string">&#x27;中国&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅复制部分字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy4 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,author_name</span><br><span class="line"><span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据操作语言DML</title>
    <url>/2020/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93/DML/</url>
    <content><![CDATA[<h3 id="数据操作语言"><a href="#数据操作语言" class="headerlink" title="数据操作语言"></a>数据操作语言</h3><ul>
<li>插入(insert)，修改(update)，删除(delete)</li>
</ul>
<h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a><strong>插入语句</strong></h3><ul>
<li><p>方式1插入</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名,...) <span class="keyword">VALUES</span>(值<span class="number">1</span>,...);</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入的值的类型与列的类型一致或兼容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,book_price,authorId,publish_date)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;红楼梦&#x27;</span>,<span class="number">56</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>不可以为Null 的列必须插入值，可为 Null 的列 有两种插入值的方式</p>
<ul>
<li><p>方式1，将不可为null的列的键对应的值设为Null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,book_price,authorId,publish_date)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;三国演义&#x27;</span>,<span class="literal">NULL</span>,<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;1978-9-8&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式2，插入值时不可为null的键值不写入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,authorId,publish_date)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;西游记&#x27;</span>,<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;1978-9-8&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>插入时列的顺序可以调换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将publish_date 和 authorId 顺序调换</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,publish_date,authorId)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;平凡的世界&#x27;</span>,<span class="string">&#x27;1979-9-7&#x27;</span>,<span class="string">&#x27;005&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>列的个数和值的个数必须一致</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#报错</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_NAME,publish_date,authorId)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;白鹿原&#x27;</span>,<span class="string">&#x27;1979-9-7&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;放风筝的人&#x27;</span>,<span class="number">59</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>方式2插入</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列名=值,列名=值,...</span><br></pre></td></tr></table></figure>
</li>
<li><p>两种方式插入的区别</p>
<ul>
<li><p>方式1插入支持多行插入，方式2不支持多行插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">&#x27;神雕侠侣&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;神雕侠侣&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;射雕英雄传&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;1990-07-09&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式1支持子查询，方式2不支持子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(<span class="keyword">id</span>,book_Name,book_price,authorId,publish_date)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,book_Name,book_price,authorId,publish_date</span><br><span class="line"><span class="keyword">FROM</span> book2 <span class="keyword">WHERE</span> <span class="keyword">id</span>&lt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a><strong>修改语句</strong></h3><ul>
<li><p>修改单表的记录</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列=新值,列=新值,...</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改book表中三国演义的书的价格为100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> book_price= <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> book_Name=<span class="string">&quot;三国演义&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改多表的记录</p>
<ul>
<li><p>sql 92语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">SET</span> 列=值,...</span><br><span class="line"><span class="keyword">WHERE</span> 连接条件</span><br><span class="line"><span class="keyword">AND</span> 筛选条件;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sql 99语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">INNER</span>|<span class="keyword">LEFT</span>|<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">SET</span> 列=值,...</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><ul>
<li><p>方式1删除：delete</p>
<ul>
<li><p>单表的删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 筛选条件</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除id为9的书</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">9</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多表的删除</p>
<ul>
<li><p>sql 92语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> 表<span class="number">1</span>的别名,表<span class="number">2</span>的别名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">WHERE</span> 连接条件</span><br><span class="line"><span class="keyword">AND</span> 筛选条件;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sql 99语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> 表<span class="number">1</span>的别名,表<span class="number">2</span>的别名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">INNER</span>|<span class="keyword">LEFT</span>|<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名 <span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>方式2删除：truncate</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除author表的信息</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> author;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>两种删除方式比较</p>
<ul>
<li>delete 可以添加where条件，truncate不可以加</li>
<li>truncate删除效率稍高</li>
<li>假如要删除的表中有自增长列，用delete删除后，再次插入数据，自增长列的值从断点开始，而用 truncate删除后，再次插入数据，自增长列的值从1开始</li>
<li>truncate 删除没有返回值，delete删除有返回值</li>
<li>truncate 删除不能回滚，delete 删除可以回滚</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>一组预先编译好的SQL语句语句的集合，理解成批处理语句</li>
<li>好处<ul>
<li>提高代码的重用性</li>
<li>简化操作</li>
<li>减少了编译次数，减少了和数据库服务器的连接次数</li>
</ul>
</li>
</ul>
<h3 id="函数与存储过程"><a href="#函数与存储过程" class="headerlink" title="函数与存储过程"></a>函数与存储过程</h3><ul>
<li>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入，批量更新</li>
<li>函数：有且仅有一个返回，适合做处理数据后返回一个结果</li>
</ul>
<h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> FUNCITON 函数名（参数列表） <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	函数体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>参数列表：包含 参数名 参数类型</p>
</li>
<li><p>函数体：肯定会有 return 语句，如果没有不会报错，若 return语句没有放在函数体的最后不报错，但不建议这样写。</p>
</li>
<li><p>函数体若仅有一句，可以省略 begin end</p>
</li>
<li><p>使用 delimiter 语句设置结束标记</p>
</li>
</ul>
<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ul>
<li><p>调用语法：SELECT  函数名(参数列表)</p>
</li>
<li><p>无参有返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回公司的员工个数</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1() <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;<span class="comment">#定义局部变量</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">num</span> <span class="comment">#赋值</span></span><br><span class="line">	<span class="keyword">FROM</span> employees;</span><br><span class="line">	RETURN num;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> f1()</span><br></pre></td></tr></table></figure>
</li>
<li><p>有参有返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据员工名，返回它的工资</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f2(empName <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> @sal=<span class="number">0</span>;<span class="comment">#定义用户变量 </span></span><br><span class="line">	<span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> @sal   <span class="comment">#赋值</span></span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> last_name = empName;</span><br><span class="line">	RETURN @sal;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> f2(<span class="string">&#x27;Kochhar&#x27;</span>) </span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建函数，实现传入两个float，返回二者之和</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun(num1 <span class="built_in">FLOAT</span>,num2 <span class="built_in">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="built_in">FLOAT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="keyword">SUM</span> <span class="built_in">FLOAT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">SET</span> <span class="keyword">SUM</span>=num1+num2;</span><br><span class="line">	RETURN SUM;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> fun(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><ul>
<li>一次只能删除一个函数，并且要求有该函数的 alter rontine 权限</li>
</ul>
<blockquote>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> f1;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>分组查询</title>
    <url>/2020/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  查询列表</span><br><span class="line"><span class="keyword">from</span> 	表</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组的字段</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段】</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>和分组函数一同查询的字段必须是group by 后出现的字段</li>
<li>筛选分类两类：<ul>
<li>分组前筛选：针对原始表，连接的关键字是where，group by 前</li>
<li>分组后筛选：针对 group by后的结果集，连接的关键字是having，group by后</li>
</ul>
</li>
<li>尽量使用分组前筛选</li>
<li>分组可以按单个字段也可以按多个字段</li>
<li>分组可以搭配排序使用</li>
</ul>
<h3 id="GROUP-BY-子句语法"><a href="#GROUP-BY-子句语法" class="headerlink" title="GROUP BY 子句语法"></a>GROUP BY 子句语法</h3><ul>
<li>可以使用GROUP BY 子句将表中的数据分成若干组</li>
<li>在SELECT 列表中所有未包含在分组函数中的列，都应该包含在 GROUP BY 子句中</li>
<li>GROUP BY 子句中可以包含多个列</li>
</ul>
<h3 id="简单分组查询"><a href="#简单分组查询" class="headerlink" title="简单分组查询"></a>简单分组查询</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的员工人数</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="keyword">COUNT</span>(*)员工人数 <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个工种的员工平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) 平均工资 ,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个位置的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 部门个数,location_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="分组前添加筛选条件"><a href="#分组前添加筛选条件" class="headerlink" title="分组前添加筛选条件"></a>分组前添加筛选条件</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询邮箱中包含a字符的 每个部门的最高工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)最高工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有奖金的每个领导手下员工的平均工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary)平均工资,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="分组后添加筛选条件"><a href="#分组后添加筛选条件" class="headerlink" title="分组后添加筛选条件"></a>分组后添加筛选条件</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询哪个部门的员工个数&gt;5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#先查询每个部门的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 员工人数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#再筛选刚才的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 员工人数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id 工种编号,<span class="keyword">MAX</span>(salary) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MAX</span>(salary)&gt;<span class="number">12000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#领导编号&gt;102的每个领导手下的最低工资大于5000的领导编号和最低工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> manager_id,<span class="keyword">MIN</span>(salary) 最低工资</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id &gt; <span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;<span class="number">5000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分组后添加筛选条件+添加排序</span></span><br><span class="line"><span class="comment">#每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id,<span class="keyword">MAX</span>(salary) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> 最高工资&gt;<span class="number">6000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 最高工资 ;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="按多个字段分组"><a href="#按多个字段分组" class="headerlink" title="按多个字段分组"></a>按多个字段分组</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个工种每个部门的最低工资,并按最低工资降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary) 最低工资,job_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id,job_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">MIN</span>(salary) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="非法使用分组函数"><a href="#非法使用分组函数" class="headerlink" title="非法使用分组函数"></a>非法使用分组函数</h3><ul>
<li>不能在 Where 子句中使用分组函数</li>
<li>可以在 Having 子句中使用分组函数</li>
</ul>
<h3 id="过滤分组：Having子句"><a href="#过滤分组：Having子句" class="headerlink" title="过滤分组：Having子句"></a>过滤分组：Having子句</h3><p>​    </p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>分页查询</title>
    <url>/2020/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol>
<li>应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求</li>
<li>语法：</li>
</ol>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">【<span class="keyword">join</span> <span class="keyword">TYPE</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段</span><br><span class="line"><span class="keyword">HAVING</span> 分组后的筛选</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序的字段】</span><br><span class="line"><span class="keyword">LIMIT</span> 【<span class="keyword">offset</span>,】<span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>​        offset ：显示条目的起始索引（起始索引从0开始）</li>
<li>​        size：显示的条目个数</li>
<li>​       limit 子句要放在查询语句的最后</li>
<li>​      公式：显示的页数 page，每页的条目数 size</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line"><span class="keyword">LIMIT</span> (page<span class="number">-1</span>)*<span class="keyword">size</span>,<span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询前五条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  employees <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  employees <span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询第11条——第25条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  employees <span class="keyword">LIMIT</span> <span class="number">10</span>,<span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#有奖金的员工信息，并且工资较高的前10名显示出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span> ;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>TCL事务控制语言</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/TCL/</url>
    <content><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行</li>
<li>事务由单独丹玉的一个或多个SQL语句组成，在这个单元中，每个SQL语句是相互依赖的。</li>
<li>而整个单独单元作为一个不可分割的整体，如果单元中某条SQL语句一旦执行失败或产生错误，整个单元将会回滚，所有受到影响的数据将返回到事务开始以前的状态；如果单元汇总的所以SQL语句均执行成功，则事务被顺利执行。</li>
<li>mysql 中的存储引擎<ul>
<li>在mysql中的数据用各种不同的技术存储在文件或内存中</li>
<li>通过 show engines，来查看mysql支持的存储引擎</li>
<li>在MySQL中用的最多的存储引擎有：innodb，myisam，memory等。其中 innodb 支持事务，myisam、memory等不支持事务。</li>
</ul>
</li>
</ul>
<h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性(ACID)"></a>事务的特性(ACID)</h3><ul>
<li>原子性：一个事务不可再分割，要么都执行要么都不执行</li>
<li>一致性：一个事务执行会使数据从一个一致性状态切换到另外一个一致性状态</li>
<li>隔离性：一个事务的执行不受其他事务的干扰</li>
<li>持久性：一个事务一旦提交，则会永久的改变数据库的数据</li>
</ul>
<h3 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h3><ul>
<li><p>隐式事务：事务没有明显的开启和结束的标记，比如 insert，update，delete 语句本身就是一个事务</p>
</li>
<li><p>显式事务：事务具有明显的开启和结束的标记，前提是必须先设置自动提交功能为禁用，即 SET autocommit = 0</p>
</li>
<li><p>事务创建步骤</p>
<ul>
<li><p>步骤1，开启事务（取消自动提交事务的功能）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSTCTION; <span class="comment"># 可写可不写，因为  设置自动提交时已经开始事务</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤2，编写事务的一组逻辑操作单元（多条sql 语句）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> jobs <span class="keyword">SET</span> min_salary = <span class="number">1000</span> <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> jobs <span class="keyword">SET</span> max_salary = <span class="number">5000</span> <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤3：结束事务</p>
<ul>
<li>COMMIT；提交事务，或 commit to 断点</li>
<li>ROLLBACK；回滚事务，或 rollback to 断点</li>
<li>SAVEPOINT 节点名；设置保存点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="事务的隔离性级别"><a href="#事务的隔离性级别" class="headerlink" title="事务的隔离性级别"></a>事务的隔离性级别</h3><ul>
<li>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题<ul>
<li>脏读：对于两个事务T1，T2，T1已经读取了被T2更新但还没提交的字段之后，若T2回滚，T1读取的内容就是临时且无效的。</li>
<li>不可重复读：对于两个事务T1，T2，T1读取了一个字段，然后T2更新了该字段之后，T1再次读取了同一个字段，值不同了</li>
<li>幻读：对于两个事务T1，T2，T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行之后，如果T1再次读取同一个表，就会多出几行。</li>
</ul>
</li>
<li>数据库事务的隔离性：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。</li>
<li>一个事务与其他事务隔离的程度称为隔离级别：数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</li>
<li>数据库提供四种事务隔离级别<ul>
<li>READ  UNCOMMITTED：读未提交，允许事务读取未被其他事务提交的变更，脏读，不可重复读，幻读的问题都会出现</li>
<li>READ  COMMITTED：读已提交，只允许事务读取已经被其他事务提交的变更，可以避免脏读，但不可重复读和幻读问题仍然可能出现</li>
<li>REPEATABLE  READ，确保事务可以多次从一个字段中读取相同的值，在个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读的问题仍然存在</li>
<li>SERIALIZABLE：串行化，确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务读该表执行插入，更新和删除操作，所有并发问题都可以避免，但性能十分低下。</li>
</ul>
</li>
</ul>
<blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">READ uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">READ committed</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">REPEATABLE read</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">SERIALIZABLE</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
</blockquote>
<ul>
<li><p>mysql 中默认的隔离性级别：REPEATABLE READ，mysql 支持4中隔离性级别</p>
</li>
<li><p>oracle 中默认的隔离型级别：READ COMMITTED，仅支持READ COMMITTED和SERIALIZABLE两种隔离级别。</p>
</li>
<li><p>设置隔离性级别</p>
<ul>
<li><p>每启动一个mysql程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量 @@tx_isolation，表示当前的事务隔离级别</p>
</li>
<li><p>查看当前的隔离级别</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@tx_isolation;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>设置当前 mysql 连接的隔离级别</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> 隔离级别;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>设置数据库系统的全局的隔离级别</p>
</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> 隔离级别;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="事务在delete和truncate处理上的区别"><a href="#事务在delete和truncate处理上的区别" class="headerlink" title="事务在delete和truncate处理上的区别"></a>事务在delete和truncate处理上的区别</h3><ul>
<li>delete 操作时，事务 ROLLBACK，可以恢复更新前的数据</li>
<li>truncate 操作时，事务 ROLLBACK，不可以恢复更新前的数据</li>
</ul>
<h3 id="断点-savepoint"><a href="#断点-savepoint" class="headerlink" title="断点 savepoint"></a>断点 savepoint</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> jobs <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span>  a; <span class="comment">#设置保存点</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> jobs <span class="keyword">WHERE</span> job_title=<span class="string">&#x27;Public Accountant&#x27;</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;<span class="comment">#回滚到保存点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> jobs;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>基础查询</title>
    <url>/2020/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="基础查询语法"><a href="#基础查询语法" class="headerlink" title="基础查询语法"></a>基础查询语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表  <span class="keyword">from</span>  表名;</span><br></pre></td></tr></table></figure>

</blockquote>
<blockquote>
<p>查询列表可以是表中的字段、常量值、表达式、函数，查询的结果是一个虚拟的表格</p>
</blockquote>
<p><strong>查询表中的单个字段</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询表中多个字段</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name,last_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询表中所有字段</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询常量值</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p> <strong>查询表达式</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span>/<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>查询函数</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="起别名（重命名一个列）"><a href="#起别名（重命名一个列）" class="headerlink" title="起别名（重命名一个列）"></a>起别名（重命名一个列）</h3><p><strong>方式1，使用 as</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> 姓,first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<p><strong>方式2，使用空格</strong></p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name 姓,first_name 名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<blockquote>
<p>注意，当所起的别名有 空格，# 等特殊符号时，需要用引号引起来，如;</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">AS</span> <span class="string">&quot;工 资&quot;</span> <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="去重，distinct-关键字"><a href="#去重，distinct-关键字" class="headerlink" title="去重，distinct 关键字"></a>去重，distinct 关键字</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="concat-连接"><a href="#concat-连接" class="headerlink" title="concat() 连接"></a>concat() 连接</h3><blockquote>
<p>如将 first_name 和 last_name 连接成一个字段，显示为姓名、</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   <span class="keyword">CONCAT</span>(first_name,last_name) <span class="keyword">AS</span> 姓名 </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>子查询</title>
    <url>/2020/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>主查询：外部的查询语句，称为主查询或外查询</li>
<li>子查询：一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<ul>
<li>子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li>
<li>子查询放在小括号内</li>
<li>子查询可以放在from后面，select后面，where后面，having后面，但一般放在条件的右侧</li>
</ul>
</li>
</ul>
<h3 id="子查询分类："><a href="#子查询分类：" class="headerlink" title="子查询分类："></a>子查询分类：</h3><ul>
<li>按结果集的行列数不同：<ul>
<li>标量子查询：结果集只有一行一列，一般搭配单行操作符使用(&gt;  &lt;   &gt;=   &lt;=   =   &lt;&gt;)</li>
<li>列子查询：结果集只有一列多行，一般搭配多行操作符使用(in，any/some，all)</li>
<li>行子查询：结果集只有一行多列</li>
<li>表子查询：结果集一般为多行多列</li>
</ul>
</li>
<li>按子查询出现的位置分：<ul>
<li>select 后：仅仅支持标量子查询</li>
<li>from 后：支持表子查询</li>
<li>where或having 后：标量子查询+列子查询+行子查询</li>
<li>exitsts后（相关子查询）：表子查询</li>
</ul>
</li>
</ul>
<h3 id="where或having后的子查询"><a href="#where或having后的子查询" class="headerlink" title="where或having后的子查询"></a>where或having后的子查询</h3><ol>
<li><p>标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询谁的工资比 Abel 高?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询Abel的工资</span></span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name = <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询员工的信息，满足 salary&gt;①结果</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&gt;(</span><br><span class="line">      <span class="keyword">SELECT</span> salary</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> last_name = <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步：查询141号员工的job_id</span></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">141</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步：查询143号员工的salary</span></span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">143</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#③第三步：查询员工的姓名，job_id 和工资，要求job_id=①并且salary&gt;②</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id = (</span><br><span class="line">	<span class="keyword">SELECT</span> job_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> employee_id = <span class="number">141</span></span><br><span class="line">) <span class="keyword">AND</span> salary&gt;(</span><br><span class="line">	<span class="keyword">SELECT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> employee_id = <span class="number">143</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询最低工资大于50号部门最低工资的部门id和其最低工资</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步：查询50号部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步：查询每个部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#③第三步： 在②基础上筛选，满足min(salary)&gt;①</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;(</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="keyword">MIN</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> department_id = <span class="number">50</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>非法使用标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Subquery returns more than 1 row,子查询不只一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;(</span><br><span class="line">	<span class="keyword">SELECT</span>  salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> department_id =<span class="number">110</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">多行子查询使用单行比较符</span><br></pre></td></tr></table></figure>
</li>
<li><p>列子查询(多行子查询)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回location_id是1400或1700的部门中的所有员工姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询location_id是1400或1700的部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span>  department_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询员工姓名，要求部门号是①列表中的某一个</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工姓名,department_id 部门编号</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id  <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> departments</span><br><span class="line">	<span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询job_id为‘IT_PROG’部门任一工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id = <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询其他工种的员工号、姓名、job_id 以及salary，要求salary&lt;(①)的任意一个</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&lt;<span class="keyword">ANY</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id = <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> job_id&lt;&gt;<span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&lt;(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id = <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> job_id&lt;&gt;<span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>行子查询(结果集一行多列或多行多列)</p>
</li>
</ol>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工编号最小并且工资最高的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询最小的员工编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，查询最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"><span class="comment">#③第三步，查询员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id=(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(employee_id)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">)<span class="keyword">AND</span> salary=(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (employee_id,salary)=(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(employee_id),<span class="keyword">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="select后的子查询（仅支持标量子查询"><a href="#select后的子查询（仅支持标量子查询" class="headerlink" title="select后的子查询（仅支持标量子查询 )"></a>select后的子查询（仅支持标量子查询 )</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的员工个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> D.department_id,(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line">	<span class="keyword">FROM</span> employees E</span><br><span class="line">	<span class="keyword">WHERE</span> E.department_id = D.<span class="string">`department_id`</span></span><br><span class="line"> ) 员工个数</span><br><span class="line"> <span class="keyword">FROM</span> departments D;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="from后的子查询（支持表子查询）"><a href="#from后的子查询（支持表子查询）" class="headerlink" title="from后的子查询（支持表子查询）"></a>from后的子查询（支持表子查询）</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的平均工资的工资等级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①第一步，查询每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary)平均工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#②第二步，连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_sal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  ag_dep.*, G.<span class="string">`grade_level`</span>工资等级</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) 平均工资,department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) ag_dep</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades G</span><br><span class="line"><span class="keyword">ON</span> ag_dep.平均工资 <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="exists后面的子查询（相关子查询）"><a href="#exists后面的子查询（相关子查询）" class="headerlink" title="exists后面的子查询（相关子查询）"></a>exists后面的子查询（相关子查询）</h3><ol>
<li><p>语法：</p>
<p>EXISTS（完整的查询语句）</p>
</li>
<li><p>结果：</p>
<p>1或0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询是否存在工资等于24000的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary=<span class="number">24000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有员工的部门名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式1，in</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name 部门名</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">WHERE</span> D.<span class="string">`department_id`</span> <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2，exists</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name 部门名</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> *</span><br><span class="line">	<span class="keyword">FROM</span> employees E</span><br><span class="line">	<span class="keyword">WHERE</span> D.<span class="string">`department_id`</span>=E.<span class="string">`department_id`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>存储过程</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul>
<li>一组预先编译好的SQL语句的集合，理解成批处理语句</li>
<li>提高代码的重用性</li>
<li>简化操作</li>
<li>减少了编译次数并且减少了和数据库服务器的连接次数</li>
<li>类型：<ul>
<li>无返回无参</li>
<li>仅仅带 in 类型，无返回有参</li>
<li>仅仅待 out 类型，有返回无参</li>
<li>既带 in 又带 out，有返回有参</li>
<li>带inout，有返回有参</li>
</ul>
</li>
</ul>
<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><ul>
<li><p>语法</p>
</li>
<li><pre><code class="sql">delimiter 新的结束标记
CREATE PROCEDURE 存储过程名(参数列表)
BEGIN
    存储过程体(一组合法的sql语句)
END
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">  </span><br><span class="line">-<span class="ruby"> 参数列表包含三部分</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  - 参数模式，参数名，参数类型</span></span><br><span class="line"><span class="ruby">  - 如，IN stu_name VARCHAR(<span class="number">20</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 参数模式</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  - <span class="keyword">in</span>：该参数只能作为输入，也就是该参数需要调用方传入值</span></span><br><span class="line"><span class="ruby">  - out：该参数只能作为输出，也就是该参数只能作为返回值</span></span><br><span class="line"><span class="ruby">  - inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以作为返回值</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 如果存储过程体仅一句，<span class="keyword">begin</span> <span class="keyword">end</span> 可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 存储过程体中的每条sql 语句的结尾要求必须加分号</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 存储过程的结尾可以使用 DELIMITER 重新设置</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  - 语法，DELIMITER 结束标记</span></span><br><span class="line"><span class="ruby">  - 如：DELIMITER $</span></span><br><span class="line"></span><br><span class="line"><span class="ruby"><span class="comment">### 调用存储过程</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- 调用语法</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- <span class="string">``</span><span class="string">`sql</span></span></span><br><span class="line"><span class="ruby">  CALL 存储过程名(实参列表)</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="创建空参列表存储过程"><a href="#创建空参列表存储过程" class="headerlink" title="创建空参列表存储过程"></a>创建空参列表存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插入到jobs表中3条记录</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> jobs(job_id,job_title,min_salary,max_salary) </span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="string">&#x27;AC_2&#x27;</span>,<span class="string">&#x27;Account2&#x27;</span>,<span class="number">1000</span>,<span class="number">4000</span>),</span><br><span class="line">   (<span class="string">&#x27;AC_3&#x27;</span>,<span class="string">&#x27;Account3&#x27;</span>,<span class="number">1000</span>,<span class="number">4000</span>),</span><br><span class="line">   (<span class="string">&#x27;AC_4&#x27;</span>,<span class="string">&#x27;Account4&#x27;</span>,<span class="number">2000</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p1</span></span><br><span class="line"><span class="keyword">CALL</span> p1();</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> jobs;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建带-in-模式的存储过程"><a href="#创建带-in-模式的存储过程" class="headerlink" title="创建带 in 模式的存储过程"></a>创建带 in 模式的存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建存储过程实现 根据employees表中job_id，查询jobs表中对应的job_title</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p2(<span class="keyword">IN</span> job_id <span class="built_in">VARCHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> J.*</span><br><span class="line">	<span class="keyword">FROM</span> jobs J</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> employees E <span class="keyword">ON</span> E.job_id = J.job_id</span><br><span class="line">	<span class="keyword">WHERE</span> J.job_id=job_id;	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p2</span></span><br><span class="line"><span class="keyword">CALL</span> p2(<span class="string">&#x27;AD_PRES&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建存储过程实现，用户是否登录成功</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p3(<span class="keyword">IN</span> username <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">IN</span> <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> login_result <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;<span class="comment">#声明并初始化</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> login_result <span class="comment">#赋值</span></span><br><span class="line">	<span class="keyword">FROM</span> <span class="keyword">admin</span></span><br><span class="line">	<span class="keyword">WHERE</span> admin.username = username</span><br><span class="line">	<span class="keyword">AND</span> admin.password = <span class="keyword">PASSWORD</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">IF</span>(login_result&gt;<span class="number">0</span>,<span class="string">&#x27;成功&#x27;</span>,<span class="string">&#x27;失败&#x27;</span>);<span class="comment">#使用</span></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p3</span></span><br><span class="line"><span class="keyword">CALL</span> p3(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>); <span class="comment">#失败</span></span><br><span class="line"><span class="keyword">CALL</span> p3(<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>); <span class="comment">#成功</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建带-out-模式的存储过程"><a href="#创建带-out-模式的存储过程" class="headerlink" title="创建带 out 模式的存储过程"></a>创建带 out 模式的存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据输入的employess表的job_id，返回jobs表中对应的job_title</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p4(<span class="keyword">IN</span> job_id <span class="built_in">VARCHAR</span>(<span class="number">10</span>),<span class="keyword">OUT</span> job_title <span class="built_in">VARCHAR</span>(<span class="number">35</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> J.job_title <span class="keyword">INTO</span> job_title</span><br><span class="line">	<span class="keyword">FROM</span> jobs J</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	employees E <span class="keyword">ON</span> E.job_id = J.job_id</span><br><span class="line">	<span class="keyword">WHERE</span> J.job_id=job_id ;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用p4</span></span><br><span class="line"><span class="keyword">CALL</span> p4(<span class="string">&#x27;AD_PRES&#x27;</span>,@job_title);</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印job_title</span></span><br><span class="line"><span class="keyword">SELECT</span> @job_title;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据输入的employess表的job_id，返回jobs表中对应的job_title和min_salary</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p5(<span class="keyword">IN</span> job_id <span class="built_in">VARCHAR</span>(<span class="number">10</span>),<span class="keyword">OUT</span> job_title <span class="built_in">VARCHAR</span>(<span class="number">35</span>),<span class="keyword">OUT</span> min_salary <span class="built_in">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> J.job_title,J.min_salary <span class="keyword">INTO</span> job_title,min_salary</span><br><span class="line">	<span class="keyword">FROM</span> jobs J</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	employees E <span class="keyword">ON</span> E.job_id = J.job_id</span><br><span class="line">	<span class="keyword">WHERE</span> J.job_id=job_id ;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p5</span></span><br><span class="line"><span class="keyword">CALL</span> p5(<span class="string">&#x27;AD_PRES&#x27;</span>,@job_title,@min_salary);</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印job_title，min_salary</span></span><br><span class="line"><span class="keyword">SELECT</span> @job_title,@min_salary;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建带-inout-模式的存储过程"><a href="#创建带-inout-模式的存储过程" class="headerlink" title="创建带 inout 模式的存储过程"></a>创建带 inout 模式的存储过程</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传入a和b两个值，最终a和b都翻倍并返回</span></span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p6(INOUT a <span class="built_in">INT</span> ,INOUT b <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> a=a*<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">SET</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用p6</span></span><br><span class="line"><span class="keyword">SET</span> @m=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">SET</span> @n=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">CALL</span> p6(@m,@n);</span><br><span class="line"></span><br><span class="line">打印返回结果</span><br><span class="line"><span class="keyword">SELECT</span> @m,@n</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul>
<li><p>一次只能删除一个存储过程，并且要求有该存储过程的 alter rontine 权限</p>
</li>
<li><p>语法</p>
</li>
<li><pre><code class="sql">drop procedure 存储过程名
<figure class="highlight cal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">p1</span>;</span></span><br><span class="line">  DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">p2</span>,<span class="title">p3</span>;</span> #一次只能删除一个存储过程</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="查询存储过程的信息"><a href="#查询存储过程的信息" class="headerlink" title="查询存储过程的信息"></a>查询存储过程的信息</h3><ul>
<li><p>语法：SHOW CREATE PROCEDURE 存储过程名</p>
</li>
<li><p>如，查看存储过程p2</p>
</li>
<li><pre><code>SHOW CREATE PROCEDURE  p2;</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>图形化界面客户端、Mysql语法规范</title>
    <url>/2020/09/16/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%81Mysql%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="图形化界面："><a href="#图形化界面：" class="headerlink" title="图形化界面："></a>图形化界面：</h3><p>Sql yog </p>
<img src="https://wx1.sinaimg.cn/mw690/007gSPK8gy1giuo8yctidj30jb0fejw1.jpg" alt="01.png" style="zoom:50%;" />

<p>Navicat</p>
<img src="https://wx3.sinaimg.cn/mw690/007gSPK8gy1giuougxbyej30j30gm3yr.jpg" alt="02.png" style="zoom:50%;" />

<h3 id="MySql-语法规范"><a href="#MySql-语法规范" class="headerlink" title="MySql 语法规范"></a>MySql 语法规范</h3><ol>
<li>不区分大小写,但建议关键字大写，表名、列名小写 </li>
<li>每条命令最好用分号结尾 </li>
<li>各子句一般要分行写</li>
<li>每条命令根据需要，可以进行缩进 或换行 </li>
<li>注释 单行注释：<ol>
<li>#注释文字 </li>
<li>单行注释：– 注释文字 </li>
<li>多行注释：/* 注释文字 */</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>常见函数(单行函数)</title>
    <url>/2020/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0(%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0)/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>常见函数：类似于方法，将一组逻辑语句封装在方法体中，对外暴露方法名</p>
</li>
<li><p>调用：select   函数名(实参列表)  [ from  表 ]</p>
</li>
<li><p>分类：</p>
<p>​    单行函数：concat，length，if null 等</p>
<p>​    分组函数：做统计使用，又称为统计函数、聚合函数、组函数</p>
</li>
</ul>
<h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><ol>
<li><p><strong>字符函数</strong></p>
<ol>
<li><p>length 获取参数值的字节个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27;张三john&#x27;</span>);</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span> <span class="comment">#查看字符集</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>concat 拼接字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(last_name,<span class="string">&#x27;_&#x27;</span>,first_name) 姓名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>upper，lower</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">&#x27;JOHN&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>substt，substring</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#截取从指定索引处后面所有字符 注意：索引从1开始</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="number">2</span>)  out_put;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#截取从指定索引处指定字符长度的字符 左右闭合</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>) out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>instr  返回子串第一次出现的索引，如果找不到返回0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="string">&#x27;T&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">&#x27;你好，Tom&#x27;</span>,<span class="string">&#x27;X&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>trim</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;    张三    &#x27;</span>) <span class="keyword">AS</span> out_put; <span class="comment"># 去掉左右两边空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaaaaaaa张aa三aaaaaaa&#x27;</span>)  <span class="keyword">AS</span> out_put; <span class="comment"># 去掉左右两边的a字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>lpad，用指定的字符实现左填充指定长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="string">&#x27;hello，张三&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;*&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>rpad，用指定的字符实现右填充指定长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;hello，张三&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
<li><p>replace，替换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">&#x27;hello，张三&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>数学函数</strong></p>
<ol>
<li><p>round，四舍五入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">-1.55</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">1.567</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>ceil，向上取整，返回 &gt;= 该参数的最小整数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">-1.02</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>floor，向下取整，返回 &lt;= 该参数的最大整数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">-9.99</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>truncate，截断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.69999</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>mod 取余</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mod(a,b) = a-a/b *b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">10</span>,<span class="number">-3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span>%<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>日期函数</strong></p>
<ol>
<li><p>now，返回当前系统日期+时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>curdate，返回当前系统日期，不包含时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>curtime，返回当前系统时间，不包含日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定的部分，年，月，日，小时，分钟，秒</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>()) 年;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="string">&#x27;1998-1-1&#x27;</span>) 年;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>()) 月;</span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="keyword">NOW</span>()) 月;</span><br></pre></td></tr></table></figure>
</li>
<li><p>str_to_date，将字符通过指定的格式转换成日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;1998-3-2&#x27;</span>,<span class="string">&#x27;%Y-%c-%d&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询入职日期为1992--4-3的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hiredate = <span class="string">&#x27;1992-4-3&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hiredate = <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;4-3 1992&#x27;</span>,<span class="string">&#x27;%c-%d %Y&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>date_format，将日期转换成字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">&#x27;%y年%m月%d日&#x27;</span>) <span class="keyword">AS</span> out_put</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有奖金的员工名和入职日期(xx月/xx日 xx年)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,<span class="keyword">DATE_FORMAT</span>(hiredate,<span class="string">&#x27;%m月/%d日 %y年&#x27;</span>) 入职日期</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>流程控制函数</strong></p>
<ol>
<li><p>if 函数，处理双分支</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">10</span>&lt;<span class="number">5</span>,<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;小&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct,<span class="keyword">IF</span>(commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>,<span class="string">&#x27;没奖金&#x27;</span>,<span class="string">&#x27;有奖金&#x27;</span>) 备注</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>case 语句，处理多分支</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1或语句1;</span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例1：查询员工的工资，要求（处理等值判断）</span></span><br><span class="line">部门号=30，显示的工资为1.1倍</span><br><span class="line">部门号=40，显示的工资为1.2倍</span><br><span class="line">部门号=50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示的工资为原工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary 原始工资,department_id,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary*<span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> salary*<span class="number">1.2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary*<span class="number">1.3</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 新工资</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例2：查询员工的工资的情况（处理条件判断）</span></span><br><span class="line">如果工资&gt;20000,显示A级别</span><br><span class="line">如果工资&gt;15000,显示B级别</span><br><span class="line">如果工资&gt;10000，显示C级别</span><br><span class="line">否则，显示D级别</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>其他函数</strong> </p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();  <span class="comment">#版本</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>(); <span class="comment">#当前库</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();     <span class="comment">#当前连接用户</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>条件查询</title>
    <url>/2020/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="条件查询语法"><a href="#条件查询语法" class="headerlink" title="条件查询语法"></a>条件查询语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	查询列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	筛选条件;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>按条件表达式筛选</strong></p>
<blockquote>
<p>简单条件运算符：&gt; &lt;  =  !=  &lt;&gt;  &gt;=   &lt;=</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资&gt;12000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary&gt;<span class="number">12000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>按逻辑表达式筛选</strong></p>
<blockquote>
<p>逻辑运算符：and  or  not（not，两边都为false，结果为true，否则为false)</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资z在10000到20000之间的员工名、工资以及奖金</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   last_name,salary,commission_pct</span><br><span class="line"><span class="keyword">FROM</span>  employees</span><br><span class="line"><span class="keyword">WHERE</span>  salary&gt;=<span class="number">10000</span> <span class="keyword">AND</span> salary&lt;=<span class="number">20000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询部门编号不是在90到110之间，或者工资高于15000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">   <span class="keyword">NOT</span>(department_id&gt;=<span class="number">90</span> <span class="keyword">AND</span> department_id&lt;=<span class="number">110</span>) <span class="keyword">OR</span> salary&gt;<span class="number">15000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>模糊查询</strong></p>
<ol>
<li>like</li>
</ol>
<blockquote>
<p>一般和通配符搭配使用，通配符：%(代表0个或多个字符)， _(任意单个字符)</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名中包含字符a的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span>  last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__n_l%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名中第二个字符为_的员工名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_$_%&#x27;</span> ESCAPE <span class="string">&#x27;$&#x27;</span>; <span class="comment">#$是转义的作用，可替换为其他字符</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>2.between and</p>
<blockquote>
<p>包含临界值，两个临界值不能调换顺序</p>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工编号在100到120之间的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>3.in</p>
<blockquote>
<ul>
<li>包含某字段的值是否属于in列表中的某一项</li>
<li>in 列表中的值类型必须一致或兼容</li>
<li>in 列表中不支持通配符</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  job_id <span class="keyword">IN</span>( <span class="string">&#x27;IT_PROT&#x27;</span> ,<span class="string">&#x27;AD_VP&#x27;</span>,<span class="string">&#x27;AD_PRES&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>4.is null 和 安全等于 &lt;=&gt;</p>
<blockquote>
<ul>
<li>is null 或 is not null 用于判断 null 值，=或&lt;&gt;不能用于判断 null 值</li>
<li>安全等于&lt;=&gt;，即可以判断NULL值，又可以判断普通数值</li>
<li>推荐使用 is null</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询没有奖金的员工名和奖金率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询没有奖金的员工名和奖金率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct &lt;=&gt;<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资为12000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary &lt;=&gt; <span class="number">12000</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询所有员工的奖金率，若为Null，置为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">     <span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>) <span class="keyword">AS</span> 奖金率,</span><br><span class="line">     commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>多表(连接)查询</title>
    <url>/2020/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2)/</url>
    <content><![CDATA[<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul>
<li>又称多表查询，当查询的字段来自于多个表时，就需要用到连接查询</li>
<li>分类：<ul>
<li>按年代分类：<ul>
<li>sql92 标准：仅支持内连接</li>
<li>sql99 标准：支持内连接 + 外连接 + 交叉连接</li>
</ul>
</li>
<li>按功能分类：<ul>
<li>内连接：等值连接、非等值连接、自连接</li>
<li>外连接：左外连接、右外连接、全外连接</li>
<li>交叉连接</li>
</ul>
</li>
</ul>
</li>
<li>笛卡尔乘积现象<ul>
<li>表1有m行，表2有n行，连接后结果为 m*n 行</li>
<li>原因：没有添加有效的连接条件</li>
<li>解决：可以在Where 子句中加入有效的连接条件</li>
</ul>
</li>
<li>sql92和sql99<ul>
<li>sql99 支持的更多</li>
<li>sql99 实现连接条件和筛选条件的分离，可读性较高</li>
</ul>
</li>
</ul>
<h3 id="等值连接（sql-92"><a href="#等值连接（sql-92" class="headerlink" title="等值连接（sql 92)"></a>等值连接（sql 92)</h3><ul>
<li>等值连接的结果为多个表的交集部分</li>
<li>n个表连接，至少需要 n-1 个连接条件</li>
<li>多表连接，对顺序没有要求</li>
<li>一般需要为每个表起别名</li>
<li>可以搭配排序，分组，筛选等子句使用</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和对应的部门名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.<span class="string">`department_id`</span>=departments.<span class="string">`department_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为表起别名，表的顺序可以调换</span></span><br><span class="line"><span class="comment">#注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> 员工表.last_name , 员工表.job_id, 职位表.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees 员工表,jobs 职位表</span><br><span class="line"><span class="keyword">WHERE</span> 员工表.<span class="string">`job_id`</span>=职位表.<span class="string">`job_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等值连接+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工名、部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,commission_pct 奖金</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> E.<span class="string">`commission_pct`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等值连接+分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个城市的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 部门个数,city 城市</span><br><span class="line"><span class="keyword">FROM</span> departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等值连接+排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个工种的工种名和员工的个数，并且按员工个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> job_title 工种名,<span class="keyword">COUNT</span>(*) 员工个数</span><br><span class="line"><span class="keyword">FROM</span> employees E,jobs J</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`job_id`</span>=J.<span class="string">`job_id`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#三表连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名、部门名和所在的城市</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,city 城市</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三表连接+筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,city 城市</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三表连接+排序</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名,city 城市</span><br><span class="line"><span class="keyword">FROM</span> employees E,departments D,locations L</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`department_id`</span>=D.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">AND</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="等值连接-sql-99"><a href="#等值连接-sql-99" class="headerlink" title="等值连接(sql 99)"></a>等值连接(sql 99)</h3><ul>
<li>通过 join 关键字实现连接</li>
<li>通过 ON 子句创建连接<ul>
<li>自然连接中是以具有相同名字的列为连接条件的</li>
<li>可以使用ON 子句指定额外的连接条件</li>
</ul>
</li>
<li>分类：<ul>
<li>内连接：[inner] join on</li>
<li>左外连接：left [outer] join on</li>
<li>右外连接：right [outer] join on</li>
</ul>
</li>
<li>语法：</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，......</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line">[<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br><span class="line">[<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>] <span class="keyword">join</span> 表<span class="number">3</span></span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line">[<span class="keyword">where</span> 筛选条件]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> 分组字段]</span><br><span class="line">[<span class="keyword">having</span> 分组后的筛选条件]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式] </span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名、部门名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,department_name 部门名</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">JOIN</span>  employees E</span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`department_id`</span> = D.<span class="string">`department_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql99等值连接+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询名字中包含e的员工名和工种名（添加筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 员工名,job_title 工种名</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs J</span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`job_id`</span>=  J.<span class="string">`job_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`last_name`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql99等值连接+分组+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门个数&gt;3的城市名和部门个数，（添加分组+筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> city 城市名,<span class="keyword">COUNT</span>(*) 部门个数</span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> locations L</span><br><span class="line"><span class="keyword">ON</span> D.<span class="string">`location_id`</span>=L.<span class="string">`location_id`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="非等值连接-sql-92"><a href="#非等值连接-sql-92" class="headerlink" title="非等值连接(sql 92)"></a>非等值连接(sql 92)</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工资和工资级别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary 工资,grade_level 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees E,job_grades G</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#非等值连接+筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工的工资和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> salary 工资,grade_level 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees E,job_grades G</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> G.<span class="string">`lowest_sal`</span> <span class="keyword">AND</span> G.<span class="string">`highest_sal`</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#非等值连接+分组+筛选+排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询工资级别的个数&gt;20的个数，并且按工资级别降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">JOIN</span> job_grades G</span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`salary`</span> <span class="keyword">BETWEEN</span> G.<span class="string">`lowest_sal`</span> <span class="keyword">AND</span> G.<span class="string">`highest_sal`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">20</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="自连接-sql-92"><a href="#自连接-sql-92" class="headerlink" title="自连接(sql 92)"></a>自连接(sql 92)</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和上级的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> E.last_name 员工名,M.last_name 上级名称</span><br><span class="line"><span class="keyword">FROM</span> employees E,employees M</span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`manager_id`</span>=M.<span class="string">`employee_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="自连接-sql-99"><a href="#自连接-sql-99" class="headerlink" title="自连接(sql 99)"></a>自连接(sql 99)</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和上级的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> E.last_name 员工名, M.last_name 上级名称</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">JOIN</span> employees M </span><br><span class="line"><span class="keyword">ON</span> E.<span class="string">`manager_id`</span>=M.<span class="string">`employee_id`</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="外连接（仅sql99支持"><a href="#外连接（仅sql99支持" class="headerlink" title="外连接（仅sql99支持)"></a>外连接（仅sql99支持)</h3><ul>
<li><p>应用场景：用于查询一个表中有，另一个表中没有的记录</p>
</li>
<li><p>使用：</p>
<ul>
<li>外连接的查询结果是主表中的所有记录，如果从表中有和它匹配的，则显示匹配的值；如果从表中没有和它匹配的，则显示 null；</li>
<li>外连接的查询结果=内连接查询结果+主表中有而从表中没有的记录</li>
</ul>
</li>
<li><p>左外连接：left join 左边的是主表</p>
</li>
<li><p>右外连接：right join 右边的是主表</p>
</li>
<li><p>全外连接：内连接的结果+表1中有但表2中无+表2中有但表1中无</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询哪个部门没有员工</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> D.*,E.employee_id </span><br><span class="line"><span class="keyword">FROM</span> departments D</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> employees E</span><br><span class="line"><span class="keyword">ON</span> D.<span class="string">`department_id`</span> = E.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> E.<span class="string">`employee_id`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> D.*,E.employee_id</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments D</span><br><span class="line"><span class="keyword">ON</span> D.<span class="string">`department_id`</span> = E.<span class="string">`department_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> e.<span class="string">`employee_id`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全外连接（mysql 不支持)</span></span><br><span class="line"><span class="keyword">SELECT</span> G.*,B.*</span><br><span class="line"><span class="keyword">FROM</span> beauty G</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys B</span><br><span class="line"><span class="keyword">ON</span> G.<span class="string">`boyfriend_id`</span> = B.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#交叉连接</span></span><br><span class="line"><span class="keyword">SELECT</span> G.*,B.*</span><br><span class="line"><span class="keyword">FROM</span> beauty G</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> boys B;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>标识列</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%A0%87%E8%AF%86%E5%88%97/</url>
    <content><![CDATA[<h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><ul>
<li>又称为自增长列，可以不用手动插入值，系统提供默认的序列值</li>
<li>标识列不一定和主键搭配，但要求是一个 key</li>
<li>一个表至多一个标识列</li>
<li>标识列的类型只能是数值型</li>
<li>标识列可以通过 set auto increment_increment = 3 设置步长</li>
<li>标识列可以通过手动插入值，设置起始值</li>
</ul>
<h3 id="创建表时设置标识列"><a href="#创建表时设置标识列" class="headerlink" title="创建表时设置标识列"></a>创建表时设置标识列</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置id列为自增长列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_identity(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">	stu_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_identity(<span class="keyword">id</span>,stu_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_identity(stu_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;lucy&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_identity;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看自增长列起始值和步长</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%auto_increment%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  设置自增长列步长</span></span><br><span class="line"><span class="keyword">SET</span> auto_increment_increment=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>排序查询</title>
    <url>/2020/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="排序查询语法"><a href="#排序查询语法" class="headerlink" title="排序查询语法"></a>排序查询语法</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">【<span class="keyword">where</span>  筛选条件】</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<ul>
<li>asc表示升序，可以省略，desc 表示降序</li>
<li>order by 子句可以支持 单个字段，多个字段，别名，表达式，函数等。</li>
<li>order by 子句在查询语句的最后面（limit 子句除外)</li>
</ul>
</blockquote>
<p>按单个字段排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>添加筛选条件再排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询部门编号&gt;=90的员工信息，并按员工编号降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id&gt;=<span class="number">90</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> employee_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按表达式排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工信息 按年薪降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *,salary*<span class="number">12</span>*(<span class="number">1</span>+<span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary*<span class="number">12</span>*(<span class="number">1</span>+<span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按别名排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工信息 按年薪升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *,salary*<span class="number">12</span>*(<span class="number">1</span>+<span class="keyword">IFNULL</span>(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按函数排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名，并且按名字的长度降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(last_name) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>按多个字段排序</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工信息，要求先按工资降序，再按employee_id升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,employee_id <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>常见函数(分组函数)</title>
    <url>/2020/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0(%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0)/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>分组函数：用作统计使用，又称为聚合函数、统计函数、组函数。分组函数作用于一组数据，并对一组数据返回一个值</li>
<li>分类：sum 求和，avg 求平均，max 求最大值，min 求最小值，count 求个数</li>
<li>使用：<ul>
<li>sum，avg 一般用于处理数值型，max，min，count 可以处理任何类型</li>
<li>除了 count(*)，其他分组函数都忽略 null 值，即 null 值不参与运算</li>
<li>可以和 distinct 搭配实现去重的运算</li>
<li>和分组函数一同查询的字段要求是 group by 后的字段</li>
</ul>
</li>
</ul>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) 和,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(salary),<span class="number">2</span>) 平均,<span class="keyword">MAX</span>(salary) 最高,<span class="keyword">MIN</span>(salary) 最低,<span class="keyword">COUNT</span>(salary) 个数</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="和-distinct-搭配"><a href="#和-distinct-搭配" class="headerlink" title="和 distinct 搭配"></a>和 distinct 搭配</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="keyword">DISTINCT</span> salary),<span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> salary),<span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="count-函数"><a href="#count-函数" class="headerlink" title="count 函数"></a>count 函数</h3><ul>
<li>count(*) 返回表中记录总数，适用于任意数据类型</li>
<li>count(expr)  返回 expr 不为空的记录总数</li>
<li>count() 的参数可以支持：字段，*，常量值（一般放1）</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(commission_pct) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="和分组函数一同查询的字段有限制"><a href="#和分组函数一同查询的字段有限制" class="headerlink" title="和分组函数一同查询的字段有限制"></a>和分组函数一同查询的字段有限制</h3><blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无法执行，Avg(salary) 只输出一行，而 empolyee_id 输出多行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),employee_id  <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制结构</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><ul>
<li>顺序结构，分支结构，循环结构</li>
</ul>
<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul>
<li><p>if函数</p>
<ul>
<li>语法：if(条件，值1，值2)</li>
<li>功能：实现双分支</li>
<li>应用在 begin end中或外面</li>
</ul>
</li>
<li><p>case结构</p>
<ul>
<li><p>作为表达式</p>
<ul>
<li><p>情况1：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 值<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 值<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 值n;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>情况2：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 值<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 值<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 值n;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>作为独立的语句（只能在 begin end 中)</p>
<ul>
<li><p>情况1：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 语句<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 语句n;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>情况2：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 语句<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 语句n;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fn(score <span class="built_in">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> ch <span class="built_in">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	CASE </span><br><span class="line">	WHEN score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">	WHEN score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">	WHEN score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">	ELSE <span class="keyword">SET</span> ch=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">	RETURN ch;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> fn(<span class="number">56</span>)	</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>if 结构</p>
</li>
<li><p>类似于多重IF</p>
</li>
<li><p>只能应用在 begin end 中</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">IF 条件<span class="number">1</span> THEN 语句<span class="number">1</span>；</span><br><span class="line">ELSEIF 条件<span class="number">2</span> THEN 语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">ELSE 语句n;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> foo(score <span class="built_in">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ch <span class="built_in">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	IF score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">	ELSEIF score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">	ELSEIF score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">	ELSE <span class="keyword">SET</span> ch=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">	RETURN ch;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> foo(<span class="number">87</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code class="sql">
# 创建存储过程，如果工资&lt;2000,则删除，如果5000&gt;工资&gt;2000,则涨工资1000，否则涨工资500

DELIMITER $;
CREATE PROCEDURE pro(IN sal DOUBLE)
BEGIN
    IF sal&lt;2000 THEN DELETE FROM employees WHERE employees.salary=sal;
    ELSEIF sal&gt;=2000 AND sal&lt;5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;
    ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;
    END IF;
END 

CALL pro(2100)
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">### 循环结构</span></span><br><span class="line"></span><br><span class="line">- 分类：<span class="keyword">while</span>，<span class="keyword">loop</span>，<span class="keyword">repeat</span></span><br><span class="line">- 循环控制：</span><br><span class="line">  - iterate 类似于 <span class="keyword">continue</span>，结束本次循环，继续下一次</span><br><span class="line">  - leave 类似于 <span class="keyword">break</span>，跳出当前所在的循环</span><br><span class="line"></span><br><span class="line"><span class="meta">### While循环</span></span><br><span class="line"></span><br><span class="line">- 先判断后执行</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  【标签:】 <span class="keyword">while</span> 循环条件 </span><br><span class="line">   <span class="keyword">DO</span></span><br><span class="line">  	循环体；</span><br><span class="line">   <span class="keyword">END</span> <span class="keyword">while</span> 【标签】</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入，根据次数插入到admin表中多条记录</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	WHILE i&lt;=insertCount DO</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username,<span class="string">`password`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;Rose&#x27;</span>,i),<span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">		<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">WHILE</span>;	</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20则停止</span></span><br><span class="line"><span class="comment"># leave 语句</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while2(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	a:WHILE i&lt;=insertCount DO</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username,<span class="string">`password`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;xiaohua&#x27;</span>,i),<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line">		IF i&gt;=20 THEN LEAVE a;</span><br><span class="line">		<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">		<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">WHILE</span> a;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while2(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入，根据次数插入到admin表中多条记录，只插入偶数次</span></span><br><span class="line"></span><br><span class="line">DELIMITER $;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while3(<span class="keyword">IN</span> insertCount <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	a:WHILE i&lt;=insertCount DO</span><br><span class="line">		<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">		IF MOD(i,2)!=0 THEN ITERATE a;</span><br><span class="line">		<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username,<span class="string">`password`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;xiaohua&#x27;</span>,i),<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">WHILE</span> a;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while3(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="Loop循环"><a href="#Loop循环" class="headerlink" title="Loop循环"></a>Loop循环</h3><blockquote>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">【标签】<span class="keyword">loop</span></span><br><span class="line">	循环体</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">LOOP</span> 【标签】;</span><br></pre></td></tr></table></figure>

<p>可以用来模拟简单的死循环</p>
</blockquote>
<h3 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h3><ul>
<li>先执行后判断</li>
</ul>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签：】repeat</span><br><span class="line">	循环体</span><br><span class="line"> UNTILL 结束循环的条件</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">REPEAT</span> 【标签】；</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>标准库</title>
    <url>/2020/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/</url>
    <content><![CDATA[<h3 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h3><ul>
<li><p>os 模块提供了很多与操作系统交互的函数</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.getcwd()) # 当前目录路径</span><br></pre></td></tr></table></figure>

<p>只能使用 import os 而不是 from os  import *，这将避免内建的 open() 函数被 os.open() 隐式替换掉</p>
</li>
<li><p>内置的 dir() 和 help() 函数可用作交互式辅助工具，用于处理大型模块，如 os</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">dir(os)  <span class="comment"># 模块列表</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">help(os) </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于日常文件和目录管理任务，shutil 模块提供了更易于使用的更高级别的接口</p>
</li>
</ul>
<h3 id="文件通配符"><a href="#文件通配符" class="headerlink" title="文件通配符"></a>文件通配符</h3><ul>
<li><p>glob 模块提供了一个在目录中使用通配符搜索创建文件列表的函数</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> glob</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">glob.glob(<span class="string">&#x27;*.py&#x27;</span>)   <span class="comment"># 找到所有py文件列表</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul>
<li>这些参数作为列表存储在 sys 模块的 argv 属性中</li>
<li>argparse 模块提供了一种更加复杂的机制来处理命令行参数</li>
</ul>
<h3 id="错误输出重定向和程序终止"><a href="#错误输出重定向和程序终止" class="headerlink" title="错误输出重定向和程序终止"></a>错误输出重定向和程序终止</h3><ul>
<li>sys 模块还有 stdin，stdout 和 stderr 的属性</li>
<li>stderr 对于发出警告和错误消息非常有用，即使在 stdout 被重定向后也可以看到它们</li>
<li>终止脚本最直接的方法是使用 sys.exit()</li>
</ul>
<h3 id="字符串模式匹配"><a href="#字符串模式匹配" class="headerlink" title="字符串模式匹配"></a>字符串模式匹配</h3><ul>
<li><p>re 模块为高级字符串处理提供正则表达式工具</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> re</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>,<span class="string">&#x27;which foot or hand fell faster&#x27;</span>)</span></span><br><span class="line">[&#x27;foot&#x27;, &#x27;fell&#x27;, &#x27;faster&#x27;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">re.sub(<span class="string">r&#x27;(\b[a-z]+) \1&#x27;</span>,<span class="string">r&#x27;\1&#x27;</span>,<span class="string">&#x27;cat in the the hat&#x27;</span>)</span></span><br><span class="line">&#x27;cat in the hat&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当只需要简单的功能时，首选字符串方法更容易阅读和调试</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">&#x27;tea for too&#x27;</span>.replace(<span class="string">&#x27;too&#x27;</span>,<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;tea for two&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><p>math 模块提供对浮点数的底层C库函数的访问</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(math.<span class="built_in">cos</span>(math.<span class="built_in">pi</span> / <span class="number">4</span>))  <span class="meta"># 0.7071067811865476</span></span><br><span class="line"><span class="keyword">print</span>(math.<span class="built_in">log</span>(<span class="number">1024</span>, <span class="number">2</span>))  <span class="meta"># 10.0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>random 模块提供了进行随机选择的工具</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">r1 = random.choice([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line">print(r1)  # pear</span><br><span class="line"></span><br><span class="line">r2 = random.sample(range(<span class="number">100</span>), <span class="number">10</span>)</span><br><span class="line">print(r2)  # [<span class="number">20</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">73</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">60</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">r3 = random.random()  # random <span class="built_in">float</span></span><br><span class="line">print(r3)  # <span class="number">0.48661006940942286</span></span><br><span class="line"></span><br><span class="line">r4 = random.randrange(<span class="number">6</span>)</span><br><span class="line">print(r4)  # <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>statistics 模块计算数值数据的基本统计属性（均值，中位数，方差等）</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line"></span><br><span class="line">data = [<span class="number">2.75</span>, <span class="number">1.75</span>, <span class="number">1.25</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.25</span>, <span class="number">3.5</span>]</span><br><span class="line">print(statistics.mean(data))  # <span class="number">1.6071428571428572</span></span><br><span class="line">print(statistics.median(data))  # <span class="number">1.25</span></span><br><span class="line">print(statistics.variance(data))  # <span class="number">1.3720238095238095</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="互联网访问"><a href="#互联网访问" class="headerlink" title="互联网访问"></a>互联网访问</h3><ul>
<li><p>有许多模块可用于访问互联网和处理互联网协议</p>
</li>
<li><p>urllib.request 用于从URL检索数据</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> urllib.request import urlopen</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> urlopen(<span class="string">&#x27;https://docs.python.org/zh-cn/3/tutorial/index.html&#x27;</span>) <span class="keyword">as</span> response:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">line</span> = <span class="built_in">line</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;2020&#x27;</span> <span class="keyword">in</span> <span class="built_in">line</span>:</span><br><span class="line">            print(<span class="built_in">line</span>)  <span class="comment"># 最后更新于 9月 29, 2020.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>smtplib 用于发送邮件</p>
</li>
</ul>
<h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><ul>
<li><p>datetime 模块提供了以简单和复杂的方式操作日期和时间的类，还支持可感知时区的对象</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">from datetime import date</span><br><span class="line"></span><br><span class="line">now = date.today()</span><br><span class="line"><span class="keyword">print</span>(now)</span><br><span class="line"></span><br><span class="line">birthday = date(<span class="number">1964</span>, <span class="number">7</span>, <span class="number">31</span>)</span><br><span class="line">age = now - birthday</span><br><span class="line"><span class="keyword">print</span>(age.days)  <span class="comment"># 20515</span></span><br><span class="line"></span><br><span class="line">now=now.strftime(<span class="string">&quot;%m-%d-%y  %d %b %Y  %A  %d %B.&quot;</span>) <span class="comment">#09-30-20  30 Sep 2020  Wednesday  30 September.</span></span><br><span class="line"><span class="keyword">print</span>(now)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><ul>
<li><p>常见的数据存档和压缩格式由模块直接支持，包括，zlib，gzip，bz2，zipfile 和 tarfile</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">import <span class="literal">zlib</span></span><br><span class="line"></span><br><span class="line">s = b<span class="string">&#x27;witch which has which witches wrist watch&#x27;</span></span><br><span class="line"><span class="literal">print</span>(len(s))  <span class="comment"># 41</span></span><br><span class="line"></span><br><span class="line">t = <span class="literal">zlib</span>.compress(s)</span><br><span class="line"><span class="literal">print</span>(len(t))  <span class="comment"># 37</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">zlib</span>.decompress(t)</span><br><span class="line"><span class="literal">print</span>(c)  <span class="comment"># b&#x27;witch which has which witches wrist watch&#x27;</span></span><br><span class="line"></span><br><span class="line">d = <span class="literal">zlib</span>.crc32(s)</span><br><span class="line"><span class="literal">print</span>(d)  <span class="comment"># 226805979</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="性能测量"><a href="#性能测量" class="headerlink" title="性能测量"></a>性能测量</h3><ul>
<li><p>timeit 模块可以快速演示在运行效率方面的优势</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">from timeit import Timer</span><br><span class="line"></span><br><span class="line">t1 = <span class="constructor">Timer(&#x27;<span class="params">t</span>=<span class="params">a</span>; <span class="params">a</span>=<span class="params">b</span>; <span class="params">b</span>=<span class="params">t</span>&#x27;, &#x27;<span class="params">a</span>=1; <span class="params">b</span>=2&#x27;)</span>.timeit<span class="literal">()</span></span><br><span class="line">print(t1)  # <span class="number">0.030319299999999997</span></span><br><span class="line"></span><br><span class="line">t2 = <span class="constructor">Timer(&#x27;<span class="params">a</span>,<span class="params">b</span> = <span class="params">b</span>,<span class="params">a</span>&#x27;, &#x27;<span class="params">a</span>=1; <span class="params">b</span>=2&#x27;)</span>.timeit<span class="literal">()</span></span><br><span class="line">print(t2)  # <span class="number">0.028974600000000003</span></span><br></pre></td></tr></table></figure>

<p>与 timeit  的精细粒度级别相反，profile 和 pstats 模块提供了用于在较大的代码块中识别时间关键部分的工具。</p>
</li>
</ul>
<h3 id="质量控制"><a href="#质量控制" class="headerlink" title="质量控制"></a>质量控制</h3><ul>
<li><p>开发高质量软件的一种方法是在开发过程中为每个函数编写测试，并在开发过程中经常运行这些测试</p>
</li>
<li><p>doctest 模块提供了一个工具，用于扫描模块并验证程序文档字符串中嵌入的测试。测试构造就像将典型调用及其结果剪切并粘贴到文档字符串一样。这通过向用于提供示例来改进文档，并且它允许doctest模块确保代码保持对文档的真实。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">values</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    print(average([20,30,40]))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sum(values) / len(values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line"></span><br><span class="line">doctest.testmod()</span><br></pre></td></tr></table></figure>
</li>
<li><p>unittest 模块不像 doctest 模块那样易于使用，但它允许在一个单独的文件中维护更全面的测试集：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line"></span><br><span class="line">class TestStatisticalFunctions(unittest.TestCase):</span><br><span class="line"></span><br><span class="line"><span class="code">    def test_average(self):</span></span><br><span class="line"><span class="code">        self.assertEqual(average([20, 30, 70]), 40.0)</span></span><br><span class="line"><span class="code">        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)</span></span><br><span class="line"><span class="code">        with self.assertRaises(ZeroDivisionError):</span></span><br><span class="line"><span class="code">            average([])</span></span><br><span class="line"><span class="code">        with self.assertRaises(TypeError):</span></span><br><span class="line"><span class="code">            average(20, 30, 70)</span></span><br><span class="line"></span><br><span class="line">unittest.main()  # Calling from the command line invokes all tests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="自带电池"><a href="#自带电池" class="headerlink" title="自带电池"></a>自带电池</h3><ul>
<li>xmlrpc.client 和 xmlrpc.server 模块使得实现远程过程调用变得简单。</li>
<li>email 包是一个用于管理电子邮件的库，包括MIME和其他符合RFC 2822 规范的邮件文档。与smtplib 和 poplib 不同（它们实际上是发送和接收消息)，电子邮件包提供完整的工具集，用于构建或解码复杂的消息结构以及实现互联网编码和标头协议。</li>
<li>json 包为解析这种流行的数据交换格式提供了强大的支持。</li>
<li>csv 模块以逗号分隔值格式直接读取和写入文件，这种格式通常为数据库和电子表格所支持。</li>
<li>XML处理有 xml.etree.ElementTree，xml.dom和xml.sax 包所支持</li>
<li>sqlite3模块时SQLLite数据库库的包装器，提供了一个可以使用稍微非标准的SQL语法更新和访问的持久数据库。</li>
<li>国际化由许多模块支持，如 gettext，locale，以及 codecs 包。</li>
</ul>
<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><ul>
<li><p>reprlib 模块提供了一个定制化版本的 repr() 函数，用于缩略系那是大型或深层嵌套的容器对象</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import reprlib</span><br><span class="line"></span><br><span class="line">a = reprlib.repr(<span class="builtin-name">set</span>(<span class="string">&#x27;supercalifragilisticexpialidocious&#x27;</span>))</span><br><span class="line"><span class="builtin-name">print</span>(a) # &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="built_in">..</span>.&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>pprint 模块提供了更加复杂的打印控制，其输出的内置对象和用于自定义对象能够被解释器直接读取。当输出结果过长而需要拆行时，“美化输出机制”会添加换行符和索引，以更清楚地展示数据结构</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">t = [[[[<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>], <span class="string">&#x27;white&#x27;</span>, [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]], [[<span class="string">&#x27;magenta&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>], <span class="string">&#x27;blue&#x27;</span>]]]</span><br><span class="line">pprint.pprint(t, width=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[[[&#x27;</span>black<span class="string">&#x27;, &#x27;</span>cyan<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">   &#x27;</span>whit<span class="string">e&#x27;,</span></span><br><span class="line"><span class="string">   [&#x27;</span>green<span class="string">&#x27;, &#x27;</span>red<span class="string">&#x27;]],</span></span><br><span class="line"><span class="string">  [[&#x27;</span>magenta<span class="string">&#x27;, &#x27;</span>yellow<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">   &#x27;</span>blu<span class="string">e&#x27;]]]</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>textwrap 模块能够格式化文本段落，以适应给定的屏幕宽度</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"><span class="meta">doc</span> = <span class="string">&quot;&quot;&quot;The wrap() method is just like fill() except that it returns</span></span><br><span class="line"><span class="string"> a list of strings instead of one big string with newlines to separate</span></span><br><span class="line"><span class="string"> the wrapped lines. &quot;&quot;&quot;</span></span><br><span class="line">print(textwrap.fill(<span class="meta">doc</span>, width=<span class="number">80</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>locale 模块处理与特定地域文化相关的数据格式，locale 模块的 format 函数包含一个 grouping 属性，可直接将数字格式转化为带有组分隔符的样式</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import locale</span><br><span class="line"></span><br><span class="line">a = locale.setlocale(locale.LC_ALL, <span class="string">&#x27;English_United States.1252&#x27;</span>)</span><br><span class="line"><span class="builtin-name">print</span>(a)  # English_United States.1252</span><br><span class="line"></span><br><span class="line">x = 1234567.8</span><br><span class="line">b = locale.format_string(<span class="string">&quot;%d&quot;</span>, x, <span class="attribute">grouping</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span>(b)  # 1,234,567</span><br><span class="line"></span><br><span class="line">conv = locale.localeconv()</span><br><span class="line">c = locale.format_string(<span class="string">&quot;%s%.*f&quot;</span>, (conv[<span class="string">&#x27;currency_symbol&#x27;</span>], conv[<span class="string">&#x27;frac_digits&#x27;</span>], x), <span class="attribute">grouping</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span>(c)  # <span class="variable">$1</span>,234,567.80</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><ul>
<li><p>string 模板包含一个通用的“Template” 类，具有适用于最终用户的简化语法。</p>
</li>
<li><p>格式化操作是通过占位符实现的，占位符由 $ 加上合法的Python标识符构成。一旦使用 {} 将占位符括起来，就可以在后面跟上更多的字母和数字而无需空格分割。 $$ 将被转义成单个字符 $:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string import Template</span><br><span class="line"></span><br><span class="line">t = Template(<span class="string">&#x27;$&#123;name&#125; $role money=$$10&#x27;</span>)</span><br><span class="line">a = t.substitute(<span class="attribute">name</span>=<span class="string">&#x27;张三&#x27;</span>, <span class="attribute">role</span>=<span class="string">&#x27;学生&#x27;</span>)</span><br><span class="line"><span class="builtin-name">print</span>(a)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在字典或关键字参数中未提供某个占位符的值，那么 substitude() 方法将抛出 KeyError</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string import Template</span><br><span class="line"></span><br><span class="line">m = Template(<span class="string">&#x27;归还 $item 给 $owner&#x27;</span>)</span><br><span class="line">n = dict(<span class="attribute">item</span>=<span class="string">&#x27;钱包&#x27;</span>)</span><br><span class="line"><span class="builtin-name">print</span>(m.substitute(n))  # KeyError: <span class="string">&#x27;owner&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于邮件合并类型的应用，用户提供的数据有可能是不完整的，此时使用 saft_substitute() 方法更加合适，如果数据缺失，它会直接将占位符原样保留</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string import Template</span><br><span class="line"></span><br><span class="line">m = Template(<span class="string">&#x27;归还 $item 给 $owner&#x27;</span>)</span><br><span class="line">n = dict(<span class="attribute">item</span>=<span class="string">&#x27;钱包&#x27;</span>)</span><br><span class="line"><span class="builtin-name">print</span>(m.safe_substitute(n))  # 归还 钱包 给 <span class="variable">$owner</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Template 的子类可以自定义分隔符，例如，以下是某个照片浏览器的批量重命名功能，采用了百分号作为日期，照片序号和照片格式的占位符：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">time</span>, os.path</span><br><span class="line"></span><br><span class="line">photofiles = [<span class="string">&#x27;img_1074.jpg&#x27;</span>, <span class="string">&#x27;img_1076.jpg&#x27;</span>, <span class="string">&#x27;img_1077.jpg&#x27;</span>]</span><br><span class="line"><span class="keyword">class</span> BatchRename(<span class="keyword">Template</span>):</span><br><span class="line">    delimiter = <span class="string">&#x27;%&#x27;</span></span><br><span class="line"></span><br><span class="line">fmt = <span class="keyword">input</span>(<span class="string">&#x27;重命名 (%d-date %n-seqnum %f-format): &#x27;</span>)</span><br><span class="line"><span class="type">date</span> = <span class="type">time</span>.strftime(<span class="string">&#x27;%d%b%y&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, filename <span class="keyword">in</span> enumerate(photofiles):</span><br><span class="line">    base, ext = os.path.splitext(filename)</span><br><span class="line">    newname = BatchRename(fmt).substitute(d=<span class="type">date</span>, n=i, f=ext)</span><br><span class="line">    print(<span class="string">&#x27;&#123;0&#125; ---&gt; &#123;1&#125;&#x27;</span>.format(filename, newname))</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">img_1074.jpg ---&gt; hello_0.jpg</span></span><br><span class="line"><span class="string">img_1076.jpg ---&gt; hello_1.jpg</span></span><br><span class="line"><span class="string">img_1077.jpg ---&gt; hello_2.jpg</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="使用二进制数据记录格式"><a href="#使用二进制数据记录格式" class="headerlink" title="使用二进制数据记录格式"></a>使用二进制数据记录格式</h3><ul>
<li><p>struct 模块提供了 pack() 和 unpack() 函数，用于处理不定长度的二进制记录格式。</p>
</li>
<li><p>如，在不使用 zipfile 模块的情况下，遍历循环一个ZIP文件的所有头信息。Pack代码 “H” 和 “I” 分别代表两字节和四字节无符号整数，”&lt;” 代表它们是标准尺寸的小端字节序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">open</span>(<span class="string">&#x27;demo.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	<span class="keyword">data</span>=f.read()</span><br><span class="line"><span class="keyword">start</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">3</span>):</span><br><span class="line">	<span class="keyword">start</span> += <span class="number">14</span></span><br><span class="line">	<span class="keyword">fields</span> = struct.unpack(<span class="string">&#x27;&lt;IIIHH&#x27;</span>,<span class="keyword">data</span>[<span class="keyword">start</span>:<span class="keyword">start</span>+<span class="number">16</span>])</span><br><span class="line">	<span class="keyword">crc32</span>,comp_size,uncompe_size,filenamesize,extra_size = <span class="keyword">fields</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">start</span> += <span class="number">16</span></span><br><span class="line">	filename = <span class="keyword">data</span>[<span class="keyword">start</span>:<span class="keyword">start</span>+filenamesize]</span><br><span class="line">	<span class="keyword">start</span> += filenamesize</span><br><span class="line">	extra = <span class="keyword">data</span>[<span class="keyword">start</span>:<span class="keyword">start</span>+extra_size]</span><br><span class="line">	print(filename,<span class="keyword">hex</span>(<span class="keyword">crc32</span>),comp_size,uncomp_size)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">start</span> += extra_size + comp_size </span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul>
<li>线程是一种对于非顺序依赖的多个任务进行解耦的技术，多线程可以提高应用的响应效率，当接收用户输入的同时，保持其他任务在后台运行。一个有关的应用场景是，将IO和计算运行在两个并行的线程中</li>
<li>多线程应用面临的主要挑战是，相互协调的多个线程之间需要共享数据或其他资源，为此，threading 模块提供了多个同步操作原语，包括线程锁，事件，条件变量和信号量。</li>
<li></li>
</ul>
<h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><h3 id="用于操作列表的工具"><a href="#用于操作列表的工具" class="headerlink" title="用于操作列表的工具"></a>用于操作列表的工具</h3><h3 id="十进制浮点数运算"><a href="#十进制浮点数运算" class="headerlink" title="十进制浮点数运算"></a>十进制浮点数运算</h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>约束</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><ul>
<li>约束：一种限制，用于限制表中的数据，为了保证表中的数据的一致性和完整性</li>
<li>分类：六大约束<ul>
<li>NOT NUL：非空约束，用于保证该字段的值不能为空，比如姓名，学号等</li>
<li>DEFAULT：默认值约束，用于保证该字段有默认值，比如性别</li>
<li>PEIMARY KEY：主键约束，用于保证该字段的值具有唯一性，并且非空，如学号，员工编号等<ul>
<li>非空+唯一，不允许重复，不允许出现空值</li>
<li>MySQL的主键名总是PRMARY，当创建主键约束时，系统默认会在所在的列和列组合上建立对应的唯一索引</li>
</ul>
</li>
<li>UNIQUE：唯一约束，用于保证该字段的值在整个表中是唯一的，可为空，比如座位号<ul>
<li>同一个表可以有多个唯一约束，多个列组合的约束</li>
<li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同</li>
<li>MySQL会给唯一约束的列上默认创建一个唯一索引</li>
</ul>
</li>
<li>CHECK：检查约束，mysql 中不支持，比如年龄，性别</li>
<li>FOREIGN KEY：外键约束，用于限制两个表的关系，在从表中添加外键约束，用于引用主表中某列的值；<ul>
<li>保证一个或两个表之间的参照完整性</li>
<li>构建于一个表的两个字段或是两个表的两个字段之间的参照关系</li>
<li>从表的外键值必须在主表中能找到或者为空</li>
<li>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据。</li>
<li>外键约束的参照列，在主表中引用的只能是主键或唯一键约束的列。</li>
<li>同一个表可以有多个外键约束。</li>
<li>FOREIGN KEY：在表级指定子表中的列</li>
<li>REFERENCES：标识在父表中的列</li>
<li>ON DELETE CASCADE：级联删除，当父表中的列被删除时，子表中相应的列也被删除</li>
<li>ON DELETE SET NULL：级联置空，子表中相应的列置空</li>
</ul>
</li>
</ul>
</li>
<li>添加约束时机：<ul>
<li>创建表时</li>
<li>修改表时</li>
</ul>
</li>
<li>添加约束分类<ul>
<li>列级约束：六大约束均支持，外键约束没有效果</li>
<li>表级约束：除非空约束和默认值约束外，其他约束均支持</li>
</ul>
</li>
<li>主键约束和唯一键约束<ul>
<li>主键：保证唯一性，不允许为空，一个表中至多一个主键，允许组合主键</li>
<li>唯一键，保证唯一性，允许为空，一个表中可以有多个唯一键，允许组合的唯一键。</li>
</ul>
</li>
<li>外键<ul>
<li>要求在从表中设置外键关系</li>
<li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，对名称没有要求</li>
<li>主表的关联类必须是一个key，一般是主键或唯一键</li>
<li>插入数据时，先插入主表，再插入从表</li>
<li>删除数据时，先删除从表，再删除主表</li>
</ul>
</li>
</ul>
<h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	字段名 字段类型 列级约束,</span><br><span class="line">	字段名 字段类型,</span><br><span class="line">	表级约束</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表级约束</p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 在各个字段的最下面</span></span><br><span class="line">【constraint 约束名】约束类型(字段名)</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code class="sql">CREATE TABLE stuinfo(
    id INT,
    stuname VARCHAR(20),
    gender CHAR(1),
    seat INT,
    age INT,
    majorid INT,
    CONSTRAINT pk PRIMARY KEY(id),#主键
    CONSTRAINT uq UNIQUE(seat),#唯一键
    CONSTRAINT ck CHECK(gender =&#39;男&#39; OR gender  = &#39;女&#39;),#检查
    CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键
);
CREATE TABLE major(
    id INT PRIMARY KEY,#主键
    majorName VARCHAR(20)
);

SHOW INDEX FROM stuinfo;
SHOW INDEX FROM major;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 添加列级约束</span><br><span class="line"></span><br><span class="line">  - 语法：直接在字段名和类型后面追加约束类型即可。</span><br><span class="line"></span><br><span class="line">  - 只支持默认约束，非空约束，主键约束，唯一约束</span><br><span class="line"></span><br><span class="line">    ```sql</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">    	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,<span class="comment">#主键</span></span><br><span class="line">    	stuName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,<span class="comment">#非空，唯一</span></span><br><span class="line">    	gender <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender=<span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender =<span class="string">&#x27;女&#x27;</span>),<span class="comment">#检查</span></span><br><span class="line">    	seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>,<span class="comment">#唯一</span></span><br><span class="line">    	age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span>  <span class="number">18</span>,<span class="comment">#默认约束</span></span><br><span class="line">    	majorId <span class="built_in">INT</span> <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>)<span class="comment">#外键，stuinfo表的majorId是major表的外键</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> major(</span><br><span class="line">    	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,<span class="comment">#主键</span></span><br><span class="line">    	majorName <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#查看stuinfo中的所有索引，包括主键、外键、唯一</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> stuinfo;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#查看major中的所有索引</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> major;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h3><ul>
<li><p>添加列级约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span> 表名  <span class="keyword">modify</span>  <span class="keyword">column</span>  字段名  字段类型 新约束；</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表级约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span> 表名  <span class="keyword">add</span>  【<span class="keyword">constraint</span> 约束名】 约束类型(字段名) 【外键的引用】</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加非空约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">	stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	seat <span class="built_in">INT</span>,</span><br><span class="line">	age <span class="built_in">INT</span>,</span><br><span class="line">	majorId <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 stuname 添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加默认约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给age字段添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> COLUNN age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加主键约束</p>
<ul>
<li><p>列级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给id字段添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给id字段添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">DESC</span> stuinfo;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>添加唯一约束</p>
<ul>
<li><p>列级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给seat字段添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>;</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表级添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给seat字段添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(seat);</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>添加外键约束</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加fk_stuinfo_major 外键约束，关联stuinfo和major表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stuinfo_major FOREIFN <span class="keyword">KEY</span>(majorId) <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h3><ul>
<li><p>删除非空约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除stuname字段上的非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除默认约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除age字段上的默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">MODIFY</span> COLUNM age <span class="built_in">INT</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除主键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 stuinfo 表的主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除seat字段上的唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> IDNEX seat;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除外键 fk_stuinfo_major</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_stuinfo_major;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>联合查询</title>
    <url>/2020/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><ol>
<li><p>union：将多条查询语句的结果合并成一个结果</p>
</li>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">UNION</span><br><span class="line">查询语句2</span><br><span class="line">UNION</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时。</p>
</li>
<li><p>使用：</p>
<ol>
<li>要求多条查询语句的查询列数是一致的。</li>
<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>
<li>union 关键字默认去重，如果使用 union all 可以包含重复项</li>
</ol>
</li>
</ol>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询部门编号&gt;90或邮箱包含a的员工信息</span></span><br><span class="line"></span><br><span class="line">方式1，or</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id&gt;<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">方式2，union</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees  <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees  <span class="keyword">WHERE</span> department_id&gt;<span class="number">90</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询中国用户中男性的信息以及外国用户中男性的用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,cname <span class="keyword">FROM</span> t_ca <span class="keyword">WHERE</span> csex=<span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tname <span class="keyword">FROM</span> t_ua <span class="keyword">WHERE</span> tGender=<span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>视图</title>
    <url>/2020/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li>一种虚拟表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的</li>
<li>只保存了sql逻辑，不保存查询结果。</li>
<li>应用场景<ul>
<li>多个地方用到同样的查询结果</li>
<li>该查询结果使用的 sql 语句较复杂</li>
</ul>
</li>
<li>好处<ul>
<li>重用 sql 语句</li>
<li>简化复杂的 sql 操作，不必知道它的查询细节</li>
<li>保护数据，提高安全性</li>
</ul>
</li>
</ul>
<h3 id="视图和表"><a href="#视图和表" class="headerlink" title="视图和表"></a>视图和表</h3><blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建语法的关键字</th>
<th align="center">是否实际占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center">CREATE VIEW</td>
<td align="center">不占用，只是保存了sql逻辑</td>
<td align="center">可以进行增删改查，但一般只用做查询</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center">CREATE TABLE</td>
<td align="center">占用，保存数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><ul>
<li><p>语法：create view 视图名 as 查询语句；</p>
</li>
<li><pre><code class="sql"># 查询姓张的学生名和专业名

#普通查询语句
SELECT stuname,majorname
FROM stuinfo S
INNER JOIN major M ON S.`majorid`= M.`id`
WHERE S.`stuname` LIKE &#39;张%&#39;;

#创建查询视图
CREATE VIEW v1
AS
SELECT stuname,majorname
FROM stuinfo S
INNER JOIN major M ON S.`majorid`= M.`id`;

#使用视图查询
SELECT * FROM v1 WHERE stuname LIKE &#39;张%&#39;;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment"># 查询姓名中包含a字符的员工名、部门名和工种名</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#①第一步：创建视图</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v2</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> last_name,department_name,job_title</span><br><span class="line">  <span class="keyword">FROM</span> employees E</span><br><span class="line">  <span class="keyword">JOIN</span> departments D <span class="keyword">ON</span> E.department_id  = D.department_id</span><br><span class="line">  <span class="keyword">JOIN</span> jobs J <span class="keyword">ON</span> J.job_id  = E.job_id;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#②第二步：使用视图查询</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v2 <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><ul>
<li><p>方式1</p>
<ul>
<li><pre><code class="sql">CREATE OR REPLACE VIEW 视图名
AS
查询语句
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment">#修改v3视图信息</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v3</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),job_id</span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3 </span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>方式2</p>
<ul>
<li><pre><code class="sql">ALTER VIEW 视图名
AS 
查询语句;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment"># 修改v3视图信息</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> v3</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><ul>
<li><p>用户可以一次删除一个或多个视图，前提是必须有该视图的 drop 权限</p>
</li>
<li><p>语法：drop VIEW 视图名1，视图名2，……..；</p>
</li>
<li><pre><code class="sql"># 删除视图v2和v3
DROP VIEW v2,v3;
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 查看视图</span></span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  <span class="comment"># 查看视图v3的信息</span></span><br><span class="line">  </span><br><span class="line">  DESC v3;</span><br><span class="line">  或</span><br><span class="line">  <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v3;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h3><ol>
<li><p>插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v1 <span class="keyword">VALUES</span>(<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;zf@qq.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="keyword">UPDATE</span> v1 <span class="keyword">SET</span> last_name = <span class="string">&#x27;张三&#x27;</span> <span class="keyword">WHERE</span> last_name=<span class="string">&#x27;张飞&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> v1 <span class="keyword">WHERE</span> last_name = <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具备以下特点的视图不允许更新</p>
<ol>
<li><p>包含 分组函数、distanct、group by，having，union或 union all 关键字的 sql 语句</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#包含分组函数的和group by的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) 最高工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> v1 <span class="keyword">SET</span> 最高工资=<span class="number">9000</span> <span class="keyword">WHERE</span> department_id=<span class="number">10</span>; </span><br><span class="line"><span class="comment">#The target table v2 of the UPDATE is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>常量视图不允许更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;john&#x27;</span> <span class="keyword">NAME</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> v2 <span class="keyword">SET</span> <span class="keyword">NAME</span>=<span class="string">&#x27;lucy&#x27;</span>; </span><br><span class="line"><span class="comment">#The target table v2 of the UPDATE is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>select 中包含子查询的视图不允许更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> employees) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3;</span><br><span class="line"><span class="keyword">UPDATE</span> v3 <span class="keyword">SET</span> 最高工资=<span class="number">100000</span>; </span><br><span class="line"><span class="comment">#Column &#x27;最高工资&#x27; is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>使用 join 连接的视图不允许更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v4</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees E</span><br><span class="line"><span class="keyword">JOIN</span> departments D</span><br><span class="line"><span class="keyword">ON</span> E.department_id  = D.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v4 <span class="keyword">VALUES</span>(<span class="string">&#x27;陈真&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>);</span><br><span class="line"><span class="comment">#Can not insert into join view &#x27;myemployees.v4&#x27; without fields list</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>from 一个不能更新的视图的视图不能更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v5</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v3;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> v5 <span class="keyword">SET</span> 最高工资=<span class="number">10000</span> <span class="keyword">WHERE</span> department_id=<span class="number">60</span>;</span><br><span class="line"><span class="comment">#Column &#x27;最高工资&#x27; is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>where 子句的子查询引用了from 子句中的表的视图不能更新</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v6</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span>  manager_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v6;</span><br><span class="line"><span class="keyword">UPDATE</span> v6 <span class="keyword">SET</span> salary=<span class="number">10000</span> <span class="keyword">WHERE</span> last_name = <span class="string">&#x27;k_ing&#x27;</span>; </span><br><span class="line"><span class="comment">#The target table v6 of the UPDATE is not updatable</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象一</title>
    <url>/2020/11/30/java/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%80/</url>
    <content><![CDATA[<h3 id="面向过程-POP-与面向对象-OOP"><a href="#面向过程-POP-与面向对象-OOP" class="headerlink" title="面向过程(POP)与面向对象(OOP)"></a>面向过程(POP)与面向对象(OOP)</h3><ol>
<li>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。</li>
<li>面向对象：将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</li>
<li>面向三大特征：<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
</ol>
<h3 id="Java基本元素：类和对象"><a href="#Java基本元素：类和对象" class="headerlink" title="Java基本元素：类和对象"></a>Java基本元素：类和对象</h3><ol>
<li><p>类和对象是面向对象的核心概念</p>
</li>
<li><p>类是对一类事物的描述，是抽象的、概念上的定义</p>
</li>
<li><p>对象是实际存在的该类事物的每个个体，因而也称为实例</p>
</li>
<li><p>万物皆对象</p>
</li>
<li><p>面向对象程序设计的重点是类的设计</p>
</li>
<li><p>类的成员：属性和行为，属性对应类中的成员变量，行为对应类中的成员方法</p>
</li>
<li><p>类点语法格式：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">修饰符	<span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	属性声明；</span><br><span class="line">	方法声明；</span><br><span class="line">&#125;</span><br><span class="line">修饰符是<span class="keyword">public</span>时，类可以被任意访问</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h3><ol>
<li>java类的实例化，即创建类的对象</li>
<li>创建对象语法：类名  对象名 = new 类名()</li>
<li>使用 ”对象名.对象成员” 的方式访问对象成员（属性和方法）</li>
<li>类的访问机制：<ul>
<li>在一个类中的访问机制：类中的方法可以直接访问类中的成员变量，例如，static 方法访问非 static ，编译不通过</li>
<li>在不同类中的访问机制：先创建要访问类的对象，再用对象访问类中定义的成员</li>
</ul>
</li>
<li>内存解析：<ul>
<li>堆（Heap）：存放对象实例，几乎所有的对象实例都在这里分配内存。Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</li>
<li>栈：通常所说的栈，是指虚拟机栈，用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型、对象引用 (reference类型，不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</li>
<li>方法区：用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。</li>
</ul>
</li>
<li>匿名对象：<ul>
<li>不定义对象的句柄，而直接调用这个对象的方法，这样的对象叫做匿名对象。如：new Person().shout()</li>
<li>使用情况：<ul>
<li>如果对一个对象只需要进行一次方法调用，可以使用匿名对象</li>
<li>经常将匿名对象作为实参传递给一个方法使用</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="类的成员之一：属性"><a href="#类的成员之一：属性" class="headerlink" title="类的成员之一：属性"></a>类的成员之一：属性</h3><ol>
<li><p>语法格式：修饰符    数据类型    属性名=初始化值</p>
<p>修饰符：常用的修饰符有 private、缺省、protected、public；其他修饰符：static、final</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//声明private变量 age</span></span><br><span class="line">	<span class="keyword">public</span> String name=<span class="string">&quot;lili&quot;</span>; <span class="comment">//声明public变量 name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量的分类：成员变量与局部变量</p>
<ul>
<li><p>成员变量：在方法体外，类体内声明的变量。包括实例变量(不以static修饰的）和类变量(以static修饰的)</p>
</li>
<li><p>局部变量：在方法体内部声明的变量。包括 形参（方法、构造器中定义的变量）、方法局部变量（在方法内定义）、代码块局部变量（在代码块内定义）</p>
</li>
<li><p>二者在初始化方面的异同：都有生命周期（同）；局部变量除形参外，均需显式初始化</p>
</li>
<li><p>二者区别：</p>
<table>
<thead>
<tr>
<th></th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody><tr>
<td>声明的位置</td>
<td>直接声明在类中</td>
<td>方法形参或内部、代码块内、构造器内等</td>
</tr>
<tr>
<td>修饰符</td>
<td>private、public、static、final等</td>
<td>不能用权限修饰符修饰，可以用final修饰</td>
</tr>
<tr>
<td>初始化值</td>
<td>有默认初始化值</td>
<td>没有默认初始化值，必须显示赋值，方可使用</td>
</tr>
<tr>
<td>内存加载位置</td>
<td>堆空间或静态域内</td>
<td>栈空间</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>对象属性的默认初始化赋值：</p>
<p>​        当一个对象被创建时，会对其中各种类型的<strong>成员变量</strong>自动进行初始化赋值。</p>
<table>
<thead>
<tr>
<th>成员变量类型</th>
<th>初始值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0F</td>
</tr>
<tr>
<td>double</td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>0 或写为 ‘\u0000’</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>引用类型</td>
<td>null</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="类的成员之二：方法"><a href="#类的成员之二：方法" class="headerlink" title="类的成员之二：方法"></a>类的成员之二：方法</h3><ol>
<li><p>方法是类或对象行为特征的抽象，用来完成某个功能操作，在某些语言中也称为函数或过程</p>
</li>
<li><p>将功能封装为方法的目的是：可以实现代码重用，简化代码</p>
</li>
<li><p>Java中的方法不能独立存在，所有的方法必须定义在类里。</p>
</li>
<li><p>方法的声明格式：</p>
<blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">修饰符	 返回值类型	方法名（参数类型<span class="number">1</span> 形参<span class="number">1</span>，参数类型<span class="number">2</span> 形参<span class="number">2</span>，....）&#123;</span><br><span class="line">	方法体</span><br><span class="line">	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;  <span class="comment">//声明方法getAge()</span></span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;  <span class="comment">//声明方法setAge()</span></span><br><span class="line">		age=i;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>方法的调用</p>
<ul>
<li>方法被调用一次，就会执行一次</li>
<li>没有具体返回值，返回值类型用关键字 void表示，方法体中可以不使用return语句，如果使用，仅用来结束方法</li>
</ul>
</li>
<li><p>方法的重载：</p>
<ul>
<li><p>重载：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。调用时，根据方法参数列表的不同来区别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回两个整数的和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x+y &#125;</span><br><span class="line"><span class="comment">//返回三个整数的和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123; <span class="keyword">return</span> x+y+z&#125;</span><br><span class="line"><span class="comment">//返回两个小数的和</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>System.out.println() 方法就是典型的重载方法，其内部声明形式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">byte</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">short</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span></span></span><br><span class="line"><span class="function">....</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>可变个数的形参</p>
<ul>
<li><p>可变参数：方法参数部分指定类型的参数个数是可变的，0个，1个或多个</p>
</li>
<li><p>JavaSE 5.0中提供了Varargs 机制，允许直接定义能和多个实参相匹配的形参，从而可以用一种更简单的方式传递个数可变的实参</p>
</li>
<li><p>JDK 5.0之前，采用数组形参来定义方法，传入多个同一类型变量：public static void test(int a，String[] books)</p>
</li>
<li><p>JDK 5.0：采用可变个数形参来定义方法，传入多个同一类型变量：public static void test(int a，String…..books)</p>
</li>
<li><p>声明格式：方法名（参数的类型名 ….参数名)</p>
</li>
<li><p>方法的参数部分有可变形参，需要放在形参声明的最后</p>
</li>
<li><p>在一个方法的形参位置，最多只能声明一个可变个数形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;含字符串数组参数的test方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(String book)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;与可变形参方法构成重载的test1方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(String...books)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;形参长度可变的test1方法&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	TestOverLoad to = <span class="keyword">new</span> TestOverLoad();</span><br><span class="line">	to.test1(); <span class="comment">//System.out.println(&quot;形参长度可变的test1方法&quot;)</span></span><br><span class="line">	to.test1(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>); <span class="comment">//System.out.println(&quot;形参长度可变的test1方法&quot;)</span></span><br><span class="line">	to.test(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;aa&quot;</span>&#125;); 	System.out.println(<span class="string">&quot;含字符串数组参数的test方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>方法参数的值传递机制：</p>
<ul>
<li><p>Java里方法的参数传递方式只有一种：值传递。即将实际参数值的副本传入方法内，而参数本身不受影响</p>
</li>
<li><p>形参是基本数据类型，将实参基本数据类型变量的“数据值”传递给形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">5</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;修改前，x=&quot;</span> +x); <span class="comment">// 5</span></span><br><span class="line">	change(x);</span><br><span class="line">	System.out.println(<span class="string">&quot;修改后，x=&quot;</span> +x); <span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;修改前，x=&quot;</span> +x); <span class="comment">// 5</span></span><br><span class="line">		x=<span class="number">3</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;修改后，x=&quot;</span> +x); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>形参是引用数据类型，将实参引用数据类型变量的“地址值”传递给形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>	<span class="keyword">static</span>	<span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	Person obj = <span class="keyword">new</span> Person();</span><br><span class="line">	obj.age=<span class="number">5</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;修改前，x=&quot;</span> +x); <span class="comment">// 5</span></span><br><span class="line">	change(obj);</span><br><span class="line">	System.out.println(<span class="string">&quot;修改后，x=&quot;</span> +x); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person obj)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;修改前，x=&quot;</span> +x); <span class="comment">// 5</span></span><br><span class="line">	obj.age=<span class="number">3</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;修改后，x=&quot;</span> +x); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>递归方法</p>
<ul>
<li><p>一个方法体内调用它自身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算1-100之间所有自然数的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)  retnrn <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> n+sum(n-<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<p>类的成员之三：构造器</p>
<p>关键字：this，package，import</p>
]]></content>
      <categories>
        <category>javaSE</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象二</title>
    <url>/2020/11/30/java/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="OOP特征一：封装与隐藏"><a href="#OOP特征一：封装与隐藏" class="headerlink" title="OOP特征一：封装与隐藏"></a>OOP特征一：封装与隐藏</h3><ol>
<li><p>封装：隐藏对象内部的复杂性，只对外公开简单的接口，便于外界调用，从而提高系统的可扩展性、可维护性。</p>
</li>
<li><p>Java中通过将数据声明为 private，再提供 public 方法：getXXX() 和 setXXX() 实现对成员变量的操作，以实现这些目的：</p>
<ul>
<li>隐藏一个类中不需要对外提供的实现细节，定义为 private只能在该类内部访问</li>
<li>使用者只能通过实现制定好的方法来访问数据，可以方便的加入逻辑控制，限制对属性的不合理操作</li>
<li>便于修改，增强代码的可维护性</li>
</ul>
</li>
<li><p>四种访问权限修饰符</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>类内部</th>
<th>同一个包</th>
<th>不同包的子类</th>
<th>同一个工程</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>缺省</td>
<td>yes</td>
<td>yes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody></table>
</li>
<li><p>对于class的权限修饰只有 public 和 default(缺省)。public 类可以在任意地方被访问，default 类只可以被同一个包内部的类访问。</p>
</li>
</ol>
<h3 id="OOP特征二：继承性"><a href="#OOP特征二：继承性" class="headerlink" title="OOP特征二：继承性"></a>OOP特征二：继承性</h3><p>方法的重写(override)</p>
<p>关键字：super</p>
<p>子类对象实例化过程</p>
<p>OOP特征三：多态性</p>
<p>Object类的使用</p>
<p>包装类的使用</p>
]]></content>
      <categories>
        <category>javaSE</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习I</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0I/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">你的任务是计算a</span><span class="literal">+</span><span class="comment">b。这是为了acm初学者专门设计的题目。你肯定发现还有其他题目跟这道题的标题类似，这些问题也都是专门为初学者提供的。</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">输入包含一系列的a和b对，通过空格隔开。一对a和b占一行。</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">对于输入的每对a和b，你需要依次输出a、b的和。</span></span><br><span class="line"><span class="comment">如对于输入中的第二对a和b，在输出中它们的和应该也在第二行。</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习I*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b) != EOF) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>多点测试输入类型1：While….EOF型：</li>
<li>当题目没有说明有多少数据需要读入时，就可以利用scanf的后返回值是否为EOF来判断输入是否结束</li>
<li>只要scanf的返回值不为EOF，即文件中的数据没有读完 ，就反复读入，执行while函数体的内容，当读入失败（到达文件末尾）时，结束while循环</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习III</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0III/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">你的任务是计算a</span><span class="literal">+</span><span class="comment">b。</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入中每行是一对a和b。其中会有一对是<span class="number">0</span>和<span class="number">0</span>标志着输入结束，且这一对不要计算。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">对于输入的每对a和b，你需要在相应的行输出a、b的和。</span></span><br><span class="line"><span class="comment">如第二对a和b，他们的和也输出在第二行。</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">20</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习III*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="comment">//写法一</span></span><br><span class="line">	<span class="comment">//while (scanf(&quot;%d%d&quot;, &amp;a, &amp;b) != EOF) &#123;</span></span><br><span class="line">	<span class="comment">//	if (a == 0 &amp;&amp; b == 0) break;</span></span><br><span class="line">	<span class="comment">//	printf(&quot;%d\n&quot;, a + b);</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//写法2</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b), a || b) &#123; <span class="comment">//a和b有一个不为0就进行循环</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>多点测试输入类型3：while…..break型：</li>
</ul>
<ul>
<li>题目要求当输入的数据满足某个条件时停止输入，这种类型有两种写法：</li>
<li>一种是在while….EOF的内部进行判断，当满足退出条件时break当前while循环</li>
<li>另一种是把退出条件的判断放到while语句中，令其与scanf用逗号隔开。</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习II</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0II/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">你的任务是计算a</span><span class="literal">+</span><span class="comment">b。</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">第一行是一个整数<span class="built_in">N</span>，表示后面会有<span class="built_in">N</span>行a和b，通过空格隔开。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">对于输入的每对a和b，你需要在相应的行输出a、b的和。</span></span><br><span class="line"><span class="comment">如第二对a和b，对应的和也输出在第二行。</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习II*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>多点测试输入类型2： While(T–)型：</p>
</li>
<li><p>题目会给出测试数据的组数，然后才给出相应数量组数的输入数据</p>
</li>
<li><p>使用变量T存储测试数据的组数，并在程序开始时读入，读入T后，就可以进行T次循环，每次循环解决一组数据的输入与输出</p>
</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习Ⅳ</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0IV/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的任务是计算若干整数的和。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">每行的第一个数<span class="built_in">N</span>，表示本行后面有<span class="built_in">N</span>个数。</span><br><span class="line">如果<span class="built_in">N</span>=<span class="number">0</span>时，表示输入结束，且这一行不要计算。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一行数据需要在相应的行输出和。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">0 </span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习IV*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, num;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n),n!=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (i&lt; n) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">			sum += num;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行错误代码"><a href="#运行错误代码" class="headerlink" title="运行错误代码"></a>运行错误代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习IV*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[<span class="number">0</span>]),arr[<span class="number">0</span>]!=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (i&lt;= arr[<span class="number">0</span>]) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= arr[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">			sum += arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习Ⅴ</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0V/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的任务是计算若干整数的和。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">输入的第一行是一个正数<span class="built_in">N</span>，表示后面有<span class="built_in">N</span>行。每一行的第一个数是M，表示本行后面还有M个数。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一行数据需要在相应的行输出和。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习V*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="keyword">int</span> m, num;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m) != EOF) &#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">				sum += num;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习Ⅶ</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0VII/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的任务是计算两个整数的和。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">输入包含若干行，每行输入两个整数a和b，由空格分隔。</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">对于每组输入，输出a和b的和，每行输出后接一个空行。</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习VII*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b) != EOF) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + b);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习Ⅵ</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0VI/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的任务是计算若干整数的和。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">每行的第一个数<span class="built_in">N</span>，表示本行后面有<span class="built_in">N</span>个数。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一行数据需要在相应的行输出和。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习VI*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF) &#123;</span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">			sum += num;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B 输入输出练习Ⅷ</title>
    <url>/2020/12/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/A+B%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0VIII/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的任务是计算若干整数的和。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">输入的第一行为一个整数<span class="built_in">N</span>，接下来<span class="built_in">N</span>行每行先输入一个整数M，然后在同一行内输入M个整数。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组输入，输出M个数的和，每组输出之间输出一个空行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*A+B 输入输出练习VIII*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="keyword">int</span> m, num;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">			sum += num;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言10.1</title>
    <url>/2020/12/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8010.1/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">输入a和b两个整数，按先大后小的顺序输出a和b。注意请使用指针变量的方式进行比较和输出。</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">两个用空格隔开的整数a和b。</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">按先大后小的顺序输出a和b，用空格隔开。</span></span><br><span class="line"><span class="comment">请注意行尾输出换行</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">9 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">int</span>* p1 = &amp;a, * p2 = &amp;b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, p1,p2);	</span><br><span class="line">	<span class="keyword">if</span> (*p1 &gt; *p2) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d%d&quot;</span>, *p1, *p2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, *p2, *p1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言10.10</title>
    <url>/2020/12/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8010.10/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">给定字符串定义<span class="keyword">char</span> *<span class="keyword">a</span> = “I love China!”，读入整数n，输出在进行了<span class="keyword">a</span> = <span class="keyword">a</span> + n这个赋值操作以后字符指针<span class="keyword">a</span>对应的字符串。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">一个整数n，保证<span class="number">0</span>&lt;=n&lt;<span class="number">13.</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">输出进行了题目描述中赋值操作之后a对应的字符串。</span></span><br><span class="line"><span class="comment">请注意行尾输出换行。</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">China!</span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *a =<span class="string">&quot;I love China!&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n &gt;= <span class="number">13</span> || n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, a + n); <span class="comment">//从字符数组的a+i这个位置开始打印字符串</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>在C 语言中，可以用两种方法表示和存放字符串：<ul>
<li>用字符数组存放一个字符串：char str[ ]=”I love China”;</li>
<li>用字符指针指向一个字符串：char* str=”I love China”;</li>
</ul>
</li>
<li>对于第二种表示方法，若认为str 是一个字符串变量，定义时把字符串常量”I love China”直接赋给该字符串变量是不对的，可使用const将str定义为常量。</li>
<li>C 语言对字符串常量是按字符数组处理的，在内存中开辟了一个字符数组用来存放字符串常量，程序在定义字符串指针变量str 时只是把字符数组的首地址赋给str。</li>
<li>两种表示方式的字符串输出都用 printf(“%s\n”,str);    </li>
<li>%s 表示输出一个字符串，给出字符指针变量名str（对于第一种表示方法，字符数组名即是字符数组的首地址，与第二种中的指针意义是一致的），则系统先输出它所指向的一个字符数据，然后自动使str 自动加1，使之指向下一个字符…，如此，直到遇到字符串结束标识符” \0 “。</li>
<li>参考：<a href="https://zhuanlan.zhihu.com/p/84572790">https://zhuanlan.zhihu.com/p/84572790</a></li>
</ol>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言10.15</title>
    <url>/2020/12/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8010.15/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入<span class="number">3</span>个字符串，按从小到大的顺序输出。要求使用指针的方法进行处理。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>行，每行一个用字符串。保证每个字符串的长度不超过<span class="number">20</span>。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">按从小到大的顺序输出这<span class="number">3</span>个字符串，每个字符串一行。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">China</span><br><span class="line">CLOCK</span><br><span class="line">deal</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CLOCK</span></span><br><span class="line"><span class="attribute">China</span></span><br><span class="line"><span class="attribute">deal</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">minString</span><span class="params">(<span class="keyword">char</span>* p1, <span class="keyword">char</span>* p2, <span class="keyword">char</span>* p3)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* min_1 = <span class="built_in">strcmp</span>(p1, p2)&lt;<span class="number">0</span> ? p1 : p2;</span><br><span class="line">	<span class="keyword">char</span>* min = <span class="built_in">strcmp</span>(min_1, p3)&lt;<span class="number">0</span> ? min_1 : p3;</span><br><span class="line">	<span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str1[<span class="number">20</span>],str2[<span class="number">20</span>],str3[<span class="number">20</span>];</span><br><span class="line">	gets_s(str1);</span><br><span class="line">	gets_s(str2);</span><br><span class="line">	gets_s(str3);</span><br><span class="line">	<span class="keyword">char</span>* p1 = str1, * p2 = str2, * p3 = str3;</span><br><span class="line">	<span class="keyword">if</span> (minString(str1, str2, str3) == str1) &#123; <span class="comment">//str1最小</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(str2, str3)&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str1, str2, str3);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str1, str3, str2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (minString(str1, str2, str3) == str2) &#123; <span class="comment">//str2最小</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str3)&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str2, str1, str3);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str2, str3, str1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="comment">//str3最小</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2)&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str3, str1, str2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str3, str2, str1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>注意strcmp(s1,s2),当str1&lt;str2时，strcmp(s1,s2)也为真</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言10.16</title>
    <url>/2020/12/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8010.16/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入<span class="number">10</span>个整数，将其中最小的数与第一个数对换，把最大的数与最后一个数对换。要求用<span class="number">3</span>个函数实现，分别为输入<span class="number">10</span>个数、进行处理、输出<span class="number">10</span>个数。要求使用指针的方法进行处理。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">用空格隔开的<span class="number">10</span>个整数。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输出进行题目描述操作之后的<span class="number">10</span>个整数，每个整数之后输出一个空格。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">9</span> <span class="number">0</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> </span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap:使用指针交换两个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* p1, <span class="keyword">int</span>* p2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回最小的数的地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">Min</span><span class="params">(<span class="keyword">int</span>* p, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* min = p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span>* k=p; k &lt; p + len;k++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (*k &lt; *min) &#123;</span><br><span class="line">			min = k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回最大的数的地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">Max</span><span class="params">(<span class="keyword">int</span>* p, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* max = p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span>* k=p; k &lt; p + len; k++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (*k &gt; *max) &#123;</span><br><span class="line">			max = k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span>* min = Min(a, <span class="number">10</span>); <span class="comment">//函数名称不要使用min</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span>* max = Max(a, <span class="number">10</span>);</span><br><span class="line">	<span class="comment">/*printf(&quot;%d %d\n&quot;, *min,*max);*/</span></span><br><span class="line">	swap(min, a);</span><br><span class="line">	swap(max, a + <span class="number">9</span>);</span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li><p>执行 int* min = Min(a, 10); 和 int* max = Max(a, 10);，若函数返回值用min 和 max接收，函数名称不要也定义成 min和 max，即不要写成 int* min = min(a,10) 和 int* max=max(a,10) ，否则造成错误：C++ 明显调用的表达式前的括号必须具有(指针)函数类型</p>
</li>
<li><p>这个错误半天没理解什么意思，把函数名称 min 和 max 修改为 Min和Max，果然不报红了。    </p>
</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言10.2</title>
    <url>/2020/12/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8010.2/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">输入a、b、c三个整数，按先大后小的顺序输出a、b和c。注意请使用指针变量的方式进行比较和输出。</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">三个用空格隔开的整数a、b和c。</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">按先大后小的顺序输出a、b和c，用空格隔开。</span></span><br><span class="line"><span class="comment">请注意行尾输出换行。</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">9 </span><span class="number">0</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">9</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//三个数比较，寻找其中最大的数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span>* p1, <span class="keyword">int</span>* p2,<span class="keyword">int</span>* p3)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> max_1 = *p1 &gt; * p2 ? *p1 : *p2;</span><br><span class="line">	<span class="keyword">int</span> max = max_1 &gt; * p3 ? max_1 : *p3;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, c;</span><br><span class="line">	<span class="keyword">int</span>* p1 = &amp;a, * p2 = &amp;b, * p3 = &amp;c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, p1, p2, p3);</span><br><span class="line">	<span class="keyword">if</span> (Max(p1, p2, p3) == *p1) &#123; <span class="comment">//a最大</span></span><br><span class="line">		<span class="keyword">if</span> (*p2 &gt; * p3) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, *p1, *p2, *p3);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, *p1, *p3, *p2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (Max(p1, p2, p3) == *p2) &#123; <span class="comment">//b最大</span></span><br><span class="line">		<span class="keyword">if</span> (*p1 &gt; * p3) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, *p2, *p1, *p3);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, *p2, *p3, *p1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="comment">//c最大</span></span><br><span class="line">		<span class="keyword">if</span> (*p1 &gt; * p2) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, *p3, *p1, *p2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, *p3, *p2, *p1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言11.1</title>
    <url>/2020/12/08/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8011.1/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">完成一个对候选人得票的统计程序。假设有<span class="number">3</span>个候选人，名字分别为Li，Zhang和Fun。使用结构体存储每一个候选人的名字和得票数。记录每一张选票的得票人名，输出每个候选人最终的得票数。结构体可以定义成如下的格式：</span><br><span class="line">struct person &#123;</span><br><span class="line">    char name[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">int</span> count;</span><br><span class="line">&#125;leader[<span class="number">3</span>] = &#123;“Li”, <span class="number">0</span>, “Zhang”, <span class="number">0</span>, “Fun”, <span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">第一行有一个整数<span class="built_in">n</span>，表示以下有<span class="built_in">n</span>张选票信息将会输入。保证<span class="built_in">n</span>不大于<span class="number">100</span>。</span><br><span class="line">以后的<span class="built_in">n</span>行中，每一行包含一个人名，为选票的得票人。保证每一个人名都是Li，Zhang和Fun中的某一个。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">有三行，分别为<span class="keyword">Li</span>，Zhang和Fun每人的得票数。格式为首先输出人名，其后输出一个冒号，最后输出候选人的得票数。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line"><span class="keyword">Li</span></span><br><span class="line"><span class="keyword">Li</span></span><br><span class="line">Fun</span><br><span class="line">Zhang</span><br><span class="line">Zhang</span><br><span class="line">Fun</span><br><span class="line"><span class="keyword">Li</span></span><br><span class="line">Fun</span><br><span class="line">Zhang</span><br><span class="line"><span class="keyword">Li</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Li:<span class="number">4</span></span><br><span class="line">Zhang:<span class="number">3</span></span><br><span class="line">Fun:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C语言11.1*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> count; <span class="comment">//得票数</span></span><br><span class="line">&#125;leader[<span class="number">3</span>] = &#123;<span class="string">&quot;Li&quot;</span>,<span class="number">0</span>,<span class="string">&quot;Zhang&quot;</span>,<span class="number">0</span>,<span class="string">&quot;Fun&quot;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">char</span> tempName[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempName);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(tempName,leader[j].name)==<span class="number">0</span>) &#123; <span class="comment">//注意字符串比较使用strcmp函数，不是==</span></span><br><span class="line">				leader[j].count++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>, leader[i].name, leader[i].count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言11.2</title>
    <url>/2020/12/08/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8011.2/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">定义一个结构体student，存储学生的学号、名字、性别和年龄，读入每个学生的所有信息，保存在结构体中，并输出。结构体student的定义如下：</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line">本题要求使用指向结构体数组的指针进行输入和输出。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">第一行有一个整数<span class="built_in">n</span>，表示以下有<span class="built_in">n</span>个学生的信息将会输入。保证<span class="built_in">n</span>不大于<span class="number">20</span>。</span><br><span class="line">以后的<span class="built_in">n</span>行中，每一行包含对应学生的学号、名字、性别和年龄，用空格隔开。保证每一个人名都不包含空格且长度不超过<span class="number">15</span>，性别用M和F两个字符来表示。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">有<span class="built_in">n</span>行，每行输出一个学生的学号、名字、性别和年龄，用空格隔开。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">10101 </span>LiLin M <span class="number">18</span></span><br><span class="line"><span class="symbol">10102 </span>ZhangFun M <span class="number">19</span></span><br><span class="line"><span class="symbol">10104 </span>WangMin F <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10101 </span>LiLin M <span class="number">18</span></span><br><span class="line"><span class="symbol">10102 </span>ZhangFun M <span class="number">19</span></span><br><span class="line"><span class="symbol">10104 </span>WangMin F <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C语言11.2	*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">char</span> sex;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	student stus[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (student* p = stus; p &lt; stus + n;p++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%s %c%d&quot;</span>, &amp;(p-&gt;num),&amp;(p-&gt;name),&amp;(p-&gt;sex),&amp;(p-&gt;age)); <span class="comment">//注意输入字符时，需要空格</span></span><br><span class="line">		<span class="comment">//printf(&quot;%d %s %c %d\n&quot;, p-&gt;num, p-&gt;name, p-&gt;sex, p-&gt;age);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">for</span> (student* q =stus ; q &lt; stus+n; q++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %d\n&quot;</span>,q-&gt;num,q-&gt;name,q-&gt;sex,q-&gt;age);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言11.4</title>
    <url>/2020/12/08/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8011.4/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">设有若干个人员的数据，其中包含学生和教师。学生的数据中包括：号码、姓名、性别、职业、班级。教师的数据包括：号码、姓名、性别、职业、职务。可以看出，学生和教师所包含的数据是不同的。现在要求把这些数据放在同一个表格中储存，使用结构体中的共用体实现。结构体定义如下：</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    int num;</span><br><span class="line">    char name[<span class="number">10</span>];</span><br><span class="line">    char sex;</span><br><span class="line">    char job;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        int <span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">        char position[<span class="number">10</span>];</span><br><span class="line">    &#125;category;</span><br><span class="line">&#125;;</span><br><span class="line">在以上的结构体中，如果job项为s（学生），则第<span class="number">5</span>项为<span class="class"><span class="keyword">class</span>（班级）；如果<span class="title">job</span>项是<span class="title">t</span>（教师），则第5项为<span class="title">position</span>（职务）。</span></span><br><span class="line">输入几个人员的数据，将其保存在以上包含共用体的结构体数组中，并输出。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">第一行有一个整数n，表示以下n行分别表示n个人员的数据。保证n不超过<span class="number">100</span>。</span><br><span class="line">之后的n行，每行有<span class="number">5</span>项用空格隔开的内容。前<span class="number">4</span>项分别为人员的号码（整数）、姓名（长度不超过<span class="number">9</span>的无空格字符串）、性别（字符，m或f）和职业（字符，s或t）。如果第<span class="number">4</span>项是s，则第<span class="number">5</span>项为一个整数，表示班级；如果第<span class="number">4</span>项是t，则第<span class="number">5</span>项为一个长度不超过<span class="number">9</span>的无空格字符串，表示职务。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">共有<span class="built_in">n</span>行，与输入格式相同，输出读入的所有内容。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">101 </span>Li f s <span class="number">501</span></span><br><span class="line"><span class="symbol">102 </span>Wang m t prof</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">101 </span>Li f s <span class="number">501</span></span><br><span class="line"><span class="symbol">102 </span>Wang m t prof</span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C语言11.4*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">char</span> sex;</span><br><span class="line">	<span class="keyword">char</span> job; <span class="comment">//s或t</span></span><br><span class="line">	<span class="keyword">union</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> clazz;<span class="comment">//班级</span></span><br><span class="line">		<span class="keyword">char</span> position[<span class="number">10</span>];<span class="comment">//职务</span></span><br><span class="line">	&#125;category;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	person arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%s %c %c&quot;</span>, &amp;(arr[i].num), &amp;(arr[i].name), &amp;(arr[i].sex), &amp;(arr[i].job));</span><br><span class="line">		<span class="keyword">if</span> (arr[i].job == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;(arr[i].category.clazz));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (arr[i].job == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(arr[i].category.position));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;(arr[i].job));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i].job == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %c %d\n&quot;</span>, arr[i].num, arr[i].name, arr[i].sex, arr[i].job, arr[i].category.clazz);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %c %s\n&quot;</span>, arr[i].num, arr[i].name, arr[i].sex, arr[i].job, arr[i].category.position);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言11.7</title>
    <url>/2020/12/08/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8011.7/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">编写两个函数input和print，分别用来输入<span class="number">5</span>个学生的数据记录和打印这<span class="number">5</span>个学生的记录。对于每一个学生，其记录包含了学号、名字、<span class="number">3</span>门课程的成绩共<span class="number">5</span>项。用主函数分别调用input和print函数进行输入和输出。</span><br><span class="line">要求使用结构体数组实现，结构体中包括了每个学生的<span class="number">5</span>项记录。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">共有<span class="number">5</span>行，每行包含了一个学生的学号（整数）、名字（长度不超过<span class="number">19</span>的无空格字符串）和<span class="number">3</span>门课程的成绩（<span class="number">0</span>至<span class="number">100</span>之间的整数），用空格隔开。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与输入格式相同，每行输出一个学生的所有记录。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">101 </span>AAA <span class="number">80</span> <span class="number">81</span> <span class="number">82</span></span><br><span class="line"><span class="symbol">102 </span>BBB <span class="number">83</span> <span class="number">84</span> <span class="number">85</span></span><br><span class="line"><span class="symbol">103 </span>CCC <span class="number">86</span> <span class="number">87</span> <span class="number">88</span></span><br><span class="line"><span class="symbol">104 </span>DDD <span class="number">89</span> <span class="number">90</span> <span class="number">91</span></span><br><span class="line"><span class="symbol">105 </span>EEE <span class="number">92</span> <span class="number">93</span> <span class="number">94</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">101 </span>AAA <span class="number">80</span> <span class="number">81</span> <span class="number">82</span></span><br><span class="line"><span class="symbol">102 </span>BBB <span class="number">83</span> <span class="number">84</span> <span class="number">85</span></span><br><span class="line"><span class="symbol">103 </span>CCC <span class="number">86</span> <span class="number">87</span> <span class="number">88</span></span><br><span class="line"><span class="symbol">104 </span>DDD <span class="number">89</span> <span class="number">90</span> <span class="number">91</span></span><br><span class="line"><span class="symbol">105 </span>EEE <span class="number">92</span> <span class="number">93</span> <span class="number">94</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C语言11.7*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ID;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> grade1;</span><br><span class="line">	<span class="keyword">int</span> grade2;</span><br><span class="line">	<span class="keyword">int</span> grade3;</span><br><span class="line">&#125;student[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d%d%d&quot;</span>, &amp;(student[i].ID), &amp;(student[i].name), &amp;(student[i].grade1), &amp;(student[i].grade2), &amp;(student[i].grade3));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %s %d %d %d\n&quot;</span>, student[i].ID, student[i].name, student[i].grade1, student[i].grade2, student[i].grade3);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	input();</span><br><span class="line">	print();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言11.8</title>
    <url>/2020/12/08/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/C%E8%AF%AD%E8%A8%8011.8/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">有<span class="number">10</span>个学生，每个学生的数据包括学号、姓名、<span class="number">3</span>门课程的成绩。读入这<span class="number">10</span>个学生的数据，要求输出<span class="number">3</span>门课程的总平均成绩，以及个人平均分最高的学生的数据（包括学号、姓名、<span class="number">3</span>门课程成绩、平均分数）。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">共有<span class="number">10</span>行，每行包含了一个学生的学号（整数）、名字（长度不超过<span class="number">19</span>的无空格字符串）和<span class="number">3</span>门课程的成绩（<span class="number">0</span>至<span class="number">100</span>之间的整数），用空格隔开。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">第一行包含了<span class="number">3</span>个实数，分别表示<span class="number">3</span>门课程的总平均成绩，保留<span class="number">2</span>位小数，每个数之后输出一个空格。</span><br><span class="line">第二行输出个人平均分最高的学生的数据，与输入数据格式相同。如果有多位个人平均分最高的学生，输出按照输入顺序第一个最高分的学生数据。</span><br><span class="line">请注意行尾输出换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">101 </span>AAA <span class="number">80</span> <span class="number">81</span> <span class="number">82</span></span><br><span class="line"><span class="symbol">102 </span>BBB <span class="number">83</span> <span class="number">84</span> <span class="number">85</span></span><br><span class="line"><span class="symbol">103 </span>CCC <span class="number">86</span> <span class="number">87</span> <span class="number">88</span></span><br><span class="line"><span class="symbol">104 </span>DDD <span class="number">89</span> <span class="number">90</span> <span class="number">91</span></span><br><span class="line"><span class="symbol">105 </span>EEE <span class="number">92</span> <span class="number">93</span> <span class="number">94</span></span><br><span class="line"><span class="symbol">106 </span>FFF <span class="number">80</span> <span class="number">90</span> <span class="number">100</span></span><br><span class="line"><span class="symbol">107 </span>GGG <span class="number">85</span> <span class="number">90</span> <span class="number">95</span></span><br><span class="line"><span class="symbol">108 </span>HHH <span class="number">80</span> <span class="number">85</span> <span class="number">90</span></span><br><span class="line"><span class="symbol">109 </span>III <span class="number">90</span> <span class="number">91</span> <span class="number">92</span></span><br><span class="line"><span class="symbol">110 </span>JJJ <span class="number">91</span> <span class="number">88</span> <span class="number">87</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">85.60</span> <span class="number">87.90</span> <span class="number">90.40</span> </span><br><span class="line"><span class="symbol">105 </span>EEE <span class="number">92</span> <span class="number">93</span> <span class="number">94</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C语言11.8*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ID;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> grade1;</span><br><span class="line">	<span class="keyword">int</span> grade2;</span><br><span class="line">	<span class="keyword">int</span> grade3;</span><br><span class="line">&#125;stus[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> sum1=<span class="number">0</span>, sum2=<span class="number">0</span>, sum3=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> maxID = stus[<span class="number">0</span>].ID;</span><br><span class="line">	<span class="keyword">double</span> maxAvgGrade = (stus[<span class="number">0</span>].grade1 + stus[<span class="number">0</span>].grade2 + stus[<span class="number">0</span>].grade3) / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d%d%d&quot;</span>, &amp;(stus[i].ID), &amp;(stus[i].name), &amp;(stus[i].grade1), &amp;(stus[i].grade2), &amp;(stus[i].grade3));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="comment">//第一行所需数据</span></span><br><span class="line">		sum1 += stus[i].grade1;</span><br><span class="line">		sum2 += stus[i].grade2;</span><br><span class="line">		sum3 += stus[i].grade3;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//第二行所需数据</span></span><br><span class="line">		<span class="keyword">double</span> avg = (stus[i].grade1 + stus[i].grade2 + stus[i].grade3) / <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">if</span> (maxAvgGrade &lt; avg) &#123;</span><br><span class="line">			maxAvgGrade = avg;</span><br><span class="line">			maxID = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一行输出平均成绩</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f %.2f %.2f\n&quot;</span>, sum1 / <span class="number">10</span>, sum2 / <span class="number">10</span>, sum3 / <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//第二行输出个人平均分最高学生信息</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %s %d %d %d\n&quot;</span>, stus[maxID].ID, stus[maxID].name, stus[maxID].grade1, stus[maxID].grade2, stus[maxID].grade3);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>习题6-12 解密</title>
    <url>/2020/12/03/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%986-12%20%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">有一行电文，已按如下规律译成密码：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A</span>--&gt;<span class="comment">Z</span>        <span class="comment">a</span>--&gt;<span class="comment">z</span></span><br><span class="line"><span class="comment">B</span>--&gt;<span class="comment">Y</span>        <span class="comment">b</span>--&gt;<span class="comment">y</span></span><br><span class="line"><span class="comment">C</span>--&gt;<span class="comment">X</span>        <span class="comment">c</span>--&gt;<span class="comment">x</span></span><br><span class="line"><span class="comment"></span><span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="string">.</span>          <span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="string">.</span></span><br><span class="line"><span class="comment">即第一个字母变成第26个字母，第i个字母变成第（26</span><span class="literal">-</span><span class="comment">i</span><span class="literal">+</span><span class="comment">1)个字母，非字母字符不变。要求根据密码译回原文，并输出。</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入一行密文</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解密后的原文，单独占一行</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZYX123zyx</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ABC123abc</span><br></pre></td></tr></table></figure>

<h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 习题6-12 解密*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str1[<span class="number">27</span>] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<span class="comment">//多一个\0字符</span></span><br><span class="line">	<span class="keyword">char</span> str2[<span class="number">27</span>] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> cipher[<span class="number">100</span>];<span class="comment">//保存密文</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cipher);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(cipher)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cipher[i] &gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; cipher[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">strlen</span>(str1); j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (cipher[i] == str1[j] ) &#123;</span><br><span class="line">					<span class="comment">//printf(&quot;%d %d %c %c\n&quot;, i, j, str1[j],str1[25-j]);</span></span><br><span class="line">					cipher[i] = str1[<span class="number">25</span> - j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cipher[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; cipher[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">strlen</span>(str2); j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (cipher[i] == str2[j]) &#123;</span><br><span class="line">					<span class="comment">//printf(&quot;%d %d %c %c\n&quot;, i, j, str2[j], str2[25 - j]);</span></span><br><span class="line">					cipher[i] = str2[<span class="number">25</span> - j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, cipher);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>习题6-13 字符串比较</title>
    <url>/2020/12/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%986-13%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">比较两个字符串<span class="built_in">s1</span>和<span class="built_in">s2</span>的大小，如果<span class="built_in">s1</span>&gt;<span class="built_in">s2</span>，则输出一个正数；若<span class="built_in">s1</span>=<span class="built_in">s2</span>，则输出<span class="number">0</span>；若<span class="built_in">s1</span>&lt;<span class="built_in">s2</span>，则输出一个负数。</span><br><span class="line">要求：不用strcpy函数；两个字符串用gets函数读入。</span><br><span class="line">例如：<span class="string">&quot;A&quot;</span>与<span class="string">&quot;C&quot;</span>相比，由于<span class="string">&quot;A&quot;</span>&lt;<span class="string">&quot;C&quot;</span>，应输出负数，同时由于<span class="string">&quot;A&quot;</span>与<span class="string">&quot;C&quot;</span>的ASCII码差值为<span class="number">2</span>，因此应输出<span class="string">&quot;-2&quot;</span>。</span><br><span class="line">同理：<span class="string">&quot;And&quot;</span>和<span class="string">&quot;Aid&quot;</span>比较，根据第<span class="number">2</span>个字符比较的结果，<span class="string">&quot;n&quot;</span>比<span class="string">&quot;i&quot;</span>大<span class="number">5</span>，因此应该输出<span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入<span class="number">2</span>行字符串</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个整数，表示这两个字符串 比较的差值，单独占一行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">And</span></span><br><span class="line"><span class="symbol">Aid</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> A, <span class="keyword">char</span> B)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (A == B) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> A - B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str1[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> str2[<span class="number">100</span>];</span><br><span class="line">	gets(str1); <span class="comment">//注意，在VS新标准中，应该是用gets_s代替gets</span></span><br><span class="line">	gets(str2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(str1)) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &lt; <span class="built_in">strlen</span>(str2)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cmp(str2[j], str1[i]) != <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cmp(str1[i], str2[j]));</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				i++; j++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>有序插入</title>
    <url>/2020/12/03/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%986-4%20%E6%9C%89%E5%BA%8F%E6%8F%92%E5%85%A5/</url>
    <content><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">有一个已排好序的数组，要求输入一个数后，按原来排序的规律将它插入到数组中。</span><br><span class="line"></span><br><span class="line">假设数组长度为<span class="number">10</span>，数组中前<span class="number">9</span>个数（这<span class="number">9</span>个数要求从键盘上输入，输入时要满足自小到大的输入顺序）已经按从小到大进行排序。</span><br><span class="line"></span><br><span class="line">然后再从键盘上输入一个整数，将此整数插入到前有序的<span class="number">9</span>个数中，使得最终的<span class="number">10</span>个数依然是从小到大有序的。</span><br></pre></td></tr></table></figure>

<h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">第一行输入以空格分隔的<span class="number">9</span>个整数数，要求按从小到大的顺序输入。</span><br><span class="line"></span><br><span class="line">第二行输入一个整数</span><br></pre></td></tr></table></figure>

<h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">从小到大输出这<span class="number">10</span>个数，每个数一行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">11</span> <span class="number">21</span> <span class="number">31</span> <span class="number">41</span> <span class="number">51</span> <span class="number">61</span> <span class="number">71</span> <span class="number">81</span></span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">51</span></span><br><span class="line"><span class="number">61</span></span><br><span class="line"><span class="number">71</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>

<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">定义数组时，把数组长度定义为<span class="number">10.</span></span><br></pre></td></tr></table></figure>

<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>​        首先遍历这9个数，找到待插入的这个数应该插入的位置，然后将这个位置后面的数都往后移一位，再将这个数插入到找到的这个位置上。</p>
<h3 id="错误版本1："><a href="#错误版本1：" class="headerlink" title="错误版本1："></a>错误版本1：</h3><blockquote>
<p>错误原因：当num刚好直接插入到数组的末尾时，p的值不在中间，这里理想的认为p的值一定在中间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题6-4 有序插入*/</span></span><br><span class="line"><span class="comment">/*错误版本*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> p;<span class="comment">//p保存待插入的这个数应当在数组的哪个位置</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &lt;= num &amp;&amp; num &lt;= a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">			p = i + <span class="number">1</span>;<span class="comment">//p就是这个数插入的位置</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//先将p后面的数都往后挪一位，空出一个位置来</span></span><br><span class="line">    <span class="comment">//注意把 p位置后的数都往后挪动一位时，需要从后往前遍历，如果从前往后遍历挪动，则前面的一个数被重新赋值，后面挪动的数都不再是原来序列的数。</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt;= p + <span class="number">1</span>; j--) &#123; </span><br><span class="line">		a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//空出a[p]后将num放到这个位置</span></span><br><span class="line">	a[p] = num;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印重新排序后的数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，输入的值是 1 2 3 4 5 6 7 8 9，待插入的值是10时，应当插入的位置下标应当是9，但 10这个数并不在这九个数中间，因此无法找到 p值，报错：p 未定义</p>
</blockquote>
<h3 id="AC代码1：有bug"><a href="#AC代码1：有bug" class="headerlink" title="AC代码1：有bug"></a>AC代码1：有bug</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题6-4 有序插入*/</span></span><br><span class="line"><span class="comment">/*有一个错误：待插入的数不一定在当前序列的中间插入，可能在开头或者结尾插入*/</span></span><br><span class="line"><span class="comment">/*但是，此版本在codeup上提交结果正确*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int p;//p保存待插入的这个数应当在数组的哪个位置</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &lt;= num &amp;&amp; num &lt;= a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="keyword">int</span> p = i + <span class="number">1</span>;<span class="comment">//p就是这个数插入的位置</span></span><br><span class="line">			<span class="comment">//先将p后面的数都往后挪一位，空出一个位置来</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt;= p + <span class="number">1</span>; j--) &#123; <span class="comment">//注意要从后往前遍历</span></span><br><span class="line">				a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//空出a[p]后将num放到这个位置</span></span><br><span class="line">			a[p] = num;</span><br><span class="line">			<span class="keyword">break</span>;<span class="comment">//结束了直接跳出循环</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//打印重新排序后的数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，若输入的值是 1 2 3 4 5 6 7 8 9，带插入的数是10，结果将输入</p>
<p>1 2 3 4 5 6 7 8 9 0</p>
</blockquote>
<h3 id="AC代码2：使用while循环做"><a href="#AC代码2：使用while循环做" class="headerlink" title="AC代码2：使用while循环做"></a>AC代码2：使用while循环做</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题6-4 有序插入*/</span></span><br><span class="line"><span class="comment">/*使用while循环,提交结果正确*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从后往前遍历，把当前遍历到的位置上的数往后挪，这样待插入的位置就会空出来</span></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">while</span> (a[i] &gt; num)&#123;</span><br><span class="line">		a[i+<span class="number">1</span>] = a[i];</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//退出while循环的i值是刚好小于num的值，所以i+1的位置就是num要插入的值</span></span><br><span class="line">	a[i+<span class="number">1</span>] = num;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码不论num从开头、末尾还是中间插入，都可以正常插入</p>
<p>需要注意的是 while循环不能这么写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">while</span> (a[i] &gt; num)&#123;</span><br><span class="line">	a[i] = a[i<span class="number">-1</span>];</span><br><span class="line">	i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给遍历到的这个位置赋值为前一个位置上的数，这是错误的，这样会把要插入的位置也给赋值，然后重新把num赋值到这个位置会报错。</p>
</blockquote>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>习题6-5 数组元素逆置</title>
    <url>/2020/12/03/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%986-5%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E9%80%86%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">将一个长度为<span class="number">10</span>的整型数组中的值按逆序重新存放。</span><br><span class="line">如：原来的顺序为<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>，要求改为<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">从键盘上输入以空格分隔的<span class="number">10</span>个整数。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">按相反的顺序输出这<span class="number">10</span>个数，每个数占一行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码1：通过申请另一个数组，把原数组从后往前复制到新数组中"><a href="#AC代码1：通过申请另一个数组，把原数组从后往前复制到新数组中" class="headerlink" title="AC代码1：通过申请另一个数组，把原数组从后往前复制到新数组中"></a>AC代码1：通过申请另一个数组，把原数组从后往前复制到新数组中</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题6-5 数组元素逆置*/</span></span><br><span class="line"><span class="comment">/*AC版本1：这个方式应该不是题目的原意*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">int</span> b[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		b[i] = a[<span class="number">9</span>-i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="AC代码2：在原数组中操作，把前面和后面的数交换"><a href="#AC代码2：在原数组中操作，把前面和后面的数交换" class="headerlink" title="AC代码2：在原数组中操作，把前面和后面的数交换"></a>AC代码2：在原数组中操作，把前面和后面的数交换</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题6-5 数组元素逆置*/</span></span><br><span class="line"><span class="comment">/*AC版本2，这种方式更符合题意*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = a[i];</span><br><span class="line">		a[i] = a[<span class="number">9</span> - i];</span><br><span class="line">		a[<span class="number">9</span> - i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>例题6-1 逆序输出数组元素</title>
    <url>/2020/12/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%BE%8B%E9%A2%986-1%20%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">从键盘上输入<span class="number">10</span>个整数，存储在一个长度为<span class="number">10</span>的整型数组中，要求将输入的<span class="number">10</span>个数逆序输出。</span><br><span class="line">如输入为：<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> 输出为<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>个整数，以空格分隔</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">将输入的<span class="number">10</span>个整数逆序输出，每个数占一行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-1 逆序输出数组元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>习题6-6 杨辉三角</title>
    <url>/2020/12/03/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%986-6%20%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">按要求输入如下格式的杨辉三角</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">10</span> <span class="number">10</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">最多输出<span class="number">10</span>层</span><br></pre></td></tr></table></figure>

<h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">输入只包含一个正整数<span class="built_in">n</span>，表示将要输出的杨辉三角的层数。</span><br></pre></td></tr></table></figure>

<h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对应于该输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开</span><br></pre></td></tr></table></figure>

<h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题6-6 杨辉三角*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">100</span>][<span class="number">100</span>] = &#123;&#125;;  <span class="comment">//所有数字都保存在arr数组中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++ ) &#123; <span class="comment">//共n层</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">//遍历第i层的所有位置</span></span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">1</span> || j ==i) arr[i][j] = <span class="number">1</span>;<span class="comment">//开头和结尾都是1</span></span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				arr[i][j] = arr[i - <span class="number">1</span>][j] + arr[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">01</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>例题6-2 数组求解Fibonacci数列问题</title>
    <url>/2020/12/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%BE%8B%E9%A2%986-2%20%E6%95%B0%E7%BB%84%E6%B1%82%E8%A7%A3Fibonacci%E6%95%B0%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Fibonacci数列的特点：第<span class="number">1</span>,<span class="number">2</span>个数为<span class="number">1</span>,<span class="number">1</span>。从第<span class="number">3</span>个数开始，概述是前面两个数之和。即： </span><br><span class="line">要求输出Fibonacci数列的前<span class="number">20</span>个数。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Fibonacci数列的前<span class="number">20</span>个数，每个数占一行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="number">144</span></span><br><span class="line"><span class="number">233</span></span><br><span class="line"><span class="number">377</span></span><br><span class="line"><span class="number">610</span></span><br><span class="line"><span class="number">987</span></span><br><span class="line"><span class="number">1597</span></span><br><span class="line"><span class="number">2584</span></span><br><span class="line"><span class="number">4181</span></span><br><span class="line"><span class="number">6765</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-2 数组求解Fibonacci数列问题*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">0</span> || i == <span class="number">1</span>) a[i] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>例题6-3 冒泡排序</title>
    <url>/2020/12/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%BE%8B%E9%A2%986-3%20%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">从键盘上输入<span class="number">10</span>个整数，用冒泡法对这<span class="number">10</span>个数进行排序（由小到大</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">以空格分隔的<span class="number">10</span>个整数</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">依次输出排好序的<span class="number">10</span>个整数，每个数占一行</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-3 冒泡排序*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">//10个数，9轮排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= (<span class="number">9</span> - i); j++) &#123; <span class="comment">//第i轮排序，需要比较(9-i)次</span></span><br><span class="line">			<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = a[j];</span><br><span class="line">				a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>冒泡排序是经典算法，务必掌握</li>
<li>时间复杂度是 O(n^2)，记住有两重循环，排序轮数和每轮比较的次数</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>习题7-5 字符串逆序存放</title>
    <url>/2020/12/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%987-5%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F%E5%AD%98%E6%94%BE/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><em>题目描述</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">写一个函数将一个字符串按反序存放。在主函数中输入一个字符串，通过调用该函数，得到该字符串按反序存放后的字符串，并输出</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a><em>输入</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行字符串。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><em>输出</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入字符串反序存放后的字符串。单独占一行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><em>样例输入</em></h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">abcd</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><em>样例输出</em></h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dcba</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码1"><a href="#AC代码1" class="headerlink" title="AC代码1"></a><em>AC代码1</em></h3><blockquote>
<p><em>将要操作的字符数组定义为全局变量的方式</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题7-5 字符串逆序存放*/</span></span><br><span class="line"><span class="comment">/*AC代码1*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str)/<span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">char</span> temp = str[i];</span><br><span class="line">		str[i] = str[<span class="built_in">strlen</span>(str) - <span class="number">1</span> - i];</span><br><span class="line">		str[<span class="built_in">strlen</span>(str) - <span class="number">1</span> - i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	gets_s(str);</span><br><span class="line">	fn();</span><br><span class="line">	<span class="comment">//打印字符串</span></span><br><span class="line">	<span class="built_in">puts</span>(str);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="AC代码2"><a href="#AC代码2" class="headerlink" title="AC代码2"></a><em>AC代码2</em></h3><blockquote>
<p><em>将要操作的字符数组作为参数传递的方式</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题7-5 字符串逆序存放*/</span></span><br><span class="line"><span class="comment">/*AC代码2*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">char</span> str[])</span> </span>&#123; <span class="comment">/*数组作为 参数，第一维可以不写长度*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">char</span> temp = str[i];</span><br><span class="line">		str[i] = str[<span class="built_in">strlen</span>(str) - <span class="number">1</span> - i];</span><br><span class="line">		str[<span class="built_in">strlen</span>(str) - <span class="number">1</span> - i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">	gets_s(str); <span class="comment">//数组作为参数时，函数中对数组元素的修改就等同于对原数组元素的修改</span></span><br><span class="line">	fn(str);</span><br><span class="line">	<span class="built_in">puts</span>(str);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><em>总结</em></h3><ul>
<li>全局变量定义在所有函数之前，定义在其之后的所有程序段内都会生效</li>
<li>局部变量，定义在函数内部，函数结束时局部变量销毁。注意值传递和地址传递，值传递，<u>穿进去的参数只是一个副本</u></li>
<li>将数组作为参数传递时，参数中第一维的长度可以不填，如果是二维数组，第二维需要填写长度</li>
<li>数组作为参数，函数中对数组元素的修改等同于对原数组元素的修改</li>
<li>数组不允许作为返回类型返回，想要返回数组，只有通过传参的方式。</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>例题6-4 矩阵转置</title>
    <url>/2020/12/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%BE%8B%E9%A2%986-4%20%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">将一个<span class="number">2</span>行<span class="number">3</span>列的矩阵（二维数组）行列互换，存储到另一个<span class="number">3</span>行<span class="number">2</span>列的矩阵中。</span><br><span class="line">要求以整型数据为例来解答。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入<span class="number">2</span>行数据，每行<span class="number">3</span>个整数，以空格分隔。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">行列互换后的矩阵，<span class="number">3</span>行，每行<span class="number">2</span>个数据，以空格分隔。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><blockquote>
<p>分析：</p>
<p>  (0,0)-&gt;(0,0)<br>  (0,1)-&gt;(1,0)<br>  (0,2)-&gt;(2,0)<br>  (1,0)-&gt;(0,1)<br>  (1,1)-&gt;(1,1)<br>  (1,2)-&gt;(2,1)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-4 矩阵转置*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">			b[j][i] = a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>矩阵逆置就是二维数组的 arr[i] [j] 交换</li>
</ul>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>例题6-9 字符串求最大值</title>
    <url>/2020/12/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%BE%8B%E9%A2%986-9%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">从键盘上输入<span class="number">3</span>个字符串，求出其中最大者。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入<span class="number">3</span>行，每行均为一个字符串。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行，输入三个字符串中最大者。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">England</span></span><br><span class="line"><span class="attribute">China</span></span><br><span class="line"><span class="attribute">America</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">England</span></span><br></pre></td></tr></table></figure>

<h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-9 字符串求最大值*/</span></span><br><span class="line"><span class="comment">/*答案错误*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxString</span><span class="params">(<span class="keyword">char</span> str1[], <span class="keyword">char</span> str2[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(str1)) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &lt; <span class="built_in">strlen</span>(str2)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (str2[j] &lt; str1[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (str2[j] &lt; str1[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				i++;j++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str1[<span class="number">100</span>], str2[<span class="number">100</span>], str3[<span class="number">100</span>];</span><br><span class="line">	gets_s(str1);</span><br><span class="line">	gets_s(str2);</span><br><span class="line">	gets_s(str3);</span><br><span class="line">	<span class="keyword">int</span> max1_2_3;</span><br><span class="line">	<span class="keyword">int</span> max1_2 = maxString(str1, str2);</span><br><span class="line">	<span class="keyword">if</span> (max1_2 == <span class="number">1</span> || max1_2==<span class="number">0</span>) &#123; <span class="comment">//str1大或str1和str2一样大</span></span><br><span class="line">		max1_2_3 = maxString(str1, str3);</span><br><span class="line">		<span class="keyword">if</span> (max1_2_3 == <span class="number">1</span> || max1_2_3 == <span class="number">0</span>) &#123; <span class="comment">//str1大或str1和str3一样大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="comment">//str3大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str3);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="comment">//str2大</span></span><br><span class="line">		max1_2_3 = maxString(str2, str3);</span><br><span class="line">		<span class="keyword">if</span> (max1_2_3 == <span class="number">1</span> || max1_2_3 == <span class="number">0</span>) &#123; <span class="comment">//str2大或str1和str3一样大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="comment">//str3大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str3);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>样例的输入输出可以正常实现，但是依然答案错误</p>
<p>错误原因猜测是maxString()函数判断较大值出错了，在最后一个else后，没有考虑两个字符串完全相等的情况</p>
</blockquote>
<h3 id="AC代码1"><a href="#AC代码1" class="headerlink" title="AC代码1"></a>AC代码1</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-9 字符串求最大值*/</span></span><br><span class="line"><span class="comment">/*AC代码1*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str1[<span class="number">100</span>], str2[<span class="number">100</span>], str3[<span class="number">100</span>];</span><br><span class="line">	gets_s(str1);</span><br><span class="line">	gets_s(str2);</span><br><span class="line">	gets_s(str3);</span><br><span class="line">	<span class="keyword">int</span> max1_2_3;</span><br><span class="line">	<span class="keyword">int</span> max1_2 = <span class="built_in">strcmp</span>(str1, str2);</span><br><span class="line">	<span class="keyword">if</span> (max1_2 &gt;= <span class="number">0</span>) &#123; <span class="comment">//str1大或str1和str2一样大</span></span><br><span class="line">		max1_2_3 = <span class="built_in">strcmp</span>(str1, str3);</span><br><span class="line">		<span class="keyword">if</span> (max1_2_3 &gt;= <span class="number">0</span>) &#123; <span class="comment">//str1最大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="comment">//str3最大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str3);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123; <span class="comment">//str2大</span></span><br><span class="line">		max1_2_3 = <span class="built_in">strcmp</span>(str2, str3);</span><br><span class="line">		<span class="keyword">if</span> (max1_2_3 &gt;= <span class="number">0</span>) &#123; <span class="comment">//str2最大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="comment">//str3最大</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str3);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接使用字符串比较函数，strcmp() ，更加简便，但是 if…else 过多了，下面有简介的方式</p>
</blockquote>
<h3 id="AC代码2"><a href="#AC代码2" class="headerlink" title="AC代码2"></a>AC代码2</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*例题6-9 字符串求最大值*/</span></span><br><span class="line"><span class="comment">/*AC代码2*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		gets_s(str[i]); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(str[i], str[max]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			max = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[max]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用一个二维的字符数组存储输入的三个字符串，先比较前两个字符串，必有一个较大的，将较大的一个字符串与第三个字符串比较，可以得到三个字符串中最大的字符串。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>字符串常用函数：<ul>
<li>strlen()：得到字符串长度</li>
<li>strcmp(字符数组1，字符数组2)：如果字符数组1&gt;字符数组2，返回值大于0；字符数组1&lt;字符数组2，返回值小于0；字符数组1=字符数组2，返回值等于0</li>
<li>strcpy(字符数组1，字符数组2)：把字符数组2复制给字符数组1</li>
<li>strcat(字符数组1，字符数组2)：把字符数组2接到字符数组1后面</li>
</ul>
</li>
<li>字符串数组可以使用二维的字符数组存储。</li>
</ol>
]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>习题7-7 复制字符串中的元音字母</title>
    <url>/2020/12/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B2.5%E5%B0%8F%E8%8A%82%E2%80%94%E2%80%94CC++%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E6%95%B0%E7%BB%84/%E4%B9%A0%E9%A2%987-7%20%E5%A4%8D%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">写一个函数，将一个字符串中的元音字母复制到另一个字符串中。在主函数中输入一个字符串，通过调用该函数，得到一个有该字符串中的元音字母组成的一个字符串，并输出。</span><br></pre></td></tr></table></figure>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个字符串（一行字符）。</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该字符串所有元音字母构成的字符串。行尾换行。</span><br></pre></td></tr></table></figure>

<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CLanguage</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">auae</span></span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*习题7-7 复制字符串中的元音字母*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vowels</span><span class="params">(<span class="keyword">char</span> s1[], <span class="keyword">char</span> s2[])</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> allYuan[<span class="number">10</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;U&#x27;</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s1); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(allYuan); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s1[i] == allYuan[j]) &#123;</span><br><span class="line">				s2[count] = s1[i];</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> Y_str[<span class="number">100</span>] = &#123; <span class="string">&#x27;0&#x27;</span> &#125;; <span class="comment">//定义时必须初始化，暂时仅初始化第一个字符</span></span><br><span class="line">	gets_s(str);</span><br><span class="line">	vowels(str, Y_str);</span><br><span class="line">	<span class="built_in">puts</span>(Y_str);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OJ--《算法笔记》</category>
      </categories>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack/%E6%A8%A1%E5%9D%97%E5%8C%96/b/</url>
    <content><![CDATA[//1，CommonJS导入moudleA
/**
 * const moduleA=require('./a')
 * moduleA.hello() // hello world
 */

 //2,AMD方式导入
 
 //3，ES6模块化方式导入
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack/%E6%A8%A1%E5%9D%97%E5%8C%96/c/</url>
    <content><![CDATA[@import "util.css";
div{
    width:100px;
    height:100px;
}         ]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack/%E6%A8%A1%E5%9D%97%E5%8C%96/c/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./c.css">
</head>
<body>
    <div></div>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack/%E6%A8%A1%E5%9D%97%E5%8C%96/util/</url>
    <content><![CDATA[div{
    background-color: pink;
}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack/%E6%A8%A1%E5%9D%97%E5%8C%96/a/</url>
    <content><![CDATA[//1,CommonJS方式导出1
// function hello(){
//     console.log(hello,world)
// }
// module.exports={
//     hello:hello
// }

//2,CommonJS方式导出2
// exports.hello=function hello(a,b){
//     console.log("hello world")
// }


//3,AMD方式

//4，Es6模块化
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%BA%8C%E7%AB%A0/jquery%E9%80%89%E6%8B%A9%E5%99%A8%E5%AE%8C%E5%96%84%E7%9A%84%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <div>test</div>
    <div id="demo">demo</div>
    <script>
        // document.getElementById("demo").style.color="red" //ncaught TypeError: Cannot read property 'style' of null
        //$("#demo").css("color","red");
        console.log($("#demo"));
        console.log(typeof $("#demo"));
        // if($("#demo")){
        //     console.log('aaa');
        // }
        // if($("#demo").length>0){
        //     console.log("bbb");
        // }
        // if($("#demo")[0]){
        //     console.log("ccc");
        // }
    </script>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%BB%99%E6%89%80%E6%9C%89p%E5%85%83%E7%B4%A0%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <p>测试1</p>
    <p>测试2</p>
</body>
</html>
<script>
    var items=document.getElementsByTagName("p"); //items是数组对象
    for(var i=0;i<items.length;i++){
        items[i].onclick=function(){  //给每个对象添加onclick事件
            //do something
        }
    }
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E8%A1%A8%E6%A0%BC%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <table id="tb">
        <tbody>
            <tr>
                <td>第一行</td>
                <td>第一行</td>
            </tr>
            <tr>
                <td>第二行</td>
                <td>第二行</td>
            </tr>
            <tr>
                <td>第三行</td>
                <td>第三行</td>
            </tr>
            <tr>
                <td>第四行</td>
                <td>第四行</td>
            </tr>
            <tr>
                <td>第五行</td>
                <td>第五行</td>
            </tr>
            <tr>
                <td>第六行</td>
                <td>第六行</td>
            </tr>
        </tbody>
    </table>
</body>
</html>
<script>
    var tb=document.getElementById("tb"); //获取table
    var tbody=document.getElementsByTagName("tbody")[0]; //表格中第一个tbody元素
    var trs=document.getElementsByTagName('tr');//tbody下所有的tr元素
    for(var i=0;i<trs.length;i++){
        if(i%2==0){
            trs[i].style.backgroundColor="#888";
        }
    }
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E8%BE%93%E5%87%BA%E9%80%89%E4%B8%AD%E5%A4%9A%E9%80%89%E6%A1%86%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <input type="checkbox" value="1" name="check" checked>
    <input type="checkbox" value="2" name="check">
    <input type="checkbox" value="3" name="check" checked>
    <input type="button" value="选中的个数" id="btn">
</body>
</html>
<script>
    var btn=document.getElementById("btn");
    btn.onclick=function(){
        var arr=new Array();
        var items=document.getElementsByName("check");
        for(var i=0;i<items.length;i++){
            if(items[i].checked){
                arr.push(items[i].value);
            }
        }
        console.log(arr) // (2) ["1", "3"]
        console.log("选中的个数是：",arr.length) //2
    }
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/jquery%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BADOM%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%BA%8C%E7%AB%A0/jQuery%E9%80%89%E6%8B%A9%E5%99%A8%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
    <style>
        div,span,p{
            width: 140px;
            height: 140px;
            margin:5px;
            background:#aaa;
            border:#000 1px solid;
            float:left;
            font-size:17px;
            font-family: Verdana;
        }
        div.mini{
            width:55px;
            height: 55px;
            background-color: #aaa;
            font-size:12px;
        }
        div.hide{
            display: none;
        }
    </style>
</head>
<body>
    <div class="one" id="one">
        id为one,class为one的div
        <div class="mini">class为mini</div>
    </div>
    <div class="one" id="two" title="test">
        id为two,class为one，title为test的div
        <div class="mini" title="other">class为mini，title为other</div>
        <div class="mini" title="test">class为mini，title为test</div>
    </div>
    <div class="one">
        <div class="mini">class为mini</div>
        <div class="mini">class为mini</div>
        <div class="mini">class为mini</div>
        <div class="mini"></div>
    </div>
    <div class="one">
        <div class="mini">class为mini</div>
        <div class="mini">class为mini</div>
        <div class="mini">class为mini</div>
        <div class="mini" title="test">class为mini，title为test</div>
    </div>
    <div  style="display: none;">style的display为"none"的div</div>
    <div class="hide">class为hide的div</div>
    <div>
        包含input的type为"hidden"的div
        <input type="hidden" size="8">
    </div>
    <span id="mover">正在执行动画的span元素</span>
</body>
</html>
<script>
    //基本选择器

    //1,改变id为one的元素的背景色
    //$("#one").css("background","#bbffaa");

    //2,改变class为mini的所有元素的背景色
    //$(".mini").css("background","#bbffaa");

    //3,改变元素名是div的所有元素的背景色
    //$("div").css("background","#bbffaa");

    //4，改变所有元素的背景色
    //$("*").css("background","#bbffaa");

    //5，改变所有的span元素和id为two的元素的背景色
    //$("span,#two").css("background","#bbffaa");

    
    //层次选择器
    //1,改变body内所有div的背景色
    //$("body div").css("background","#bbffaa");

    //2,改变body内子div元素的背景色
    //$("body>div").css("background","#bbffaa");

    //3,改变class为one的下一个div元素背景色
    //$(".one+div").css("background","#bbffaa");
    //$(".one").next("div").css("background","#bbffaa");

    //4,改变id为two的元素后面的所有div兄弟元素的背景色
    //$("#two~div").css("background","#bbffaa");
    //$("#two").nextAll("div").css("background","#bbffaa");

   //siblings()方法
   //$("#two").siblings("div").css("background","#bbffaa");


   //过滤选择器
   //1,基本过滤选择器
    //①改变第一个div元素的背景色
    //$("div:first").css("background","#bbffaa");

    //②改变最后一个div元素的背景色
    //$("div:last").css("background","#bbffaa")

    //③改变class不为one的元素的背景色
    //$("div:not(.one)").css("background","#bbffaa");

    //⑤改变索引值为偶数的div元素的背景色
    //$("div:even").css("background","#bbffaa");

    //⑥改变索引值为奇数的div元素的背景色
    //$("div:odd").css("background","#bbffaa");

    //⑥改变索引值等于3的div元素的背景色
    //$("div:eq(3)").css("background","#bbffaa");

    //⑦改变索引值大于3的div元素的背景色
    //$("div:gt(3").css("background","#bbffaa");

    //⑧改变索引值小于3的div元素的背景色
    //$("div:lt(3").css("background","#bbffaa");

    //⑨改变所有标题元素的背景色
    //$(":header").css("background","#bbffaa");

    //⑩改变当前正在执行动画的元素的背景色
    //$(":animated").css("background","#bbffaa");


   //2，内容过滤选择器
   //①改变含有文本"di"的div元素的背景色
   //$("div:contains('di')").css("background","#bbffaa");

   //②改变不包含子元素（包括文本元素）的div空元素的背景色
   //$("div:empty").css("background","#bbffaa");

   //③改变含有class为mini元素的div元素的背景色
   //$("div:has('.mini')").css("background","#bbffaa");

   //④改变含有子元素（包括文本元素）的div元素的背景色
   //$("div:parent").css("background","#bbffaa");

   //3，可见性过滤选择器
   //①改变所有可见的div元素的背景色
   // $("div:visible").css("background","#ff6500");

   //②显示隐藏的div元素
   $("div:hidden").show(3000);
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/window.onload()/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        window.onload=function(){
            alert("test1")
        }
        window.onload=function(){
            alert("test2")
        }
    </script>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/jquery%E5%BA%93%E5%9C%A8%E6%8C%89%E5%85%B6%E4%BB%96%E5%BA%93%E4%B9%8B%E5%89%8D%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- 引入jquery -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
    <!-- 引入prototype -->
    <script src="https://cdn.bootcdn.net/ajax/libs/prototype/1.6.0.3/prototype.js"></script>
</head>
<body>
    <p id="test">test--prototype</p>
    <p>test-jquery</p>
</body>
</html>
<script>
    jQuery(function(){
        jQuery("p").click(function(){ //直接使用jquery,不用调用"jQuery.noConflict()"函数
            alert(jQuery(this).text())
        })
    })
    $("test").style.display='none';
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/DOM%E5%AF%B9%E8%B1%A1%E5%92%8Cjquery%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <p id="foo">hello</p>
</body>
</html>
<script>
    var a=$("#foo").innerHTML;
    var b=$("#foo").html()
    console.log(a) //undefined
    console.log(b) //hello

    var c = document.getElementById("foo").innerHTML;
    console.log(c) //hello
    var d=document.getElementById("foo").html()
    console.log(d) //Uncaught TypeError: document.getElementById(...).html is not a function
   
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/%E8%A7%A3%E5%86%B3jquery%E5%BA%93%E5%92%8C%E5%85%B6%E4%BB%96%E5%BA%93%E7%9A%84%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- 引入prototype -->
    <script src="https://cdn.bootcdn.net/ajax/libs/prototype/1.6.0.3/prototype.js"></script>
    <!-- 引入jquery -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <p id="test">test---prototype</p>
    <p>test---jquery</p>
</body>
</html>
<script>
    jQuery.noConflict(); // 将变量$的控制权移交给prototype.js
    jQuery(function(){
        jQuery("p").click(function(){
            alert(jQuery(this).text())
        })
    })
    $("test").style.display='none'; // 使用prototype
</script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/22/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/$(document).ready()/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <script>
        $(document).ready(function(){
            alert("hello world")
        })
        $(document).ready(function(){
            alert("hello again")
        })
    </script>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/21/%E3%80%8A%E9%94%8B%E5%88%A9%E7%9A%84jQuery%E3%80%8B/code/%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%AC%AC%E4%B8%80%E4%B8%AAjQuery%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/1.3.1/jquery.js"></script>
</head>
<body>
    <script>
        $(document).ready(function(){ //等待DOM元素加载完毕
            alert("hello world") //弹出 "hello world"
        })
    </script>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title>类和对象</title>
    <url>/2020/09/29/python/%E7%B1%BB%20/</url>
    <content><![CDATA[<h3 id="Python作用域和命名空间"><a href="#Python作用域和命名空间" class="headerlink" title="Python作用域和命名空间"></a>Python作用域和命名空间</h3><ol>
<li><p>作用域(scope) 指的是变量生效的区域</p>
</li>
<li><p>python中一共有两种作用域</p>
<ul>
<li><p>全局作用域</p>
<ul>
<li>在程序执行时创建，程序执行结束时销毁</li>
<li>所有函数以外的区域都是全局作用域</li>
<li>在全局作用域中定义的变量都属于全局变量，全局变量可以在程序的任意位置被访问</li>
</ul>
</li>
<li><p>函数作用域</p>
<ul>
<li>在函数调用时创建，在调用结束时销毁</li>
<li>函数每调用一次就会产生一个新的函数作用域</li>
<li>在函数作用域中定义的变量，都是局部变量，只能在函数内部被访问</li>
</ul>
</li>
<li><p>使用变量时，会优先在当前作用域中寻找变量，如果没有则继续去上一级作用域中寻找，知道找到全局作用域，依然未找到，则会抛出异常 NameError</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn2</span>():</span></span><br><span class="line">        print(<span class="string">f&#x27;fn2中，a=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line">    fn2()</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># fn2中，a=20</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在函数内为变量赋值时，默认都是为局部变量赋值，如果希望在函数内部修改全局变量，需要使用 global 关键字来声明变量</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">global</span> b</span><br><span class="line">    b = <span class="number">10</span>  <span class="comment"># 修改全局变量</span></span><br><span class="line">    print(<span class="string">f&#x27;函数内部，a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>&#x27;</span>)  <span class="comment"># 函数内部，a=10,b=10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line">print(<span class="string">f&#x27;函数外部，a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>&#x27;</span>)  <span class="comment"># 函数外部，a=20,b=10</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><p>命名空间(namespace) 是一个从名字到对象的映射，指的是变量存储的位置，每个变量都需要存储到指定的命名空间中</p>
</li>
<li><p>每一个作用域都有它对应的命名空间</p>
<ul>
<li>全局命名空间，用来保存全局变量</li>
<li>函数命名空间，用来保存函数中的局部变量</li>
</ul>
</li>
<li><p>命名空间实际上就是一个字典，是一个专门用来存储变量的字典</p>
</li>
<li><p>locals() 可以用来获取当前作用域的命名空间，返回的是一个字典</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scope = locals()</span><br><span class="line">print(type(scope))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">print(scope[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向字典中添加key-value就相当于在全局中创建了一个变量（一般不建议这么做）</span></span><br><span class="line">scope[<span class="string">&#x27;c&#x27;</span>] = <span class="number">1000</span>  </span><br></pre></td></tr></table></figure>

</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    scope = locals()</span><br><span class="line">    print(scope[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">    global_scope = globals()</span><br><span class="line">    print(global_scope[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 20, globals() 函数可以用来在任意位置获取全局命名空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>几个命名空间的例子：</p>
<ul>
<li>存放内置函数的集合</li>
<li>模块中的全局名称</li>
<li>函数调用中的局部名称</li>
<li>从某种意义上说，对象的属性集合也是一种命名空间的形式</li>
</ul>
</li>
<li><p>不同命名空间的名称之间没有关系，两个不同的模块都可以定义一个 maximize 函数而不会产生混淆。</p>
</li>
<li><p>属性可以是只读或者是可写的，可写的属性可以对它赋值，可写的属性可以用 del 语句删除。</p>
</li>
<li><p>不同时刻创建的命名空间拥有不同的生存期，包含内置名称的命名空间是在Python解释器启动时创建的，永远不会被删除。模块的全局命名空间在模块定义被读入时创建，通常，模块命名空间也会持续到解释器退出。内置名称实际上也存在于一个模块中，bulitins 模块。</p>
</li>
</ol>
<blockquote>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作用域和命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span>():</span></span><br><span class="line">        str = <span class="string">&quot;local str&quot;</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> str</span><br><span class="line">        str = <span class="string">&quot;nonlocal str&quot;</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span>():</span></span><br><span class="line">        <span class="keyword">global</span> str</span><br><span class="line">        str = <span class="string">&quot;global str&quot;</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    print(do_local()) 	<span class="comment"># local str</span></span><br><span class="line">    print(do_nonlocal()) <span class="comment"># nonlocal str</span></span><br><span class="line">    print(do_global()) <span class="comment"># global str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">&quot;global str:&quot;</span>, str) <span class="comment"># global str: global str</span></span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ol>
<li><p>类</p>
<ul>
<li>Python中的类提供了面向对象编程的所有标准特性</li>
<li>类继承机制允许多个基类</li>
<li>派生类可以覆盖它基类的任何方法</li>
<li>一个方法可以调用基类中相同名称的方法</li>
</ul>
</li>
<li><p>类定义语法</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">[父类]</span>):</span></span><br><span class="line">   代码块</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个MyClass类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(MyClass)  <span class="comment"># &lt;class &#x27;__main__.MyClass&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>在类的代码块中，可以定义变量和函数，类中所定义的变量，将会成为该类实例的公共属性，都可以被该类实例访问。</p>
<p>类中定义的函数叫做方法，同样可以被该类实例所访问，类中的方法每次被调用时，解释器都会自动给方法传递第一个参数，就是调用的对象本身。如果是 p1 调的，第一个参数就是p1对象，如果是 p2 调的，第一个参数就是 p2 对象，一般将这个参数命名为 self</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;张三&#x27;</span>  <span class="comment"># 公共属性，所有实例都可以访问</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self)  <span class="comment"># &lt;__main__.Person object at 0x00000298029758B0&gt; </span></span><br><span class="line">        print(<span class="string">&#x27;你好！我是%s&#x27;</span> % self.name)  <span class="comment"># 注意在方法中不能直接访问类中的属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line"></span><br><span class="line">print(p1.name)  <span class="comment"># 张三</span></span><br><span class="line">p2.say_hello()  <span class="comment"># 你好！我是张三</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>类的基本结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">[父类]</span>)：</span></span><br><span class="line"><span class="class">	公共属性....</span></span><br><span class="line"><span class="class">	</span></span><br><span class="line"><span class="class">	# 对象的初始化方法</span></span><br><span class="line"><span class="class">	<span class="title">def</span> <span class="title">__init__</span>(<span class="params">self,....</span>):</span></span><br><span class="line">		代码块</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 其他的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">method_1</span>(<span class="params">self,....</span>)：</span></span><br><span class="line"><span class="function">		代码块</span></span><br><span class="line"><span class="function">	</span></span><br><span class="line"><span class="function">	<span class="title">def</span> <span class="title">method_2</span>(<span class="params">self,....</span>)：</span></span><br><span class="line"><span class="function">		代码块</span></span><br><span class="line"><span class="function">	</span></span><br><span class="line"><span class="function">	......</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>类属性和实例属性</p>
<ul>
<li><p>直接在类中定义的属性是类属性，可以通过类或类的实例被访问到</p>
</li>
<li><p>类属性只能通过类对象修改，无法通过实例修改</p>
</li>
<li><p>通过实例对象添加的属性是实例属性，只能通过实例对象来访问和修改，类对象无法访问和修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;张三&#x27;</span>  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">A.count = <span class="number">100</span> <span class="comment"># 类属性</span></span><br><span class="line">print(<span class="string">&#x27;A ,&#x27;</span>, A.count) <span class="comment">#  100  类对象访问类属性</span></span><br><span class="line">print(<span class="string">&#x27;a ,&#x27;</span>, a.count) <span class="comment">#  100  实例对象访问类属性</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;a ,&#x27;</span>, a.name) <span class="comment">#  张三 实例对象访问实例属性</span></span><br><span class="line">print(<span class="string">&#x27;A ,&#x27;</span>, A.name)  <span class="comment"># AttributeError: type object &#x27;A&#x27; has no attribute &#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>实例方法</p>
<ul>
<li><p>在类中定义，以selft为第一个参数的方法都是实例方法</p>
</li>
<li><p>实例方法在调用时，python会将调用对象作为 self 传入</p>
</li>
<li><p>实例方法可以通过实例和类去调用，当通过实例调用时，会自动将当前调用对象作为 selft  传入；当通过类调用时，不会自动传递self，必须手动传递self</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类属性</span></span><br><span class="line"><span class="comment"># 实例属性</span></span><br><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;张三&#x27;</span>  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;test_1方法，一个实例方法 &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;test_2方法，一个类方法 &#x27;</span>, cls)</span><br><span class="line">        print(<span class="string">&#x27;cls.count=&#x27;</span>, cls.count)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;test_3方法，一个静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.test_1()  <span class="comment"># 等价于 A.test_1(a)</span></span><br><span class="line"><span class="comment"># test_1方法，一个实例方法</span></span><br><span class="line"></span><br><span class="line">A.test_2()  <span class="comment"># 等价于 a.test_2()</span></span><br><span class="line"><span class="comment"># test_2方法，一个类方法  &lt;class &#x27;__main__.A&#x27;&gt;  cls.count= 0</span></span><br><span class="line">A.test_3()  <span class="comment"># test_3方法，一个静态方法</span></span><br><span class="line">a.test_3()  <span class="comment"># test_3方法，一个静态方法</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>类方法</p>
<ul>
<li>在类内部使用@classmethod 来修饰的方法</li>
<li>类方法的第一个参数是 cls，也会被自动传递，cls 就是当前的类对象</li>
</ul>
</li>
<li><p>静态方法</p>
<ul>
<li>在类中使用 @staticmethod 来修饰的方法</li>
<li>静态方法不需要指定任何默认参数，可以通过类和实例去调用</li>
<li>一般都是一些工具方法，和当前类无关</li>
</ul>
</li>
<li><p>类对象</p>
<ul>
<li><p>类对象支持两种操作：属性引用和实例化</p>
</li>
<li><p>属性引用使用 python 中所有属性引用所使用的标准语法：obj.name，当类定义是这样的：</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">	<span class="string">&quot;A simple example class&quot;</span></span><br><span class="line">	i=<span class="number">12345</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Myclass.i 和 Myclass.f 就是有效的属性引用，将分别返回一个整数和一个函数对象。</p>
<p>类属性也可以被赋值，因此可以通过赋值更改 MyClass.i 的值</p>
<p>_ doc _ 也是一个有效的属性，将返回所属类的文档字符串：“ A simple example class</p>
</blockquote>
</li>
<li><p>类的实例化使用函数表示法，如 x= Myclass()，创建类的新实例并将此对象分配给局部变量 x</p>
</li>
<li><p>实例化操作会创建一个空对象，许多类喜欢创建带有特定初始状态的自定义实例，为此，类定义可能包含一个名为 _ init _ ()  的特殊方法。</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">	self.data= []</span><br></pre></td></tr></table></figure>

<p>当一个类定义了 _ init _ () 方法时，类的实例化操作会自动为新创建的类实例发起调用 _ init _ () 。因此，可以通过 x=MyClass() 获得一个经初始化的新实例。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>实例对象</p>
<ul>
<li>实例对象理解的唯一操作是属性引用</li>
<li>有两种有效的属性名称：数据属性和方法<ul>
<li>数据属性不需要声明，像局部变量一样，它们将在第一次被赋值时产生。</li>
<li>方法是从属于对象的函数</li>
</ul>
</li>
</ul>
</li>
<li><p>方法对象</p>
<ul>
<li><p>通常，方法在绑定后立即被调用，如 x.f()</p>
</li>
<li><p>但是，立即调用一个方法并不是必须的，x.f 是一个方法对象，它可以被保存起来以后再调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xf = x.f</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	print(xf())</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法的特殊之处就在于实例对象会作为函数的第一个参数被传入，调用 x.f() 其实就相当于 MyClass.f(x)。调用一个具有 n 个参数的方法就相当于调用再多一个参数的对应函数，这个参数值为方法所属实例对象，位置在其他参数之前。</p>
</li>
</ul>
</li>
<li><p>类和实例变量</p>
<ul>
<li><p>实例变量用于每个实例的唯一数据，类变量用于类的所有实例共享的属性和方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    kind = <span class="string">&#x27;canine&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Dog(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line">e = Dog(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line">print(d.kind, d.name) <span class="comment"># canine Fido</span></span><br><span class="line">print(e.kind, e.name) <span class="comment"># canine Buddy</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>共享数据可能在设计 mutable 对象例如列表和字典的时候导致令人惊讶的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    tricks = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span>(<span class="params">self, trick</span>):</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = Cat(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line">c2 = Cat(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line">c1.add_trick(<span class="string">&#x27;roll over&#x27;</span>)</span><br><span class="line">c2.add_trick(<span class="string">&#x27;play dead&#x27;</span>)</span><br><span class="line">print(c1.tricks) 	<span class="comment">#[&#x27;roll over&#x27;, &#x27;play dead&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>tricks 列表不应该被用作类变量，因为所有的Cat实例将只共享一个单独的列表。</p>
<p>正确的类设计应该使用实例变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.tricks = []  <span class="comment"># creates a new empty list for each dog</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span>(<span class="params">self, trick</span>):</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = Cat(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line">c2 = Cat(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line">c1.add_trick(<span class="string">&#x27;roll over&#x27;</span>)</span><br><span class="line">c2.add_trick(<span class="string">&#x27;play dead&#x27;</span>)</span><br><span class="line">print(c1.tricks)  <span class="comment"># [&#x27;roll over&#x27;]</span></span><br><span class="line">print(c2.tricks)  <span class="comment"># [&#x27;play dead&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果同样的属性名称同时出现在实例和类中，解释器会优先在当前实例对象中查找是否有该属性，如果有，则直接发返回当前实例对象的属性值，否则就去实例对象的类对象中寻找，如果有则返回类对象的属性值，类对象中依然没有，则报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">	name=<span class="string">&#x27;wangcai&#x27;</span></span><br><span class="line">	sex=<span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line">D1 = Dog()</span><br><span class="line">print(D1.name,D1.sex)  <span class="comment"># wangcai male</span></span><br><span class="line"></span><br><span class="line">D2 = Dog()</span><br><span class="line">D2.sex=<span class="string">&quot;female&quot;</span></span><br><span class="line">print(D2.name,D2.sex)  <span class="comment"># wangcai female</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ol>
<li><p>对象是类的实例，如果多个对象是通过一个类创建的，称这些对象是一类对象，如 int()，float()，str()，dict() 等都是类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = int(<span class="number">10</span>)  <span class="comment"># 创建一个int类的实例</span></span><br><span class="line">b = str(<span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 创建一个str类的实例</span></span><br><span class="line"></span><br><span class="line">print(a, type(a))  <span class="comment"># 10 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">print(b, type(b))  <span class="comment"># hello &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>isinstance() 用来检查一个对象是否是一个类的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"></span><br><span class="line">result1 = isinstance(mc, MyClass)</span><br><span class="line">result2 = isinstance(<span class="number">123</span>, str)</span><br><span class="line">print(result1)  <span class="comment"># True   &lt;class &#x27;__main__.MyClass&#x27;&gt;</span></span><br><span class="line">print(result2)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象的初始化</p>
<ul>
<li><p>类中可以定义一些特殊方法（魔术方法），以 __ 开头，__ 结尾的方法，这些方法不需要我们自己调用，会在特殊的时刻自动调用</p>
</li>
<li><p>其中 __ init __ (self) 方法就是对象初始化时被自动调用的特殊方法，会在对象创建以后立刻执行</p>
</li>
<li><p>__ init __ (selft) ，可以用来向新创建的对象中初始化属性，调用类创建对象时，类后边的所有参数都会一次传递到 init 中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="comment"># 通过self向新建的对象中初始化属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;大家好，我是%s&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;李四&#x27;</span>)  <span class="comment"># 自动向对象添加name属性</span></span><br><span class="line">p.say_hello()  <span class="comment"># 大家好，我是李四</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="类中的特殊方法"><a href="#类中的特殊方法" class="headerlink" title="类中的特殊方法"></a>类中的特殊方法</h3><ol>
<li><p>__ str__ () ，会在尝试将对象转换为字符串时调用，可以用来指定对象转换为字符串的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Person name=<span class="subst">&#123;self.name&#125;</span>,age=<span class="subst">&#123;self.age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">p2 = Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们打印一个对象时，实际上打印的是对象的中特殊方法 __str__()的返回值</span></span><br><span class="line">print(p1)  <span class="comment"># Person name=张三,age=18</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>__ repr __ ()，会在对当前对象使用 repr() 函数时调用，指定对象在“交互模式” 中直接输出的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">p2 = Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">print(repr(p1))  <span class="comment"># Hello</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>__ len __ () ，获取对象的长度</p>
</li>
<li><p>object.__ bool __(self)：可以通过 bool 指定对象转换为布尔值的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.age &gt; <span class="number">17</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">p2 = Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">print(bool(p1))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>__ gt __（self，other) ，会在对象做大于比较的时候调用，该方法的返回值将会作为比较的结果，self 表示当前对象，other 表示和当前对象比较的另一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.age &gt; other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">p2 = Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">print(p1 &gt; p2)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其他特殊方法：</p>
<ul>
<li>object.<strong>add</strong>(self, other)</li>
<li>object.<strong>sub</strong>(self, other)</li>
<li>object.<strong>mul</strong>(self, other)</li>
<li>object.<strong>matmul</strong>(self, other)</li>
<li>object.<strong>truediv</strong>(self, other)</li>
<li>object.<strong>floordiv</strong>(self, other)</li>
<li>object.<strong>mod</strong>(self, other)</li>
<li>object.<strong>divmod</strong>(self, other)</li>
<li>object.<strong>pow</strong>(self, other[, modulo])</li>
<li>object.<strong>lshift</strong>(self, other)</li>
<li>object.<strong>rshift</strong>(self, other)</li>
<li>object.<strong>and</strong>(self, other)</li>
<li>object.<strong>xor</strong>(self, other)</li>
<li>object.<strong>or</strong>(self, other)</li>
<li>object.<strong>lt</strong>(self, other) 小于 &lt;</li>
<li>object.<strong>le</strong>(self, other) 小于等于 &lt;=</li>
<li>object.<strong>eq</strong>(self, other) 等于 ==</li>
<li>object.<strong>ne</strong>(self, other) 不等于 !=</li>
<li>object.<strong>gt</strong>(self, other) 大于 &gt;</li>
<li>object.<strong>ge</strong>(self, other) 大于等于 &gt;= </li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2020/09/27/python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol>
<li><p>列表是python中的一个对象</p>
<ol start="2">
<li><p>数值只能保存一个单一的数据，列表中可以保存多个有序的数据</p>
</li>
<li><p>列表的创建：通过[] 创建</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = []  <span class="comment"># 创建了一个空列表</span></span><br><span class="line">print(list, type(list))  <span class="comment"># [] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
</li>
<li><p>一个列表中可以存储多个元素，也可以在创建列表时，指定列表中的元素</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">5</span>]  <span class="comment"># 创建一个包含5个元素的列表</span></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]  <span class="comment"># 创建了一个有5个元素的列表</span></span><br><span class="line">print(list)  <span class="comment"># [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表中可以保存任意的对象</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="literal">True</span>, <span class="literal">None</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="keyword">print</span>]</span><br><span class="line">print(list)  <span class="comment"># [10, &#x27;hello&#x27;, True, None, [1, 2, 3], &lt;built-in function print&gt;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>可以通过索引获取列表中的元素</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(list[<span class="number">4</span>])  <span class="comment"># 50</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>获取列表的长度，len()</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(len(list))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>+，将两个列表拼接为一个列表</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list)  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>’ * ‘，将列表重复指定次数</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] * <span class="number">2</span></span><br><span class="line">print(list)  <span class="comment"># [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>in 和 not in ，检查指定元素是否存在于列表中，返回True或false</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> list)  <span class="comment"># False</span></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> list)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>min() 获取列表中最小值， max() 获取列表中最大值</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(min(list), max(list))  <span class="comment"># 10 50</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表对象方法</p>
</li>
</ol>
<blockquote>
<p>list.append(x)：在列表的末尾添加一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruits.append(<span class="string">&#x27;grape&#x27;</span>) </span><br><span class="line">print(fruits) <span class="comment">#[&#x27;orange&#x27;, &#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.extend(iterable)：使用可迭代对象中的所有元素来扩展列表，相当于+=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>]</span><br><span class="line">list.extend([<span class="string">&#x27;刘晨&#x27;</span>,<span class="string">&#x27;王立&#x27;</span>]) </span><br><span class="line"><span class="comment">#[&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;刘晨&#x27;, &#x27;王立&#x27;]</span></span><br><span class="line"></span><br><span class="line">list += [<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;朱丽&#x27;</span>] </span><br><span class="line"><span class="comment">#[&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;刘晨&#x27;, &#x27;王立&#x27;, &#x27;王敏&#x27;, &#x27;朱丽&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.inert(i，x)：在给定的位置插入一个元素，第一个参数是要插入的元素的索引，第二个参数是要插入的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>]</span><br><span class="line">list.insert(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line">print(list)  <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;Jack&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.remove(x)：移除列表中第一个值为x的元素，如果没有这样的元素，则抛出ValueError异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>]</span><br><span class="line">list.remove(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">print(list) <span class="comment">#[&#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;张三&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.pop(【x】)：删除列表中给定位置的元素并返回它，如果没有给定位置，a.pop() 将会删除并返回列表的最后一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>]</span><br><span class="line">list.pop(<span class="number">2</span>)  <span class="comment"># 删除索引为2的元素</span></span><br><span class="line">print(list)  <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;李华&#x27;]</span></span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.pop())  <span class="comment"># banana</span></span><br><span class="line">print(fruits)  <span class="comment"># [&#x27;orange&#x27;, &#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;apple&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.clear()：移除列表中的所有元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>]</span><br><span class="line">list.clear()</span><br><span class="line">print(list)  <span class="comment"># []</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.index(x【，start [,end] 】)：返回元素在列表中第一次出现的索引，如果没有这样的元素将会抛出ValueError异常，可选参数 start 和 end 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是start参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.index(<span class="string">&#x27;banana&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line">print(fruits.index(<span class="string">&#x27;banana&#x27;</span>, <span class="number">4</span>)) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index()的第二个参数，表示查找的起始位置 ， 第三个参数，表示查找的结束位置</span></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">print(list.index(<span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>))  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要获取列表中没有的元素，会抛出异常</span></span><br><span class="line">print(list.index(<span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>))  <span class="comment"># ValueError: 10 is not in list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意对于不可变序列，无法通过索引来修改</span></span><br><span class="line">s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># s[1] = &#x27;a&#x27; </span></span><br><span class="line"><span class="comment"># TypeError: &#x27;str&#x27; object does not support item assignment</span></span><br><span class="line"></span><br><span class="line">s = list(s)  <span class="comment"># 可以通过 list() 函数将其转换为列表进行修改</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">print(s)  <span class="comment"># [&#x27;h&#x27;, &#x27;a&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.count(x)：返回x在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.count(<span class="string">&#x27;apple&#x27;</span>))  <span class="comment">#2</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.sort(key=None，reverse=False)：对列表转给你的元素进行排序，默认是升序排列，参数可用于自定义排序，reverse=True时就是降序排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits) </span><br><span class="line"><span class="comment"># [&#x27;apple&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;orange&#x27;, &#x27;pear&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list = list(<span class="string">&#x27;asnbdnbasdabd&#x27;</span>)</span><br><span class="line">list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(list)</span><br><span class="line"><span class="comment"># [&#x27;s&#x27;, &#x27;s&#x27;, &#x27;n&#x27;, &#x27;n&#x27;, &#x27;d&#x27;, &#x27;d&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;b&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>注意，并非所有的数据都可以排序或比较，如[None，’hello’，10] 就不可以排序，因为整数不能与字符串比较，而None不能与其他类型比较</p>
</blockquote>
<blockquote>
<p>list.reverse()：翻转列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits)</span><br><span class="line"><span class="comment">#[&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;kiwi&#x27;, &#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;apple&#x27;, &#x27;orange&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>list.copy()：返回列表中的一个浅拷贝</p>
</blockquote>
<blockquote>
<p>注意，像 insert，remove，sort等方法，只修改列表，没有返回值(返回默认值是None)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">print(fruits.sort()) <span class="comment"># None</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="13">
<li><p>遍历列表</p>
<ul>
<li><p>通过while循环遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(list):</span><br><span class="line">    print(list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过for循环遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list :</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>range()</p>
<ul>
<li><p>是一个函数，可以用来生成自然数的序列</p>
</li>
<li><p>该函数需要三个参数，起始位置，结束位置，步长，都可以省略</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r1 = range(<span class="number">5</span>) </span><br><span class="line">print(<span class="string">&#x27;r1=&#x27;</span>, r1)  <span class="comment"># r1=range(0, 5), 即[0,1,2,3,4]</span></span><br><span class="line">r2 = range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">r3 = range(<span class="number">10</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>经常配合for循环使用，通过range() 可以创建一个指定次数的for循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(i, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span>:</span><br><span class="line">    print(s, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># h e l l o</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改列表操作</p>
<ul>
<li><p>直接通过索引修改列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[<span class="number">0</span>] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">list[<span class="number">2</span>] = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">print(list)  <span class="comment"># [&#x27;hello&#x27;, 20, &#x27;world&#x27;, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过切片修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;wrold&#x27;</span>]  <span class="comment"># 使用新的元素替换旧元素, 注意在给切片进行赋值时，只能使用序列</span></span><br><span class="line"><span class="comment"># [&#x27;hello&#x27;, &#x27;wrold&#x27;, 30, 40, 50]</span></span><br><span class="line">list[<span class="number">0</span>:<span class="number">0</span>] = [<span class="string">&#x27;abc&#x27;</span>]  <span class="comment"># 向索引为0的位置插入元素</span></span><br><span class="line"><span class="comment"># [&#x27;abc&#x27;, &#x27;hello&#x27;, &#x27;wrold&#x27;, 30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[::<span class="number">2</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]  <span class="comment"># 当设置了步长时，序列中元素的个数必须和切片中元素的个数一致</span></span><br><span class="line">print(list)  <span class="comment"># [&#x27;a&#x27;, 20, &#x27;b&#x27;, 40, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 del 删除列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">2</span>]  <span class="comment"># 删除索引为2的元素</span></span><br><span class="line">print(list)  <span class="comment"># [10, 20, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过切片删除元素    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment"># [30, 40, 50]</span></span><br><span class="line"><span class="keyword">del</span> list[::<span class="number">2</span>]  <span class="comment"># [40]</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list[<span class="number">1</span>:<span class="number">3</span>] = []  <span class="comment"># [10, 40, 50]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表的切片操作</p>
<ul>
<li><p>语法：列表[起始:结束] </p>
</li>
<li><p>通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素，左闭右开</p>
</li>
<li><p>切片指从现有列表中获取子列表，返回一个新的列表，不会影响原来的列表</p>
</li>
<li><p>索引是负数，从后往前获取元素，-1表示倒数第一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>, <span class="string">&#x27;李明&#x27;</span>]</span><br><span class="line">print(list[<span class="number">-2</span>])  <span class="comment"># 李华</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>起始位置和结束位置可以省略不写，全部省略时，相当于创建了一个列表的副本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>, <span class="string">&#x27;李明&#x27;</span>]</span><br><span class="line">print(list[<span class="number">1</span>:])  <span class="comment"># [&#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;李明&#x27;]</span></span><br><span class="line">print(list[:<span class="number">3</span>])  <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]</span></span><br><span class="line">print(list[:])  <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李华&#x27;, &#x27;李明&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>步长：</p>
<ul>
<li><p>语法：列表[起始:结束:步长] </p>
</li>
<li><p>表示每次获取元素的间隔，默认值是1，隔一个取一个，</p>
</li>
<li><p>步长可以是负数，负数则从后往前取，步长不能是0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>, <span class="string">&#x27;李明&#x27;</span>]</span><br><span class="line">print(list[<span class="number">0</span>::<span class="number">3</span>])  <span class="comment"># [&#x27;张三&#x27;, &#x27;李华&#x27;]</span></span><br><span class="line">print(list[::<span class="number">-1</span>])  <span class="comment"># [&#x27;李明&#x27;, &#x27;李华&#x27;, &#x27;王五&#x27;, &#x27;李四&#x27;, &#x27;张三&#x27;]</span></span><br><span class="line">print(list[::<span class="number">0</span>])  <span class="comment"># ValueError: slice step cannot be zero</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>列表作为栈使用</p>
<blockquote>
<p>列表方法使得列表作为堆栈非常容易，最后一个插入，最先取出(“先进后出”)，要添加一个元素到堆栈的顶端，使用append()，要从堆栈顶部取出一个元素，使用 pop()，不用指定索引。</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stack = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">stack.append(<span class="number">6</span>)</span><br><span class="line">stack.append(<span class="number">7</span>)</span><br><span class="line">print(stack)  <span class="comment"># [3, 4, 5, 6, 7]</span></span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">print(stack)  <span class="comment"># [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表作为队列使用</p>
<blockquote>
<p>列表也可用作队列，先添加的元素被最先取出（“先进先出”）。然而列表用作这个目的相当低效，因为在列表的末尾添加和弹出元素非常快，但是在列表的开头插入或弹出元素却很慢，因为所有的其他元素都必须移动一位。</p>
<p>若要实现一个队列，可使用 collection.deque ，它被设计成可以快速地从两端添加或弹出元素。</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue = deque([<span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Michael&quot;</span>])</span><br><span class="line">queue.append(<span class="string">&quot;Terry&quot;</span>)</span><br><span class="line">queue.append(<span class="string">&quot;Graham&quot;</span>)</span><br><span class="line">print(queue)  <span class="comment"># deque([&#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Terry&#x27;, &#x27;Graham&#x27;])</span></span><br><span class="line">print(queue.popleft())  <span class="comment"># Eric</span></span><br><span class="line">print(queue)  <span class="comment"># deque([&#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Terry&#x27;, &#x27;Graham&#x27;])</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>列表推导式</p>
<blockquote>
<p>列表推导式提供了一个更简单的方法创建列表，常见的用法是把某种操作应用于序列或可迭代对象的每个元素上，然后实验其结果来创建列表，或者通过满足某些特定条件元素来创建子序列</p>
<p>如，创建一个平方列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    squares.append(item ** <span class="number">2</span>)</span><br><span class="line">print(squares) <span class="comment">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure>

<p>这里创建(或被重写) 的 item 变量在for循环后仍然存在，我们可以计算平方列表的值而不会产生任何副作用。</p>
<p>等价于：squares = list(map (lambda x: x**2,  range(10)))</p>
<p>也等价于：squares=[x**2 for x in range(10)]</p>
</blockquote>
<blockquote>
<p>列表推导式的结构是由一对方括号所包含的以下内容：</p>
<p>一个表达式，后跟一个for子句，然后是0个或多个for或if子句。</p>
<p>其结果将是一个新列表，有表达式依据后面的 for 和 if 子句的内容进行求值计算得出。</p>
<p>如：使用列表推导式将两个列表中不相等的元素组合起来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v=[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">print(v) <span class="comment">#[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span></span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v=[]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">	<span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]:</span><br><span class="line">		<span class="keyword">if</span> x!=y</span><br><span class="line">			v.append((x,y))</span><br><span class="line">print(v)</span><br></pre></td></tr></table></figure>

<p>注意这这两种方式中，for 和 if 的顺序是相同的</p>
</blockquote>
<blockquote>
<p>如果表达式是一个元组，必须加上括号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vec = [<span class="number">-4</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">new_vec0 = [x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">print(new_vec0)  <span class="comment"># [-8, -4, 0, 4, 8]</span></span><br><span class="line">new_vec1 = [(x, x * <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">print(new_vec1)  <span class="comment"># [(-4, -8), (-2, -4), (0, 0), (2, 4), (4, 8)]</span></span><br><span class="line"></span><br><span class="line">new_vec2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &gt;= <span class="number">0</span>]</span><br><span class="line">print(new_vec2)  <span class="comment"># [0, 2, 4]</span></span><br><span class="line"></span><br><span class="line">new_vec3 = [abs(x) <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">print(new_vec3)  <span class="comment"># [4, 2, 0, 2, 4]</span></span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">&#x27;  banana&#x27;</span>, <span class="string">&#x27;loganberry   &#x27;</span>, <span class="string">&#x27;  possion fruit  &#x27;</span>]</span><br><span class="line">new_fruits = [item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> fruits]</span><br><span class="line">print(new_fruits)  <span class="comment"># [&#x27;banana&#x27;, &#x27;loganberry&#x27;, &#x27;possion fruit&#x27;]</span></span><br><span class="line"></span><br><span class="line">num = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">new_num = [i <span class="keyword">for</span> j <span class="keyword">in</span> num <span class="keyword">for</span> i <span class="keyword">in</span> j]</span><br><span class="line">print(new_num)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>列表推导式可以使用复杂的表达式和嵌套函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line">a = [str(round(pi, i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">print(a)  <span class="comment"># [&#x27;3.1&#x27;, &#x27;3.14&#x27;, &#x27;3.142&#x27;, &#x27;3.1416&#x27;, &#x27;3.14159&#x27;]</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>嵌套的列表推导式</p>
<blockquote>
<p>列表推导式中的初始表达式可以是任何表达式，包括另一个列表推导式</p>
<p>如下面这个 3x4 的矩阵，它由3个长度为4的列表组成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">juzhen=[</span><br><span class="line">	[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">	[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">	[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>下面的列表推导式将交换其行与列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_juzhen=[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> juzhen] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(new_juzhen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1,5,9],[2,6,10],[3,7,11],[4,8,]]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>嵌套的列表推导式是基于跟随其后的for进行求值的</p>
<p>上面的例子等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    arr1.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> juzhen])</span><br><span class="line">print(arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1,5,9],[2,6,10],[3,7,11],[4,8,]]</span></span><br></pre></td></tr></table></figure>

<p>也等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    arr2_row = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> juzhen:</span><br><span class="line">        arr2_row.append(row[i])</span><br><span class="line">    arr2.append(arr2_row)</span><br><span class="line">print(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1,5,9],[2,6,10],[3,7,11],[4,8,]]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>实际应用中，更多私用内置函数去组成复杂的流程语句，zip() 函数将会很好的处理这种情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr3=list(zip(*juzhen))</span><br><span class="line">print(arr3)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h3 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h3><ul>
<li><p>可以从列表按照给定的索引而不是值来移除一个元素，它不同于会返回一个值的pop() 方法。</p>
</li>
<li><p>del语句也可以用来从列表中移除切片或者清空整个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">66</span>, <span class="number">25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line">print(a)  <span class="comment"># [1, 66, 25, 333, 333, 1234, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">print(a)  <span class="comment"># [1, 66, 333, 1234, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line">print(a)  <span class="comment"># []</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>del 也可删除整个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> a</span><br><span class="line">print(a)  <span class="comment"># name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="元组和序列"><a href="#元组和序列" class="headerlink" title="元组和序列"></a>元组和序列</h3><ol>
<li><p>列表和字符串有很多共性，例如索引和切片等，它们是序列数据类型（list，tuple，range) 中的两种。</p>
</li>
<li><p>随着python语言的发展，其他的序列类型也会被加入其中，如其中一种标准序列类型：元组（ tuple ）</p>
</li>
<li><p>创建元组，使用() 创建元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = ()  <span class="comment"># 创建了一个空元组</span></span><br><span class="line">print(t, type(t))  <span class="comment"># () &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 含有一个元素的元组可以通过在这个元组后添加一个逗号来构建，因为圆括号中只有一个值的话不够明确</span></span><br><span class="line">  single = <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  print(single)  <span class="comment"># (&#x27;hello&#x27;,)</span></span><br><span class="line">  print(len(single))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>元组在输出时总是被圆括号包围的，以便正确表示嵌套元组</p>
</li>
<li><p>元组是一个不可变的序列，不能尝试为元组中的元素重新赋值，一个元组由几个被逗号隔开的值组成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># 创建了一个5个元素的元组</span></span><br><span class="line">t[<span class="number">3</span>] = <span class="number">10</span>  </span><br><span class="line"><span class="comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line">print(t[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>当元组不是空元组时，括号可以省略，不过经常必须有，如果这个元组是一个更大的表达式的一部分的话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span></span><br><span class="line">print(t)  <span class="comment"># (10, 20, 30, 40)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解包：</p>
<ul>
<li><p>语句 t=12345,54321,’hello!’ 是元组打包的一个例子，值 12345,54321,’hello!’ 被打包进元组，其逆操作也是允许的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x,y,z=t</span><br></pre></td></tr></table></figure>

<p> 这被称为序列解包。解包操作的等号右侧可以是任何序列，序列解包的要求是等号左侧的变量数与右侧序列里所含的元素数相同。多重赋值也只是元组打包和序列解包的组合。</p>
</li>
<li><p>解包：把元组中的每一个元素都赋值给一个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span></span><br><span class="line">a, b, c, d = t</span><br><span class="line">print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># a=10,b=20,c=30,d=40</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>利用解包的特性很容易交换两个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line">print(a, b)  <span class="comment"># 20 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在对元组进行解包时，变量的数量必须和元组中元素数量一直，也可以在变量前添加 “ * ”，会获取元组中所有剩余元素，注意不能同时出现两个或以上的*</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span></span><br><span class="line">a, b, *c = t  <span class="comment"># a=10,b=20,c=[30, 40]</span></span><br><span class="line">a, *b, c = t  <span class="comment"># s=10,b=[20, 30],c=40</span></span><br><span class="line">*a, b, c = t  <span class="comment"># s=[10, 20],b=30,c=40</span></span><br><span class="line"></span><br><span class="line">a, b, *c = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)  <span class="comment"># a=h,b=e,c=[&#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"><span class="comment"># 不能同时出现两个或以上的*变量</span></span><br><span class="line"><span class="comment"># *a , *b , c = t SyntaxError: two starred expressions in assignment</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>序列都可以解包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">print(t[<span class="number">0</span>])  <span class="comment"># 12345</span></span><br><span class="line">print(t)  <span class="comment"># (12345, 54321, &#x27;hello!&#x27;)</span></span><br><span class="line"></span><br><span class="line">u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(u)  <span class="comment"># ((12345, 54321, &#x27;hello!&#x27;), (1, 2, 3, 4, 5))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">print(v)  <span class="comment"># ([1, 2, 3], [3, 2, 1])</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>元组可能看起来和列表很像，但它们通常在不同的场景被使用，并有着不同的用途</p>
<ul>
<li>元组是 immutable，其序列通常包含不同种类元素，并且通过解包或者索引来访问，如果是namedtuples的话甚至可以通过属性访问</li>
<li>列表时 mutable，列表中的元素一般是同种类型的，通过迭代访问</li>
</ul>
</li>
</ol>
<h3 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h3><ol>
<li><p>对象的value可变，列表就是一个可变对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="string">&#x27;修改前：&#x27;</span>, a, id(a))  <span class="comment"># 修改前： [1, 2, 3] 1733767585728</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引修改对象</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(<span class="string">&#x27;修改后：&#x27;</span>, a, id(a))  <span class="comment"># 修改后： [10, 2, 3] 1733767585728</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为变量重新赋值</span></span><br><span class="line">a = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(<span class="string">&#x27;修改后：&#x27;</span>, a, id(a))  <span class="comment"># 修改后： [4, 5, 6] 2623572692544</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>is 和 ==</p>
<ul>
<li><p>== 比较的是对象的value是否相等</p>
</li>
<li><p>is 比较对象的id是否相同，是否是同一个对象，is 更严格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(a == b)  <span class="comment"># a和b的值相等，使用==会返回True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># a和b不是同一个对象，内存地址不同，使用is会返回False</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ol>
<li><p>花括号或 set() 函数可以用来创建集合，注意，创建一个空集合只能用set() 而不能用 {}，因为后者是创建一个空字典。set() 还可以将序列和字典转换为集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line">print(basket)  <span class="comment"># &#123;&#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;orange&#x27;, &#x27;apple&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">s1 = set()  <span class="comment"># 空集合</span></span><br><span class="line">s2 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">s3 = set(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">s4 = set(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)  <span class="comment"># 使用set()将字典转换为集合时，只会包含字典中的键</span></span><br><span class="line">print(<span class="string">f&#x27;s1=<span class="subst">&#123;s1&#125;</span>,s2=<span class="subst">&#123;s2&#125;</span>,s3=<span class="subst">&#123;s3&#125;</span>,s4=<span class="subst">&#123;s4&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># s1=set(),s2=&#123;1, 2, 3, 4, 5&#125;,s3=&#123;&#x27;e&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;h&#x27;&#125;,s4=&#123;&#x27;b&#x27;, &#x27;a&#x27;, &#x27;c&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>基本用法包括成员检测和消除重复元素</p>
</li>
<li><p>集合对象也支持 联合，交集，差集，对称差分等数学运算</p>
</li>
<li><p>集合不能通过索引操作，可以转换为列表操作</p>
</li>
<li><p>in  和 not in 检查集合中的元素，len() 获取集合中元素的数量，去重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">print(<span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> s)  <span class="comment"># False</span></span><br><span class="line">print(len(s))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>add() 向集合中添加元素，没有返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">s.add(<span class="number">10</span>)</span><br><span class="line">print(s)  <span class="comment"># &#123;1, 2, 3, &#x27;b&#x27;, 10, &#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>update（）将一个集合中的元素添加到当前集合中，可以传递序列或字典作为参数，字典只会使用键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">s.update(set(<span class="string">&#x27;hex&#x27;</span>))  <span class="comment"># &#123;1, 2, 3, &#x27;e&#x27;, &#x27;h&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line">s.update((<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>))  <span class="comment"># &#123;1, 2, 3, &#x27;e&#x27;, 40, 10, &#x27;h&#x27;, &#x27;a&#x27;, 50, 20, &#x27;x&#x27;, &#x27;b&#x27;, 30&#125;</span></span><br><span class="line">s.update(</span><br><span class="line">    &#123;<span class="number">10</span>: <span class="string">&#x27;ab&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;bc&#x27;</span>, <span class="number">100</span>: <span class="string">&#x27;cd&#x27;</span>&#125;)  <span class="comment"># &#123;1, 2, 3, &#x27;e&#x27;, 100, 40,  10, &#x27;h&#x27;, &#x27;a&#x27;, 50, 20, &#x27;x&#x27;, &#x27;b&#x27;, 30&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pop() 随机删除并返回集合中的一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">result = s.pop() </span><br><span class="line">print(result, s)    <span class="comment"># 1 &#123;2, 3, &#x27;b&#x27;, &#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>remove（）删除集合中的指定元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">s.remove(<span class="number">1</span>)</span><br><span class="line">print(s)  <span class="comment"># &#123;2, 3, &#x27;b&#x27;, &#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>clear（） 清空集合</p>
</li>
<li><p>copy（） 对集合浅拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">s2 = s.copy()</span><br><span class="line">print(s2)  <span class="comment"># &#123;1, 2, 3, &#x27;b&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line">print(id(s), id(s2))    <span class="comment"># 1837354855328 1837354855104</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类似于列表推导式，集合也支持推导式形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line">print(a)  <span class="comment"># &#123;&#x27;d&#x27;, &#x27;r&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>集合的运算</p>
<ul>
<li><p>在对集合做运算时，不会影响原来的集合，而是返回一个运算结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 交集运算</span></span><br><span class="line">result = s1 &amp; s2  <span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 并集运算</span></span><br><span class="line">result = s1 | s2  <span class="comment"># &#123;1,2,3,4,5,6,7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 差集</span></span><br><span class="line">result = s1 - s2  <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 异或集 获取只在一个集合中出现的元素</span></span><br><span class="line">result = s1 ^ s2  <span class="comment"># &#123;1, 2, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;= 检查一个集合是否是另一个集合的子集</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">result = a &lt;= b  <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; &lt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; &lt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt; 检查一个集合是否是另一个集合的真子集</span></span><br><span class="line">result = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># False</span></span><br><span class="line">result = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;= 检查一个集合是否是另一个的超集</span></span><br><span class="line"><span class="comment"># &gt; 检查一个集合是否是另一个的真超集</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ol>
<li><p>另一个非常有用的python内置数据类型是字典 (dict)，字典在其他语言中可能被叫做 联合内存 或 联合数组</p>
</li>
<li><p>属于一种新的数据结构，称为映射，也称为键值对结构，每个字典中可以有多个键值对，每一个键值对称为一项（item）</p>
</li>
<li><p>作用和列表类型，都是用来存储对象的容器</p>
</li>
<li><p>列表存储数据的性能很好，但是查询数据的性能很差，字典中每一个元素都有唯一的key, 通过key可快速查找value，查询效率高</p>
</li>
<li><p>字典的key可以是任意不可变对象，int，str,bool,tuple,….，多是字符串或数字，字典的值可以是任意对象</p>
</li>
<li><p>如果一个元组只包含字符串、数字或元组，那么这个元组也可以用作关键字，但如果这个元组直接或间接的包含了可变对象，那么它就不能用作关键字</p>
</li>
<li><p>列表不能用作关键字，因为列表可以通过索引、切片或 append() 和 extend() 之类的方法来改变</p>
</li>
<li><p>使用{} 创建字典，语法：{key:value,key:value,key:value,…..}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;&#125;  <span class="comment"># 创建了一个空字典</span></span><br><span class="line">print(d, type(d))  <span class="comment"># &#123;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>&#125;</span><br><span class="line">tel[<span class="string">&#x27;guido&#x27;</span>] = <span class="number">4137</span></span><br><span class="line">print(tel)  <span class="comment"># &#123;&#x27;jack&#x27;: 4098, &#x27;sape&#x27;: 4139, &#x27;guido&#x27;: 4137&#125;</span></span><br><span class="line">print(tel[<span class="string">&#x27;jack&#x27;</span>])  <span class="comment"># 4098</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以使用dict() 函数创建，dict() 构造函数可以直接从键值对序列里创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = dict(name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, gender=<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;张三&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>还可以将一个包含有双值子序列的序列转换为字典，双值序列，序列中只有两个值，如 [1,2]   (‘a’,3)   ‘ab’ 等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1 = dict([(<span class="string">&#x27;sape&#x27;</span>, <span class="number">4139</span>), (<span class="string">&#x27;guido&#x27;</span>, <span class="number">4127</span>), (<span class="string">&#x27;jack&#x27;</span>, <span class="number">4098</span>)])</span><br><span class="line">print(d1)  <span class="comment"># &#123;&#x27;sape&#x27;: 4139, &#x27;guido&#x27;: 4127, &#x27;jack&#x27;: 4098&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典的键不能重复，若出现重复，后面的替换前面的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;李四&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用了字典中不存在的键，会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">print(d[<span class="string">&#x27;address&#x27;</span>])  <span class="comment"># KeyError: &#x27;address&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以用 del 来删除一个键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>&#125;</span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">&#x27;sape&#x27;</span>]</span><br><span class="line">tel[<span class="string">&#x27;irv&#x27;</span>] = <span class="number">4127</span></span><br><span class="line">print(tel)  <span class="comment"># &#123;&#x27;jack&#x27;: 4098, &#x27;guido&#x27;: 4137, &#x27;irv&#x27;: 4127&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>len()，获取字典中键值对的个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = dict(name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, gender=<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">print(len(d))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>in和not in，检查字典是否包含指定的键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>&#125;tel = “</span><br><span class="line">b1 = <span class="string">&#x27;guido&#x27;</span> <span class="keyword">in</span> tel</span><br><span class="line">print(b1)  <span class="comment"># True</span></span><br><span class="line">   </span><br><span class="line">b2 = <span class="string">&#x27;jack&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tel</span><br><span class="line">print(b2)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>get(key[, default]) ，根据key获取字典中的value，如果获取的key不存在，会返回None，也可以指定一个默认值作为第二个参数，获取不到值时将会返回默认值，更安全，不会异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(d.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 张三</span></span><br><span class="line">print(d.get(<span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;广东省&#x27;</span>))  <span class="comment"># 广东省</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对一个字典执行 list(d) 将返回包含该字典中所有键的列表，按插入次序排列，如需其他排序，要使用 sorted(d)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_tel1 = list(tel)</span><br><span class="line">print(new_tel1)  <span class="comment"># [&#x27;jack&#x27;, &#x27;guido&#x27;, &#x27;irv&#x27;]</span></span><br><span class="line"></span><br><span class="line">new_tel2 = sorted(tel)</span><br><span class="line">print(new_tel2)  <span class="comment"># [&#x27;guido&#x27;, &#x27;irv&#x27;, &#x27;jack&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典推导是可以从任意的键值表达式中创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d2 = &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">print(d2)  <span class="comment"># &#123;2: 4, 4: 16, 6: 36&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当关键字是简单字符串时，有时直接通过关键字参数来指定键值对更方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d3 = dict(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">print(d3)  <span class="comment"># &#123;&#x27;sape&#x27;: 4139, &#x27;guido&#x27;: 4127, &#x27;jack&#x27;: 4098&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改字典的操作</p>
<ul>
<li><p>通过d[key] = value 修改， 如果key存在则覆盖，不存在则添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;李华&#x27;</span>  <span class="comment"># 修改字典的key-value</span></span><br><span class="line">d[<span class="string">&#x27;address&#x27;</span>] = <span class="string">&#x27;上海&#x27;</span>  <span class="comment"># 向字典中添加key-value</span></span><br><span class="line"></span><br><span class="line">print(d)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;李华&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;address&#x27;: &#x27;上海&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>setdefault(key[, default]) ，可以用来向字典中添加key-value，如果key已经存在于字典中，则返回key的值，不会对字典做任何操作，如果key不存在，则向字典中添加这个key，并设置value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = d.setdefault(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;李华&#x27;</span>)</span><br><span class="line">print(result, d)  <span class="comment"># 张三 &#123;&#x27;name&#x27;: &#x27;张三&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">result = d.setdefault(<span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>)</span><br><span class="line">print(result, d)  <span class="comment"># 上海 &#123;&#x27;name&#x27;: &#x27;张三&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;address&#x27;: &#x27;上海&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>update([other])，将其他字典中的 key-value 添加到当前字典中，如果有重复的key，后面的会覆盖当前的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line">d1.update(d2)</span><br><span class="line"></span><br><span class="line">print(d1)  <span class="comment"># &#123;&#x27;a&#x27;: 7, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4, &#x27;e&#x27;: 5, &#x27;f&#x27;: 6&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除字典的操作</p>
<ul>
<li><p>可以使用 del 来删除字典中的 key-value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d= &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">print(d) <span class="comment">#&#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>popitem()，随机删除字典中的一个键值对，一般都会删除最后一个键值对，会将删除的key-value作为返回值返回，当使用popitem()删除一个空字典时，会抛出异常 KeyError: ‘popitem(): dictionary is empty’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">result = d.popitem()</span><br><span class="line">print(result, d)  <span class="comment"># (&#x27;c&#x27;, 3) &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pop(key[, default])，根据key删除字典中的key-value，会将被删除的value返回，如果删除不存在的key，会抛出异常，如果指定了默认值，再删除不存在的key时，不会报错，而是直接返回默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">result = d.pop(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">print(d, result)  <span class="comment"># &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;  1</span></span><br><span class="line">result = d.pop(<span class="string">&#x27;z&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">print(d, result)  <span class="comment"># &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125; 100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>clear()用来清空字典</p>
</li>
<li><p>copy()，用于对字典进行浅拷贝，浅拷贝会简单复制对象内部的值，如果值也是一个可变对象，这个可变对象不会被复制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">d1 = &#123;<span class="string">&#x27;a&#x27;</span>: d, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">d1[<span class="string">&#x27;a&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;李华&quot;</span></span><br><span class="line">d2 = d1.copy()</span><br><span class="line"></span><br><span class="line">print(d1, id(d1))  <span class="comment"># &#123;&#x27;a&#x27;: &#123;&#x27;name&#x27;: &#x27;李华&#x27;, &#x27;age&#x27;: 18&#125;, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125; 1831165784768</span></span><br><span class="line">print(d2, id(d2))  <span class="comment"># &#123;&#x27;a&#x27;: &#123;&#x27;name&#x27;: &#x27;李华&#x27;, &#x27;age&#x27;: 18&#125;, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125; 1831165692672</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
</li>
</ol>
<ol start="20">
<li><p>遍历字典</p>
<ul>
<li><p>keys() , 该方法会返回一个序列，序列中保存有字典的所有的key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    print(k, d[k])</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name 张三</span></span><br><span class="line"><span class="string">age 18</span></span><br><span class="line"><span class="string">gender 男</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>values()，该方法会返回一个序列，序列中保存有字典所有的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    print(v)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">张三  18  男</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>items()，该方法会返回一个序列，序列中包含双值子序列，双值分别是，字典中的 key 和 value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(k, <span class="string">&#x27;=&#x27;</span>, v)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name = 张三</span></span><br><span class="line"><span class="string">age = 18</span></span><br><span class="line"><span class="string">gender = 男</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="循环的技巧"><a href="#循环的技巧" class="headerlink" title="循环的技巧"></a>循环的技巧</h3><ol>
<li><p>在字典中循环时，用 item() 方法可将关键字和对应的值同时取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stuInfo = &#123;<span class="string">&#x27;姓名&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;性别&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> stuInfo.items():</span><br><span class="line">    print(k, v)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">姓名 张三</span></span><br><span class="line"><span class="string">年龄 15</span></span><br><span class="line"><span class="string">性别 男</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在序列中循环时，用 enumerate() 函数可以将索引位置和其对应的值同时取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> enumerate([<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>]):</span><br><span class="line">    print(k, v)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 姓名</span></span><br><span class="line"><span class="string">1 年龄</span></span><br><span class="line"><span class="string">2 性别</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同时在两个或多个序列中循环时，用zip() 函数将其内元素一一匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">questions = [<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>]</span><br><span class="line">answers = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> zip(questions, answers):</span><br><span class="line">    print(&#123;<span class="string">&#x27;&#123;0&#125;:&#123;1&#125;&#x27;</span>.format(k, v)&#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;姓名:张三&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;年龄:18&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;性别:男&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逆向循环一个序列，可以先正向定位㤡，然后调用 reversed() 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按某个指定顺序循环一个序列，可以用 sorted() 函数，它可以在不改动原序列的基础上返回一个新的拍好序的序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted(set(basket)):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">apple</span></span><br><span class="line"><span class="string">banana</span></span><br><span class="line"><span class="string">orange</span></span><br><span class="line"><span class="string">pear</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在循环时修改列表内容时，可以改为创建一个新列表，简单安全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">raw_data = [<span class="number">56.2</span>, float(<span class="string">&#x27;NaN&#x27;</span>), <span class="number">51.7</span>, <span class="number">55.3</span>, <span class="number">52.5</span>, float(<span class="string">&#x27;NaN&#x27;</span>), <span class="number">47.8</span>]</span><br><span class="line">filter_data = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> raw_data:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> math.isnan(item):</span><br><span class="line">        filter_data.append(item)</span><br><span class="line">print(filter_data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[56.2, 51.7, 55.3, 52.5, 47.8]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="深入条件控制"><a href="#深入条件控制" class="headerlink" title="深入条件控制"></a>深入条件控制</h3><ol>
<li><p>while 和 if 条件句中可以使用任意操作，不仅仅是比较操作</p>
</li>
<li><p>比较操作符 in 和 not in 检验一个值是否在或不在一个序列中。</p>
</li>
<li><p>操作符 is 和 is not 比较两个对象是不是同一个对象，这只对像列表这样的可变对象比较重要。</p>
</li>
<li><p>所有的比较操作符都有相同的优先级，且优先级比数字运算符低</p>
</li>
<li><p>比较操作可以传递，例如 a&lt;b ==c ，会校验 a小于b 并且 b等于c</p>
</li>
<li><p>比较操作可以通过布尔运算符 and 和 or 来组合</p>
</li>
<li><p>比较操作或任何布尔运算的结果都可以用 not 来取反</p>
</li>
<li><p>这些操作符的优先级低于比较操作符，其中，not优先级最高，or 优先级最低，因此 A and not B or C 等价于 (A and (not B)) or C</p>
</li>
<li><p>布尔运算符 and 和 or 也被称为短路运算符，它们的参数从左至于右解析，一旦可以确定结果解析就停止。当用作普通值而非布尔值时，短路操作符的返回值通常是最后一个变量</p>
</li>
<li><p>也可以把比较操作或者逻辑表达式的结果赋值给一个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1，str2，str3=<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Tron&#x27;</span>,<span class="string">&#x27;Ham&#x27;</span></span><br><span class="line">non_null = str1 <span class="keyword">or</span> str2 <span class="keyword">or</span> str3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tron</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="比较序列和其他类型"><a href="#比较序列和其他类型" class="headerlink" title="比较序列和其他类型"></a>比较序列和其他类型</h3><ol>
<li><p>序列对象通常可以与相同序列类型的其他对象比较，这种比较使用 字典式 顺序</p>
</li>
<li><p>首先比较开头的两个对应元素，如果不等则比较结果由此确定</p>
</li>
<li><p>如果相等则比较之后的两个元素，以此类推，直到有一个序列被耗尽</p>
</li>
<li><p>如果要比较的两元素本身又是相同类型的序列，则会递归执行字典式顺序比较</p>
</li>
<li><p>如果两序列中所有的对应元素都相等，则两序列也将被视为相等</p>
</li>
<li><p>如果一个序列是另一个序列的初始子序列，则较短的序列被视为较小</p>
</li>
<li><p>对于字符串来说，字典式顺序是使用 Unicode 码位序号 对单个字符排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span> &lt; <span class="string">&#x27;C&#x27;</span> &lt; <span class="string">&#x27;Pascal&#x27;</span> &lt; <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) &lt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>) </span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>) &lt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt; (<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>)) &lt; (<span class="number">1</span>,<span class="number">2</span>,(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;a&#x27;</span>),<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
